

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Nov 26 20:29:18 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bitbssCOMMONh,global,bit,class=COMMON,space=1,delta=1
    12                           	psect	bssCOMMONh,global,class=COMMON,space=1,delta=1
    13                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMONh,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackCOMMONl,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,delta=2
    72                           	dabs	1,0x1E0,5,_ICOUNTER
    73                           	dabs	1,0x1A0,60,_IOSensorData
    74                           	dabs	1,0x1E6,10,_COUNTER
    75                           	dabs	1,0x7E,2
    76  0000                     
    77                           ; Version 1.44
    78                           ; Generated 14/09/2017 GMT
    79                           ; 
    80                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    81                           ; All rights reserved.
    82                           ; 
    83                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    84                           ; 
    85                           ; Redistribution and use in source and binary forms, with or without modification, are
    86                           ; permitted provided that the following conditions are met:
    87                           ; 
    88                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    89                           ;        conditions and the following disclaimer.
    90                           ; 
    91                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    92                           ;        of conditions and the following disclaimer in the documentation and/or other
    93                           ;        materials provided with the distribution.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16F1827 Definitions
   109                           ; 
   110                           ; SFR Addresses
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  0011                     	;# 
   126  0012                     	;# 
   127  0013                     	;# 
   128  0014                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0016                     	;# 
   132  0017                     	;# 
   133  0018                     	;# 
   134  0019                     	;# 
   135  001A                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001E                     	;# 
   139  001F                     	;# 
   140  008C                     	;# 
   141  008D                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0097                     	;# 
   149  0098                     	;# 
   150  0099                     	;# 
   151  009A                     	;# 
   152  009B                     	;# 
   153  009B                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  0111                     	;# 
   160  0112                     	;# 
   161  0113                     	;# 
   162  0114                     	;# 
   163  0115                     	;# 
   164  0116                     	;# 
   165  0117                     	;# 
   166  0118                     	;# 
   167  0119                     	;# 
   168  011A                     	;# 
   169  011B                     	;# 
   170  011D                     	;# 
   171  011E                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0191                     	;# 
   175  0191                     	;# 
   176  0192                     	;# 
   177  0193                     	;# 
   178  0193                     	;# 
   179  0193                     	;# 
   180  0194                     	;# 
   181  0195                     	;# 
   182  0196                     	;# 
   183  0199                     	;# 
   184  019A                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019C                     	;# 
   190  019C                     	;# 
   191  019D                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020D                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0219                     	;# 
   212  021A                     	;# 
   213  021B                     	;# 
   214  021C                     	;# 
   215  021D                     	;# 
   216  021E                     	;# 
   217  021F                     	;# 
   218  0291                     	;# 
   219  0291                     	;# 
   220  0292                     	;# 
   221  0293                     	;# 
   222  0294                     	;# 
   223  0295                     	;# 
   224  0295                     	;# 
   225  0296                     	;# 
   226  0298                     	;# 
   227  0298                     	;# 
   228  0299                     	;# 
   229  029A                     	;# 
   230  029B                     	;# 
   231  029C                     	;# 
   232  029C                     	;# 
   233  029D                     	;# 
   234  029E                     	;# 
   235  029E                     	;# 
   236  0311                     	;# 
   237  0311                     	;# 
   238  0312                     	;# 
   239  0313                     	;# 
   240  0318                     	;# 
   241  0318                     	;# 
   242  0319                     	;# 
   243  031A                     	;# 
   244  0394                     	;# 
   245  0395                     	;# 
   246  0396                     	;# 
   247  039A                     	;# 
   248  039C                     	;# 
   249  039D                     	;# 
   250  039E                     	;# 
   251  039F                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  041C                     	;# 
   256  041D                     	;# 
   257  041E                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0013                     	;# 
   286  0014                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  008C                     	;# 
   299  008D                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0093                     	;# 
   303  0094                     	;# 
   304  0095                     	;# 
   305  0096                     	;# 
   306  0097                     	;# 
   307  0098                     	;# 
   308  0099                     	;# 
   309  009A                     	;# 
   310  009B                     	;# 
   311  009B                     	;# 
   312  009C                     	;# 
   313  009D                     	;# 
   314  009E                     	;# 
   315  010C                     	;# 
   316  010D                     	;# 
   317  0111                     	;# 
   318  0112                     	;# 
   319  0113                     	;# 
   320  0114                     	;# 
   321  0115                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  0118                     	;# 
   325  0119                     	;# 
   326  011A                     	;# 
   327  011B                     	;# 
   328  011D                     	;# 
   329  011E                     	;# 
   330  018C                     	;# 
   331  018D                     	;# 
   332  0191                     	;# 
   333  0191                     	;# 
   334  0192                     	;# 
   335  0193                     	;# 
   336  0193                     	;# 
   337  0193                     	;# 
   338  0194                     	;# 
   339  0195                     	;# 
   340  0196                     	;# 
   341  0199                     	;# 
   342  019A                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019B                     	;# 
   347  019C                     	;# 
   348  019C                     	;# 
   349  019D                     	;# 
   350  019E                     	;# 
   351  019F                     	;# 
   352  020C                     	;# 
   353  020D                     	;# 
   354  0211                     	;# 
   355  0211                     	;# 
   356  0212                     	;# 
   357  0212                     	;# 
   358  0213                     	;# 
   359  0213                     	;# 
   360  0214                     	;# 
   361  0214                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0215                     	;# 
   365  0216                     	;# 
   366  0216                     	;# 
   367  0217                     	;# 
   368  0217                     	;# 
   369  0219                     	;# 
   370  021A                     	;# 
   371  021B                     	;# 
   372  021C                     	;# 
   373  021D                     	;# 
   374  021E                     	;# 
   375  021F                     	;# 
   376  0291                     	;# 
   377  0291                     	;# 
   378  0292                     	;# 
   379  0293                     	;# 
   380  0294                     	;# 
   381  0295                     	;# 
   382  0295                     	;# 
   383  0296                     	;# 
   384  0298                     	;# 
   385  0298                     	;# 
   386  0299                     	;# 
   387  029A                     	;# 
   388  029B                     	;# 
   389  029C                     	;# 
   390  029C                     	;# 
   391  029D                     	;# 
   392  029E                     	;# 
   393  029E                     	;# 
   394  0311                     	;# 
   395  0311                     	;# 
   396  0312                     	;# 
   397  0313                     	;# 
   398  0318                     	;# 
   399  0318                     	;# 
   400  0319                     	;# 
   401  031A                     	;# 
   402  0394                     	;# 
   403  0395                     	;# 
   404  0396                     	;# 
   405  039A                     	;# 
   406  039C                     	;# 
   407  039D                     	;# 
   408  039E                     	;# 
   409  039F                     	;# 
   410  0415                     	;# 
   411  0416                     	;# 
   412  0417                     	;# 
   413  041C                     	;# 
   414  041D                     	;# 
   415  041E                     	;# 
   416  0FE4                     	;# 
   417  0FE5                     	;# 
   418  0FE6                     	;# 
   419  0FE7                     	;# 
   420  0FE8                     	;# 
   421  0FE9                     	;# 
   422  0FEA                     	;# 
   423  0FEB                     	;# 
   424  0FED                     	;# 
   425  0FEE                     	;# 
   426  0FEF                     	;# 
   427  0000                     	;# 
   428  0001                     	;# 
   429  0002                     	;# 
   430  0003                     	;# 
   431  0004                     	;# 
   432  0005                     	;# 
   433  0006                     	;# 
   434  0007                     	;# 
   435  0008                     	;# 
   436  0009                     	;# 
   437  000A                     	;# 
   438  000B                     	;# 
   439  000C                     	;# 
   440  000D                     	;# 
   441  0011                     	;# 
   442  0012                     	;# 
   443  0013                     	;# 
   444  0014                     	;# 
   445  0015                     	;# 
   446  0016                     	;# 
   447  0016                     	;# 
   448  0017                     	;# 
   449  0018                     	;# 
   450  0019                     	;# 
   451  001A                     	;# 
   452  001B                     	;# 
   453  001C                     	;# 
   454  001E                     	;# 
   455  001F                     	;# 
   456  008C                     	;# 
   457  008D                     	;# 
   458  0091                     	;# 
   459  0092                     	;# 
   460  0093                     	;# 
   461  0094                     	;# 
   462  0095                     	;# 
   463  0096                     	;# 
   464  0097                     	;# 
   465  0098                     	;# 
   466  0099                     	;# 
   467  009A                     	;# 
   468  009B                     	;# 
   469  009B                     	;# 
   470  009C                     	;# 
   471  009D                     	;# 
   472  009E                     	;# 
   473  010C                     	;# 
   474  010D                     	;# 
   475  0111                     	;# 
   476  0112                     	;# 
   477  0113                     	;# 
   478  0114                     	;# 
   479  0115                     	;# 
   480  0116                     	;# 
   481  0117                     	;# 
   482  0118                     	;# 
   483  0119                     	;# 
   484  011A                     	;# 
   485  011B                     	;# 
   486  011D                     	;# 
   487  011E                     	;# 
   488  018C                     	;# 
   489  018D                     	;# 
   490  0191                     	;# 
   491  0191                     	;# 
   492  0192                     	;# 
   493  0193                     	;# 
   494  0193                     	;# 
   495  0193                     	;# 
   496  0194                     	;# 
   497  0195                     	;# 
   498  0196                     	;# 
   499  0199                     	;# 
   500  019A                     	;# 
   501  019B                     	;# 
   502  019B                     	;# 
   503  019B                     	;# 
   504  019B                     	;# 
   505  019C                     	;# 
   506  019C                     	;# 
   507  019D                     	;# 
   508  019E                     	;# 
   509  019F                     	;# 
   510  020C                     	;# 
   511  020D                     	;# 
   512  0211                     	;# 
   513  0211                     	;# 
   514  0212                     	;# 
   515  0212                     	;# 
   516  0213                     	;# 
   517  0213                     	;# 
   518  0214                     	;# 
   519  0214                     	;# 
   520  0215                     	;# 
   521  0215                     	;# 
   522  0215                     	;# 
   523  0216                     	;# 
   524  0216                     	;# 
   525  0217                     	;# 
   526  0217                     	;# 
   527  0219                     	;# 
   528  021A                     	;# 
   529  021B                     	;# 
   530  021C                     	;# 
   531  021D                     	;# 
   532  021E                     	;# 
   533  021F                     	;# 
   534  0291                     	;# 
   535  0291                     	;# 
   536  0292                     	;# 
   537  0293                     	;# 
   538  0294                     	;# 
   539  0295                     	;# 
   540  0295                     	;# 
   541  0296                     	;# 
   542  0298                     	;# 
   543  0298                     	;# 
   544  0299                     	;# 
   545  029A                     	;# 
   546  029B                     	;# 
   547  029C                     	;# 
   548  029C                     	;# 
   549  029D                     	;# 
   550  029E                     	;# 
   551  029E                     	;# 
   552  0311                     	;# 
   553  0311                     	;# 
   554  0312                     	;# 
   555  0313                     	;# 
   556  0318                     	;# 
   557  0318                     	;# 
   558  0319                     	;# 
   559  031A                     	;# 
   560  0394                     	;# 
   561  0395                     	;# 
   562  0396                     	;# 
   563  039A                     	;# 
   564  039C                     	;# 
   565  039D                     	;# 
   566  039E                     	;# 
   567  039F                     	;# 
   568  0415                     	;# 
   569  0416                     	;# 
   570  0417                     	;# 
   571  041C                     	;# 
   572  041D                     	;# 
   573  041E                     	;# 
   574  0FE4                     	;# 
   575  0FE5                     	;# 
   576  0FE6                     	;# 
   577  0FE7                     	;# 
   578  0FE8                     	;# 
   579  0FE9                     	;# 
   580  0FEA                     	;# 
   581  0FEB                     	;# 
   582  0FED                     	;# 
   583  0FEE                     	;# 
   584  0FEF                     	;# 
   585                           
   586                           	psect	eeprom_data
   587  0000  000D 0006 0006 000D 0006 0006 0006 0006 	db	13,6,6,13,6,6,6,6	;# 
   588  0008  000D 000D 007F 00FF 00FF 00FF 00FF 00FF 	db	13,13,127,255,255,255,255,255	;# 
   589  0000                     	;# 
   590  0001                     	;# 
   591  0002                     	;# 
   592  0003                     	;# 
   593  0004                     	;# 
   594  0005                     	;# 
   595  0006                     	;# 
   596  0007                     	;# 
   597  0008                     	;# 
   598  0009                     	;# 
   599  000A                     	;# 
   600  000B                     	;# 
   601  000C                     	;# 
   602  000D                     	;# 
   603  0011                     	;# 
   604  0012                     	;# 
   605  0013                     	;# 
   606  0014                     	;# 
   607  0015                     	;# 
   608  0016                     	;# 
   609  0016                     	;# 
   610  0017                     	;# 
   611  0018                     	;# 
   612  0019                     	;# 
   613  001A                     	;# 
   614  001B                     	;# 
   615  001C                     	;# 
   616  001E                     	;# 
   617  001F                     	;# 
   618  008C                     	;# 
   619  008D                     	;# 
   620  0091                     	;# 
   621  0092                     	;# 
   622  0093                     	;# 
   623  0094                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0097                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009A                     	;# 
   630  009B                     	;# 
   631  009B                     	;# 
   632  009C                     	;# 
   633  009D                     	;# 
   634  009E                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  0111                     	;# 
   638  0112                     	;# 
   639  0113                     	;# 
   640  0114                     	;# 
   641  0115                     	;# 
   642  0116                     	;# 
   643  0117                     	;# 
   644  0118                     	;# 
   645  0119                     	;# 
   646  011A                     	;# 
   647  011B                     	;# 
   648  011D                     	;# 
   649  011E                     	;# 
   650  018C                     	;# 
   651  018D                     	;# 
   652  0191                     	;# 
   653  0191                     	;# 
   654  0192                     	;# 
   655  0193                     	;# 
   656  0193                     	;# 
   657  0193                     	;# 
   658  0194                     	;# 
   659  0195                     	;# 
   660  0196                     	;# 
   661  0199                     	;# 
   662  019A                     	;# 
   663  019B                     	;# 
   664  019B                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019C                     	;# 
   668  019C                     	;# 
   669  019D                     	;# 
   670  019E                     	;# 
   671  019F                     	;# 
   672  020C                     	;# 
   673  020D                     	;# 
   674  0211                     	;# 
   675  0211                     	;# 
   676  0212                     	;# 
   677  0212                     	;# 
   678  0213                     	;# 
   679  0213                     	;# 
   680  0214                     	;# 
   681  0214                     	;# 
   682  0215                     	;# 
   683  0215                     	;# 
   684  0215                     	;# 
   685  0216                     	;# 
   686  0216                     	;# 
   687  0217                     	;# 
   688  0217                     	;# 
   689  0219                     	;# 
   690  021A                     	;# 
   691  021B                     	;# 
   692  021C                     	;# 
   693  021D                     	;# 
   694  021E                     	;# 
   695  021F                     	;# 
   696  0291                     	;# 
   697  0291                     	;# 
   698  0292                     	;# 
   699  0293                     	;# 
   700  0294                     	;# 
   701  0295                     	;# 
   702  0295                     	;# 
   703  0296                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  029B                     	;# 
   709  029C                     	;# 
   710  029C                     	;# 
   711  029D                     	;# 
   712  029E                     	;# 
   713  029E                     	;# 
   714  0311                     	;# 
   715  0311                     	;# 
   716  0312                     	;# 
   717  0313                     	;# 
   718  0318                     	;# 
   719  0318                     	;# 
   720  0319                     	;# 
   721  031A                     	;# 
   722  0394                     	;# 
   723  0395                     	;# 
   724  0396                     	;# 
   725  039A                     	;# 
   726  039C                     	;# 
   727  039D                     	;# 
   728  039E                     	;# 
   729  039F                     	;# 
   730  0415                     	;# 
   731  0416                     	;# 
   732  0417                     	;# 
   733  041C                     	;# 
   734  041D                     	;# 
   735  041E                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE9                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEF                     	;# 
   747                           
   748                           	psect	idataBANK0
   749  0003                     __pidataBANK0:	
   750                           
   751                           ;initializer for _Timer1Clock
   752  0003  3408               	retlw	8
   753                           
   754                           	psect	stringtext1
   755  0800                     __pstringtext1:	
   756  0800                     _NOT_IOMASK:	
   757  0800  34F7               	retlw	247
   758  0801  34FD               	retlw	253
   759  0802  34EF               	retlw	239
   760  0803  34BF               	retlw	191
   761  0804  347F               	retlw	127
   762  0805  34FE               	retlw	254
   763  0806  34FD               	retlw	253
   764  0807  34FB               	retlw	251
   765  0808  34F7               	retlw	247
   766  0809  34EF               	retlw	239
   767  080A  34FF               	retlw	255
   768  080B                     __end_of_NOT_IOMASK:	
   769                           
   770                           	psect	stringtext2
   771  080B                     __pstringtext2:	
   772  080B                     _IOMASK:	
   773  080B  3408               	retlw	8
   774  080C  3402               	retlw	2
   775  080D  3410               	retlw	16
   776  080E  3440               	retlw	64
   777  080F  3480               	retlw	128
   778  0810  3401               	retlw	1
   779  0811  3402               	retlw	2
   780  0812  3404               	retlw	4
   781  0813  3408               	retlw	8
   782  0814  3410               	retlw	16
   783  0815  3400               	retlw	0
   784  0816                     __end_of_IOMASK:	
   785                           
   786                           	psect	stringtext3
   787  0816                     __pstringtext3:	
   788  0816                     SetIOConfig@ValidCCP:	
   789  0816  3401               	retlw	1
   790  0817  3400               	retlw	0
   791  0818  3400               	retlw	0
   792  0819  3401               	retlw	1
   793  081A  3400               	retlw	0
   794  081B  3400               	retlw	0
   795  081C  3400               	retlw	0
   796  081D  3400               	retlw	0
   797  081E  3401               	retlw	1
   798  081F  3401               	retlw	1
   799  0820                     __end_ofSetIOConfig@ValidCCP:	
   800                           
   801                           	psect	stringtext4
   802  0820                     __pstringtext4:	
   803  0820                     _CSMASK:	
   804  0820  3409               	retlw	9
   805  0821  340B               	retlw	11
   806  0822  3408               	retlw	8
   807  0823  3405               	retlw	5
   808  0824  3406               	retlw	6
   809  0825  3400               	retlw	0
   810  0826  3401               	retlw	1
   811  0827  3402               	retlw	2
   812  0828  3403               	retlw	3
   813  0829  3404               	retlw	4
   814  082A                     __end_of_CSMASK:	
   815  0070                     _DHTFlag	set	112
   816  0071                     _IOCounterFlag	set	113
   817  0018                     _T1CON	set	24
   818  0018                     _T1CONbits	set	24
   819  001A                     _TMR2	set	26
   820  001B                     _PR2	set	27
   821  001C                     _T2CON	set	28
   822  000B                     _INTCON	set	11
   823  0016                     _TMR1L	set	22
   824  0017                     _TMR1H	set	23
   825  0015                     _TMR0	set	21
   826  000C                     _PORTA	set	12
   827  000D                     _PORTB	set	13
   828  0018                     _CARRY	set	24
   829  00CF                     _TMR1GE	set	207
   830  0099                     _TMR4IF	set	153
   831  005B                     _IOCIE	set	91
   832  005E                     _PEIE	set	94
   833  00C0                     _TMR1ON	set	192
   834  0068                     _RB0	set	104
   835  008D                     _RCIF	set	141
   836  008C                     _TXIF	set	140
   837  00F7                     _CPSON	set	247
   838  0089                     _TMR2IF	set	137
   839  009D                     _CCP4IF	set	157
   840  009C                     _CCP3IF	set	156
   841  0090                     _CCP2IF	set	144
   842  008A                     _CCP1IF	set	138
   843  0088                     _TMR1IF	set	136
   844  008E                     _ADIF	set	142
   845  005F                     _GIE	set	95
   846  005A                     _TMR0IF	set	90
   847  005D                     _TMR0IE	set	93
   848  009D                     _ADCON0	set	157
   849  009E                     _ADCON1	set	158
   850  0095                     _OPTION_REG	set	149
   851  0097                     _WDTCON	set	151
   852  009B                     _ADRESL	set	155
   853  009C                     _ADRESH	set	156
   854  009D                     _ADCON0bits	set	157
   855  009E                     _ADCON1bits	set	158
   856  008C                     _TRISA	set	140
   857  008D                     _TRISB	set	141
   858  0499                     _TMR4IE	set	1177
   859  0489                     _TMR2IE	set	1161
   860  048D                     _RCIE	set	1165
   861  048C                     _TXIE	set	1164
   862  0488                     _TMR1IE	set	1160
   863  04E8                     _ADON	set	1256
   864  048E                     _ADIE	set	1166
   865  049D                     _CCP4IE	set	1181
   866  049C                     _CCP3IE	set	1180
   867  0490                     _CCP2IE	set	1168
   868  048A                     _CCP1IE	set	1162
   869  0117                     _FVRCON	set	279
   870  011E                     _APFCON1	set	286
   871  011D                     _APFCON0	set	285
   872  0117                     _FVRCONbits	set	279
   873  0191                     _EEADR	set	401
   874  0196                     _EECON2	set	406
   875  0193                     _EEDATA	set	403
   876  0195                     _EECON1	set	405
   877  019C                     _SPBRGH	set	412
   878  019B                     _SPBRGL	set	411
   879  019D                     _RCSTA	set	413
   880  019E                     _TXSTA	set	414
   881  019A                     _TXREG	set	410
   882  018C                     _ANSELA	set	396
   883  018D                     _ANSELB	set	397
   884  0CAA                     _WREN	set	3242
   885  0CA8                     _RD	set	3240
   886  0CA9                     _WR	set	3241
   887  0CF8                     _ABDEN	set	3320
   888  0CFC                     _SCKP	set	3324
   889  0CEC                     _CREN	set	3308
   890  0CEF                     _SPEN	set	3311
   891  0CF5                     _TXEN	set	3317
   892  0CF4                     _SYNC	set	3316
   893  0CFB                     _BRG16	set	3323
   894  0CF2                     _BRGH	set	3314
   895  020C                     _WPUA	set	524
   896  020D                     _WPUB	set	525
   897  029E                     _CCPTMRS	set	670
   898  0298                     _CCPR2L	set	664
   899  0299                     _CCPR2H	set	665
   900  0291                     _CCPR1L	set	657
   901  0292                     _CCPR1H	set	658
   902  029A                     _CCP2CON	set	666
   903  0293                     _CCP1CON	set	659
   904  0318                     _CCPR4L	set	792
   905  0319                     _CCPR4H	set	793
   906  0311                     _CCPR3L	set	785
   907  0312                     _CCPR3H	set	786
   908  031A                     _CCP4CON	set	794
   909  0313                     _CCP3CON	set	787
   910  0396                     _IOCBF	set	918
   911  0395                     _IOCBN	set	917
   912  0394                     _IOCBP	set	916
   913  0415                     _TMR4	set	1045
   914  0416                     _PR4	set	1046
   915  0417                     _T4CON	set	1047
   916  0072                     _IOCounterReset	set	114
   917                           
   918                           ; #config settings
   919  0000                     
   920                           	psect	cinit
   921  0159                     start_initialization:	
   922  0159                     __initialization:	
   923                           
   924                           ; Initialize objects allocated to BANK0
   925  0159  3180  2003  3181   	fcall	__pidataBANK0	;fetch initializer
   926  015C  00ED               	movwf	__pdataBANK0& (0+127)
   927                           
   928                           ; Clear objects allocated to BITCOMMONh
   929  015D  01F7               	clrf	(__pbitbssCOMMONh/(0+8))& (0+127)
   930                           
   931                           ; Clear objects allocated to COMMONh
   932  015E  01F8               	clrf	__pbssCOMMONh& (0+127)
   933                           
   934                           ; Clear objects allocated to BITBANK0
   935  015F  01EC               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   936                           
   937                           ; Clear objects allocated to BANK0
   938  0160  3020               	movlw	low __pbssBANK0
   939  0161  0084               	movwf	4
   940  0162  3000               	movlw	high __pbssBANK0
   941  0163  0085               	movwf	5
   942  0164  302A               	movlw	42
   943  0165  318B  23DF  3181   	fcall	clear_ram0
   944                           
   945                           ; Clear objects allocated to BANK1
   946  0168  30A0               	movlw	low __pbssBANK1
   947  0169  0084               	movwf	4
   948  016A  3000               	movlw	high __pbssBANK1
   949  016B  0085               	movwf	5
   950  016C  304E               	movlw	78
   951  016D  318B  23DF  3181   	fcall	clear_ram0
   952                           
   953                           ; Clear objects allocated to BANK2
   954  0170  3020               	movlw	low __pbssBANK2
   955  0171  0084               	movwf	4
   956  0172  3001               	movlw	high __pbssBANK2
   957  0173  0085               	movwf	5
   958  0174  3040               	movlw	64
   959  0175  318B  23DF         	fcall	clear_ram0
   960  0177                     end_of_initialization:	
   961                           ;End of C runtime variable initialization code
   962                           
   963  0177                     __end_of__initialization:	
   964  0177  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   965  0178  0020               	movlb	0
   966  0179  3182  2ABC         	ljmp	_main	;jump to C main() function
   967                           
   968                           	psect	bitbssCOMMONh
   969  03B8                     __pbitbssCOMMONh:	
   970  03B8                     _WaitForStartDeciSecond:	
   971  03B8                     	ds	1
   972  03B9                     _GotCapSenseFlag:	
   973  03B9                     	ds	1
   974  03BA                     _WaitForEndDeciSecond:	
   975  03BA                     	ds	1
   976                           
   977                           	psect	bssCOMMONh
   978  0078                     __pbssCOMMONh:	
   979  0078                     _OutFiFo:	
   980  0078                     	ds	1
   981                           
   982                           	psect	bitbssBANK0
   983  0360                     __pbitbssBANK0:	
   984  0360                     _ForceReset:	
   985  0360                     	ds	1
   986  0361                     _EnableConfigChange:	
   987  0361                     	ds	1
   988  0362                     _ModbusOnTransmit:	
   989  0362                     	ds	1
   990  0363                     _ResetCounterFlag:	
   991  0363                     	ds	1
   992  0364                     _TimerSecFlag:	
   993  0364                     	ds	1
   994  0365                     _Timer0Overflow:	
   995  0365                     	ds	1
   996                           
   997                           	psect	bssBANK0
   998  0020                     __pbssBANK0:	
   999  0020                     _ModbusCRC:	
  1000  0020                     	ds	2
  1001  0022                     _ModbusData:	
  1002  0022                     	ds	2
  1003  0024                     _ModbusAddress:	
  1004  0024                     	ds	2
  1005  0026                     _PrimaryTimerms:	
  1006  0026                     	ds	2
  1007  0028                     _TimeCapture4Count:	
  1008  0028                     	ds	2
  1009  002A                     _TimeCapture3Count:	
  1010  002A                     	ds	2
  1011  002C                     _TimeCapture2Count:	
  1012  002C                     	ds	2
  1013  002E                     _TimeCapture1Count:	
  1014  002E                     	ds	2
  1015  0030                     _TimerHiCount:	
  1016  0030                     	ds	2
  1017  0032                     _Timerms:	
  1018  0032                     	ds	2
  1019  0034                     isr@_temp:	
  1020  0034                     	ds	1
  1021  0035                     _ModbusFramePointer:	
  1022  0035                     	ds	1
  1023  0036                     _ModbusSlave:	
  1024  0036                     	ds	1
  1025  0037                     _ModbusFunction:	
  1026  0037                     	ds	1
  1027  0038                     _RcvSerialSum:	
  1028  0038                     	ds	1
  1029  0039                     _SerialSum:	
  1030  0039                     	ds	1
  1031  003A                     _RcvOutFiFo:	
  1032  003A                     	ds	1
  1033  003B                     _RcvInFiFo:	
  1034  003B                     	ds	1
  1035  003C                     _InFiFo:	
  1036  003C                     	ds	1
  1037  003D                     _TimerDeciSec:	
  1038  003D                     	ds	1
  1039  003E                     _BadIO:	
  1040  003E                     	ds	1
  1041  003F                     _VRange:	
  1042  003F                     	ds	1
  1043  0040                     _Retry:	
  1044  0040                     	ds	1
  1045  0041                     _ByteIndex:	
  1046  0041                     	ds	1
  1047  0042                     _CSum:	
  1048  0042                     	ds	1
  1049  0043                     _WorkingByte:	
  1050  0043                     	ds	1
  1051  0044                     _BitCount:	
  1052  0044                     	ds	1
  1053  0045                     __TMR0:	
  1054  0045                     	ds	1
  1055  0046                     _CurrentIOCycle:	
  1056  0046                     	ds	1
  1057  0047                     _CurrentIOPin:	
  1058  0047                     	ds	1
  1059  0048                     _CurrentIOSensor:	
  1060  0048                     	ds	1
  1061  0049                     _CurrentIOStatus:	
  1062  0049                     	ds	1
  1063                           
  1064                           	psect	dataBANK0
  1065  006D                     __pdataBANK0:	
  1066  006D                     _Timer1Clock:	
  1067  006D                     	ds	1
  1068                           
  1069                           	psect	bssBANK1
  1070  00A0                     __pbssBANK1:	
  1071  00A0                     _TimeCapture:	
  1072  00A0                     	ds	16
  1073  00B0                     _WorkingSensorData:	
  1074  00B0                     	ds	6
  1075  00B6                     __TMR0_MSB:	
  1076  00B6                     	ds	2
  1077  00B8                     _ModbusPacketBuffer:	
  1078  00B8                     	ds	32
  1079  00D8                     _Setting:	
  1080  00D8                     	ds	12
  1081  00E4                     _ModbusBuffer:	
  1082  00E4                     	ds	10
  1083                           
  1084                           	psect	bssBANK2
  1085  0120                     __pbssBANK2:	
  1086  0120                     _RcvSerialBuffer:	
  1087  0120                     	ds	32
  1088  0140                     _SerialBuffer:	
  1089  0140                     	ds	32
  1090                           
  1091                           	psect	clrtext
  1092  0BDF                     clear_ram0:	
  1093                           ;	Called with FSR0 containing the base address, and
  1094                           ;	WREG with the size to clear
  1095                           
  1096  0BDF  0064               	clrwdt	;clear the watchdog before getting into this loop
  1097  0BE0                     clrloop0:	
  1098  0BE0  0180               	clrf	0	;clear RAM location pointed to by FSR
  1099  0BE1  3101               	addfsr 0,1
  1100  0BE2  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1101  0BE3  2BE0               	goto	clrloop0	;have we reached the end yet?
  1102  0BE4  3400               	retlw	0	;all done for this memory range, return
  1103                           
  1104                           	psect	cstackCOMMONh
  1105  0070                     __pcstackCOMMONh:	
  1106  0070                     ?_DealWithError:	
  1107  0070                     ?_ScanNextIOPin:	
  1108                           ; 1 bytes @ 0x0
  1109                           
  1110  0070                     ?_DoIOCycle:	
  1111                           ; 1 bytes @ 0x0
  1112                           
  1113  0070                     ?_ResetIOCycle:	
  1114                           ; 1 bytes @ 0x0
  1115                           
  1116  0070                     ?_ReadIOPin:	
  1117                           ; 1 bytes @ 0x0
  1118                           
  1119  0070                     ?_SaveSetting:	
  1120                           ; 1 bytes @ 0x0
  1121                           
  1122  0070                     ?_SetAnalogConfig:	
  1123                           ; 1 bytes @ 0x0
  1124                           
  1125  0070                     ?_SetOutputConfig:	
  1126                           ; 1 bytes @ 0x0
  1127                           
  1128  0070                     ?_SetInputConfig:	
  1129                           ; 1 bytes @ 0x0
  1130                           
  1131  0070                     ?_SetIOConfig:	
  1132                           ; 1 bytes @ 0x0
  1133                           
  1134  0070                     ?_isr:	
  1135                           ; 1 bytes @ 0x0
  1136                           
  1137  0070                     ??_isr:	
  1138                           ; 1 bytes @ 0x0
  1139                           
  1140  0070                     ?_putch:	
  1141                           ; 1 bytes @ 0x0
  1142                           
  1143  0070                     ?_RcvClear:	
  1144                           ; 1 bytes @ 0x0
  1145                           
  1146  0070                     ?_RcvIsDataIn:	
  1147                           ; 1 bytes @ 0x0
  1148                           
  1149  0070                     ?_RcvGetChar:	
  1150                           ; 1 bytes @ 0x0
  1151                           
  1152  0070                     ?_SendModbusPacket:	
  1153                           ; 1 bytes @ 0x0
  1154                           
  1155  0070                     ?_InitModbusPacket:	
  1156                           ; 1 bytes @ 0x0
  1157                           
  1158  0070                     ?_SendFrameError:	
  1159                           ; 1 bytes @ 0x0
  1160                           
  1161  0070                     ?_SendReadByteFrame:	
  1162                           ; 1 bytes @ 0x0
  1163                           
  1164  0070                     ?_SendBytesFrame:	
  1165                           ; 1 bytes @ 0x0
  1166                           
  1167  0070                     ?_SendPresetFrame:	
  1168                           ; 1 bytes @ 0x0
  1169                           
  1170  0070                     ?_DecodeSerial:	
  1171                           ; 1 bytes @ 0x0
  1172                           
  1173  0070                     ?_ReadHoldingRegister:	
  1174                           ; 1 bytes @ 0x0
  1175                           
  1176  0070                     ?_MultipleRegister:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179  0070                     ?_GetInputPin:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182  0070                     ?_ReadCurrentRegister:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185  0070                     ?_ReadInputStatus:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188  0070                     ?_WriteAllCoils:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191  0070                     ?_ForceSingleCoil:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194  0070                     ?_PresetSingleRegister:	
  1195                           ; 1 bytes @ 0x0
  1196                           
  1197  0070                     ?_ExecuteCommand:	
  1198                           ; 1 bytes @ 0x0
  1199                           
  1200  0070                     ?_main:	
  1201                           ; 1 bytes @ 0x0
  1202                           
  1203                           
  1204                           ; 2 bytes @ 0x0
  1205  0070                     	ds	2
  1206  0072                     ?_eeprom_write:	
  1207  0072                     ?_SetTimeCaptureConfig:	
  1208                           ; 1 bytes @ 0x2
  1209                           
  1210  0072                     ??_SetTimer1Clock:	
  1211                           ; 1 bytes @ 0x2
  1212                           
  1213  0072                     ??_eeprom_read:	
  1214                           ; 1 bytes @ 0x2
  1215                           
  1216  0072                     ??_DealWithError:	
  1217                           ; 1 bytes @ 0x2
  1218                           
  1219  0072                     ??_ScanNextIOPin:	
  1220                           ; 1 bytes @ 0x2
  1221                           
  1222  0072                     ??_ResetIOCycle:	
  1223                           ; 1 bytes @ 0x2
  1224                           
  1225  0072                     ??_ReadIOPin:	
  1226                           ; 1 bytes @ 0x2
  1227                           
  1228  0072                     ?_WriteIO:	
  1229                           ; 1 bytes @ 0x2
  1230                           
  1231  0072                     ?_SetIOChange:	
  1232                           ; 1 bytes @ 0x2
  1233                           
  1234  0072                     ??_SetAnalogConfig:	
  1235                           ; 1 bytes @ 0x2
  1236                           
  1237  0072                     ??_SetOutputConfig:	
  1238                           ; 1 bytes @ 0x2
  1239                           
  1240  0072                     ?_SetPullUp:	
  1241                           ; 1 bytes @ 0x2
  1242                           
  1243  0072                     ??_SetInputConfig:	
  1244                           ; 1 bytes @ 0x2
  1245                           
  1246  0072                     ??_putch:	
  1247                           ; 1 bytes @ 0x2
  1248                           
  1249  0072                     ??_RcvClear:	
  1250                           ; 1 bytes @ 0x2
  1251                           
  1252  0072                     ??_RcvIsDataIn:	
  1253                           ; 1 bytes @ 0x2
  1254                           
  1255  0072                     ??_RcvGetChar:	
  1256                           ; 1 bytes @ 0x2
  1257                           
  1258  0072                     ??_InitModbusPacket:	
  1259                           ; 1 bytes @ 0x2
  1260                           
  1261  0072                     ??_MultipleRegister:	
  1262                           ; 1 bytes @ 0x2
  1263                           
  1264  0072                     ??_GetInputPin:	
  1265                           ; 1 bytes @ 0x2
  1266                           
  1267  0072                     ?___bmul:	
  1268                           ; 1 bytes @ 0x2
  1269                           
  1270  0072                     ?_CRC16:	
  1271                           ; 1 bytes @ 0x2
  1272                           
  1273  0072                     ?_ReadA2D:	
  1274                           ; 2 bytes @ 0x2
  1275                           
  1276  0072                     CRC16@num:	
  1277                           ; 2 bytes @ 0x2
  1278                           
  1279  0072                     WriteIO@value:	
  1280                           ; 1 bytes @ 0x2
  1281                           
  1282  0072                     SetIOChange@value:	
  1283                           ; 1 bytes @ 0x2
  1284                           
  1285  0072                     SetPullUp@PullUp:	
  1286                           ; 1 bytes @ 0x2
  1287                           
  1288  0072                     eeprom_write@value:	
  1289                           ; 1 bytes @ 0x2
  1290                           
  1291  0072                     ___bmul@multiplicand:	
  1292                           ; 1 bytes @ 0x2
  1293                           
  1294  0072                     SetTimeCaptureConfig@detection:	
  1295                           ; 1 bytes @ 0x2
  1296                           
  1297                           
  1298                           ; 2 bytes @ 0x2
  1299  0072                     	ds	1
  1300  0073                     ??_eeprom_write:	
  1301  0073                     ??_WriteIO:	
  1302                           ; 1 bytes @ 0x3
  1303                           
  1304  0073                     ??_SetIOChange:	
  1305                           ; 1 bytes @ 0x3
  1306                           
  1307  0073                     ??_SetPullUp:	
  1308                           ; 1 bytes @ 0x3
  1309                           
  1310  0073                     ??___bmul:	
  1311                           ; 1 bytes @ 0x3
  1312                           
  1313  0073                     ScanNextIOPin@loop:	
  1314                           ; 1 bytes @ 0x3
  1315                           
  1316  0073                     ResetIOCycle@loop:	
  1317                           ; 1 bytes @ 0x3
  1318                           
  1319  0073                     ReadIOPin@_tempb:	
  1320                           ; 1 bytes @ 0x3
  1321                           
  1322  0073                     SetAnalogConfig@ioconfig:	
  1323                           ; 1 bytes @ 0x3
  1324                           
  1325  0073                     SetOutputConfig@ioconfig:	
  1326                           ; 1 bytes @ 0x3
  1327                           
  1328  0073                     SetInputConfig@_tmp:	
  1329                           ; 1 bytes @ 0x3
  1330                           
  1331  0073                     putch@char_out:	
  1332                           ; 1 bytes @ 0x3
  1333                           
  1334  0073                     RcvGetChar@temp:	
  1335                           ; 1 bytes @ 0x3
  1336                           
  1337  0073                     MultipleRegister@_Address:	
  1338                           ; 1 bytes @ 0x3
  1339                           
  1340  0073                     GetInputPin@_tmp:	
  1341                           ; 1 bytes @ 0x3
  1342                           
  1343  0073                     SetTimer1Clock@value:	
  1344                           ; 1 bytes @ 0x3
  1345                           
  1346                           
  1347                           ; 1 bytes @ 0x3
  1348  0073                     	ds	1
  1349  0074                     ??_SetTimeCaptureConfig:	
  1350  0074                     ??_InitTimeCapture:	
  1351                           ; 1 bytes @ 0x4
  1352                           
  1353  0074                     ??_CRC16:	
  1354                           ; 1 bytes @ 0x4
  1355                           
  1356  0074                     ??_ReadA2D:	
  1357                           ; 1 bytes @ 0x4
  1358                           
  1359  0074                     ReadIOPin@Pin:	
  1360                           ; 1 bytes @ 0x4
  1361                           
  1362  0074                     WriteIO@mask:	
  1363                           ; 1 bytes @ 0x4
  1364                           
  1365  0074                     SetIOChange@_temp:	
  1366                           ; 1 bytes @ 0x4
  1367                           
  1368  0074                     SetAnalogConfig@Pin:	
  1369                           ; 1 bytes @ 0x4
  1370                           
  1371  0074                     SetOutputConfig@_tmp:	
  1372                           ; 1 bytes @ 0x4
  1373                           
  1374  0074                     SetPullUp@Pin:	
  1375                           ; 1 bytes @ 0x4
  1376                           
  1377  0074                     SetInputConfig@_ntmp:	
  1378                           ; 1 bytes @ 0x4
  1379                           
  1380  0074                     putch@temp:	
  1381                           ; 1 bytes @ 0x4
  1382                           
  1383  0074                     GetInputPin@thePin:	
  1384                           ; 1 bytes @ 0x4
  1385                           
  1386  0074                     SetTimeCaptureConfig@Pin:	
  1387                           ; 1 bytes @ 0x4
  1388                           
  1389  0074                     ___bmul@product:	
  1390                           ; 1 bytes @ 0x4
  1391                           
  1392                           
  1393                           ; 1 bytes @ 0x4
  1394  0074                     	ds	1
  1395  0075                     ??_ReadVRef:	
  1396  0075                     ??_ReadTSensor:	
  1397                           ; 1 bytes @ 0x5
  1398                           
  1399  0075                     ?_ReadAllCoils:	
  1400                           ; 1 bytes @ 0x5
  1401                           
  1402  0075                     ReadIOPin@mask:	
  1403                           ; 2 bytes @ 0x5
  1404                           
  1405  0075                     WriteIO@nmask:	
  1406                           ; 1 bytes @ 0x5
  1407                           
  1408  0075                     SetIOChange@Pin:	
  1409                           ; 1 bytes @ 0x5
  1410                           
  1411  0075                     SetAnalogConfig@_tmp:	
  1412                           ; 1 bytes @ 0x5
  1413                           
  1414  0075                     SetOutputConfig@Pin:	
  1415                           ; 1 bytes @ 0x5
  1416                           
  1417  0075                     SetInputConfig@Pin:	
  1418                           ; 1 bytes @ 0x5
  1419                           
  1420  0075                     eeprom_read@addr:	
  1421                           ; 1 bytes @ 0x5
  1422                           
  1423  0075                     eeprom_write@addr:	
  1424                           ; 1 bytes @ 0x5
  1425                           
  1426  0075                     ___bmul@multiplier:	
  1427                           ; 1 bytes @ 0x5
  1428                           
  1429                           
  1430                           ; 1 bytes @ 0x5
  1431  0075                     	ds	1
  1432  0076                     ??_SaveSetting:	
  1433  0076                     ??_SetIOConfig:	
  1434                           ; 1 bytes @ 0x6
  1435                           
  1436  0076                     ??_SendModbusPacket:	
  1437                           ; 1 bytes @ 0x6
  1438                           
  1439  0076                     ??_DecodeSerial:	
  1440                           ; 1 bytes @ 0x6
  1441                           
  1442  0076                     DoIOCycle@SensorPt:	
  1443                           ; 1 bytes @ 0x6
  1444                           
  1445  0076                     WriteIO@Pin:	
  1446                           ; 1 bytes @ 0x6
  1447                           
  1448                           
  1449                           ; 1 bytes @ 0x6
  1450  0076                     	ds	1
  1451  0077                     ??_SendReadByteFrame:	
  1452  0077                     ??_SendReadFrame:	
  1453                           ; 1 bytes @ 0x7
  1454                           
  1455  0077                     ??_SendPresetFrame:	
  1456                           ; 1 bytes @ 0x7
  1457                           
  1458  0077                     ??_ReadInputStatus:	
  1459                           ; 1 bytes @ 0x7
  1460                           
  1461  0077                     ??_ExecuteCommand:	
  1462                           ; 1 bytes @ 0x7
  1463                           
  1464                           
  1465                           	psect	cstackCOMMONl
  1466  0079                     __pcstackCOMMONl:	
  1467                           ; 1 bytes @ 0x7
  1468                           
  1469  0079                     ?_SetTimer1Clock:	
  1470  0079                     ?_eeprom_read:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0079                     ?_InitTimeCapture:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0079                     SendReadByteFrame@value:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479                           
  1480                           ; 1 bytes @ 0x0
  1481  0079                     	ds	1
  1482                           
  1483                           	psect	cstackBANK0
  1484  004A                     __pcstackBANK0:	
  1485  004A                     ??_DoIOCycle:	
  1486  004A                     ??_ReadAllCoils:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  004A                     ?_SetSingleCoil:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  004A                     CRC16@addr:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  004A                     SaveSetting@pointer:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  004A                     SetIOConfig@ioconfig:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  004A                     ReadA2D@channel:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  004A                     SetSingleCoil@value:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507                           
  1508                           ; 1 bytes @ 0x0
  1509  004A                     	ds	1
  1510  004B                     ??_SetSingleCoil:	
  1511  004B                     CRC16@i:	
  1512                           ; 1 bytes @ 0x1
  1513                           
  1514  004B                     SaveSetting@idx:	
  1515                           ; 1 bytes @ 0x1
  1516                           
  1517  004B                     SetIOConfig@Pin:	
  1518                           ; 1 bytes @ 0x1
  1519                           
  1520  004B                     ReadA2D@value:	
  1521                           ; 1 bytes @ 0x1
  1522                           
  1523                           
  1524                           ; 2 bytes @ 0x1
  1525  004B                     	ds	1
  1526  004C                     SetSingleCoil@thePin:	
  1527  004C                     CRC16@crc:	
  1528                           ; 1 bytes @ 0x2
  1529                           
  1530  004C                     ReadAllCoils@stemp:	
  1531                           ; 2 bytes @ 0x2
  1532                           
  1533                           
  1534                           ; 2 bytes @ 0x2
  1535  004C                     	ds	1
  1536  004D                     ?_ReadIO:	
  1537  004D                     ?_ReadVRef:	
  1538                           ; 2 bytes @ 0x3
  1539                           
  1540  004D                     ?_ReadTSensor:	
  1541                           ; 2 bytes @ 0x3
  1542                           
  1543                           
  1544                           ; 2 bytes @ 0x3
  1545  004D                     	ds	1
  1546  004E                     SendModbusPacket@BufferSize:	
  1547  004E                     DecodeSerial@msg:	
  1548                           ; 1 bytes @ 0x4
  1549                           
  1550  004E                     ReadAllCoils@loop:	
  1551                           ; 1 bytes @ 0x4
  1552                           
  1553                           
  1554                           ; 1 bytes @ 0x4
  1555  004E                     	ds	1
  1556  004F                     ??_ReadIO:	
  1557  004F                     SendModbusPacket@CRC:	
  1558                           ; 1 bytes @ 0x5
  1559                           
  1560  004F                     DecodeSerial@CalcCRC:	
  1561                           ; 2 bytes @ 0x5
  1562                           
  1563                           
  1564                           ; 2 bytes @ 0x5
  1565  004F                     	ds	2
  1566  0051                     SendModbusPacket@loop:	
  1567  0051                     DecodeSerial@rcode:	
  1568                           ; 1 bytes @ 0x7
  1569                           
  1570  0051                     ReadIO@ioconfig:	
  1571                           ; 1 bytes @ 0x7
  1572                           
  1573                           
  1574                           ; 1 bytes @ 0x7
  1575  0051                     	ds	1
  1576  0052                     ??_SendFrameError:	
  1577  0052                     ?_SendReadFrame:	
  1578                           ; 1 bytes @ 0x8
  1579                           
  1580  0052                     ??_WriteAllCoils:	
  1581                           ; 1 bytes @ 0x8
  1582                           
  1583  0052                     ReadIO@Pin:	
  1584                           ; 1 bytes @ 0x8
  1585                           
  1586  0052                     SendReadFrame@value:	
  1587                           ; 1 bytes @ 0x8
  1588                           
  1589                           
  1590                           ; 2 bytes @ 0x8
  1591  0052                     	ds	1
  1592  0053                     SendFrameError@ErrorCode:	
  1593  0053                     WriteAllCoils@stemp:	
  1594                           ; 1 bytes @ 0x9
  1595                           
  1596                           
  1597                           ; 2 bytes @ 0x9
  1598  0053                     	ds	1
  1599  0054                     ?_SendReadRegistersFrame:	
  1600  0054                     ??_SendBytesFrame:	
  1601                           ; 1 bytes @ 0xA
  1602                           
  1603  0054                     ??_ForceSingleCoil:	
  1604                           ; 1 bytes @ 0xA
  1605                           
  1606  0054                     SendReadRegistersFrame@temp:	
  1607                           ; 1 bytes @ 0xA
  1608                           
  1609                           
  1610                           ; 4 bytes @ 0xA
  1611  0054                     	ds	1
  1612  0055                     WriteAllCoils@loop:	
  1613                           
  1614                           ; 1 bytes @ 0xB
  1615  0055                     	ds	1
  1616  0056                     ??_PresetSingleRegister:	
  1617  0056                     SendBytesFrame@loop:	
  1618                           ; 1 bytes @ 0xC
  1619                           
  1620                           
  1621                           ; 1 bytes @ 0xC
  1622  0056                     	ds	1
  1623  0057                     SendBytesFrame@_temp:	
  1624  0057                     PresetSingleRegister@oldConfig:	
  1625                           ; 1 bytes @ 0xD
  1626                           
  1627                           
  1628                           ; 1 bytes @ 0xD
  1629  0057                     	ds	1
  1630  0058                     ??_SendReadRegistersFrame:	
  1631  0058                     SendBytesFrame@_Address:	
  1632                           ; 1 bytes @ 0xE
  1633                           
  1634  0058                     PresetSingleRegister@temp:	
  1635                           ; 1 bytes @ 0xE
  1636                           
  1637                           
  1638                           ; 1 bytes @ 0xE
  1639  0058                     	ds	1
  1640  0059                     ??_ReadHoldingRegister:	
  1641  0059                     SendBytesFrame@NByte:	
  1642                           ; 1 bytes @ 0xF
  1643                           
  1644                           
  1645                           ; 1 bytes @ 0xF
  1646  0059                     	ds	1
  1647  005A                     ??_ReadCurrentRegister:	
  1648                           
  1649                           ; 1 bytes @ 0x10
  1650  005A                     	ds	3
  1651  005D                     ReadCurrentRegister@temp:	
  1652                           
  1653                           ; 2 bytes @ 0x13
  1654  005D                     	ds	1
  1655  005E                     ReadHoldingRegister@Flag:	
  1656                           
  1657                           ; 1 bytes @ 0x14
  1658  005E                     	ds	1
  1659  005F                     ReadCurrentRegister@IOn:	
  1660  005F                     ReadHoldingRegister@temp:	
  1661                           ; 1 bytes @ 0x15
  1662                           
  1663                           
  1664                           ; 4 bytes @ 0x15
  1665  005F                     	ds	4
  1666  0063                     ReadHoldingRegister@ctemp2:	
  1667                           
  1668                           ; 1 bytes @ 0x19
  1669  0063                     	ds	1
  1670  0064                     ReadHoldingRegister@ctemp3:	
  1671                           
  1672                           ; 1 bytes @ 0x1A
  1673  0064                     	ds	1
  1674  0065                     ReadHoldingRegister@ctemp1:	
  1675                           
  1676                           ; 1 bytes @ 0x1B
  1677  0065                     	ds	1
  1678  0066                     ??_main:	
  1679                           
  1680                           ; 1 bytes @ 0x1C
  1681  0066                     	ds	2
  1682  0068                     main@pointer:	
  1683                           
  1684                           ; 1 bytes @ 0x1E
  1685  0068                     	ds	1
  1686  0069                     main@rcode:	
  1687                           
  1688                           ; 1 bytes @ 0x1F
  1689  0069                     	ds	1
  1690  006A                     main@idx:	
  1691                           
  1692                           ; 1 bytes @ 0x20
  1693  006A                     	ds	1
  1694  006B                     main@loop:	
  1695                           
  1696                           ; 1 bytes @ 0x21
  1697  006B                     	ds	1
  1698                           
  1699                           	psect	maintext
  1700  02BC                     __pmaintext:	
  1701 ;;
  1702 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1703 ;;
  1704 ;; *************** function _main *****************
  1705 ;; Defined at:
  1706 ;;		line 1680 in file "main.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;		None
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;  loop            1   33[BANK0 ] unsigned char 
  1711 ;;  idx             1   32[BANK0 ] unsigned char 
  1712 ;;  rcode           1   31[BANK0 ] unsigned char 
  1713 ;;  pointer         1   30[BANK0 ] PTR unsigned char 
  1714 ;;		 -> Setting(12), 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  2  691[None  ] int 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : B1F/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  1724 ;;      Params:         0       0       0       0       0       0       0
  1725 ;;      Locals:         0       4       0       0       0       0       0
  1726 ;;      Temps:          0       2       0       0       0       0       0
  1727 ;;      Totals:         0       6       0       0       0       0       0
  1728 ;;Total ram usage:        6 bytes
  1729 ;; Hardware stack levels required when called:    7
  1730 ;; This function calls:
  1731 ;;		_DecodeSerial
  1732 ;;		_DoIOCycle
  1733 ;;		_ExecuteCommand
  1734 ;;		_InitTimeCapture
  1735 ;;		_RcvClear
  1736 ;;		_RcvGetChar
  1737 ;;		_RcvIsDataIn
  1738 ;;		_ResetIOCycle
  1739 ;;		_SetIOConfig
  1740 ;;		_eeprom_read
  1741 ;; This function is called by:
  1742 ;;		Startup code after reset
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746                           
  1747                           ;psect for function _main
  1748  02BC                     _main:	
  1749                           
  1750                           ;main.c: 1681: unsigned char loop;
  1751                           ;main.c: 1682: unsigned char rcode;
  1752                           ;main.c: 1694: OPTION_REG = 0b00000010;
  1753                           
  1754                           ;incstack = 0
  1755                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1756  02BC  3002               	movlw	2
  1757  02BD  0021               	movlb	1	; select bank1
  1758  02BE  0095               	movwf	21	;volatile
  1759                           
  1760                           ;main.c: 1697: ANSELA = 0;
  1761  02BF  0023               	movlb	3	; select bank3
  1762  02C0  018C               	clrf	12	;volatile
  1763                           
  1764                           ;main.c: 1698: ANSELB =0;
  1765  02C1  018D               	clrf	13	;volatile
  1766                           
  1767                           ;main.c: 1699: PORTA = 0b00100000;
  1768  02C2  3020               	movlw	32
  1769  02C3  0020               	movlb	0	; select bank0
  1770  02C4  008C               	movwf	12	;volatile
  1771                           
  1772                           ;main.c: 1700: WPUA = 0b00111111;
  1773  02C5  303F               	movlw	63
  1774  02C6  0024               	movlb	4	; select bank4
  1775  02C7  008C               	movwf	12	;volatile
  1776                           
  1777                           ;main.c: 1705: INTCON = 0b00000000;
  1778  02C8  018B               	clrf	11	;volatile
  1779                           
  1780                           ;main.c: 1709: WDTCON = 0b00011101;
  1781  02C9  301D               	movlw	29
  1782  02CA  0021               	movlb	1	; select bank1
  1783  02CB  0097               	movwf	23	;volatile
  1784                           
  1785                           ;main.c: 1710: ForceReset=0;
  1786  02CC  0020               	movlb	0	; select bank0
  1787  02CD  106C               	bcf	_ForceReset/(0+8),_ForceReset& (0+7)
  1788  02CE  0064               	clrwdt	;# 
  1789                           
  1790                           ;main.c: 1719: unsigned char idx;
  1791                           ;main.c: 1720: unsigned char * pointer = (unsigned char *) &Setting;
  1792  02CF  30D8               	movlw	(low (_Setting| 0))& (0+255)
  1793  02D0  0020               	movlb	0	; select bank0
  1794  02D1  00E6               	movwf	??_main
  1795  02D2  0866               	movf	??_main,w
  1796  02D3  00E8               	movwf	main@pointer
  1797                           
  1798                           ;main.c: 1722: for(idx=0; idx < sizeof(Setting);idx++)
  1799  02D4  01EA               	clrf	main@idx
  1800  02D5  300C               	movlw	12
  1801  02D6  026A               	subwf	main@idx,w
  1802  02D7  1803               	btfsc	3,0
  1803  02D8  2AF0               	goto	l4515
  1804  02D9                     l4507:	
  1805                           
  1806                           ;main.c: 1723: *(pointer++) = eeprom_read(idx);
  1807  02D9  086A               	movf	main@idx,w
  1808  02DA  318C  24BA  3182   	fcall	_eeprom_read
  1809  02DD  0020               	movlb	0	; select bank0
  1810  02DE  00E6               	movwf	??_main
  1811  02DF  0868               	movf	main@pointer,w
  1812  02E0  0086               	movwf	6
  1813  02E1  0187               	clrf	7
  1814  02E2  0866               	movf	??_main,w
  1815  02E3  0081               	movwf	1
  1816  02E4  3001               	movlw	1
  1817  02E5  00E6               	movwf	??_main
  1818  02E6  0866               	movf	??_main,w
  1819  02E7  07E8               	addwf	main@pointer,f
  1820  02E8  3001               	movlw	1
  1821  02E9  00E6               	movwf	??_main
  1822  02EA  0866               	movf	??_main,w
  1823  02EB  07EA               	addwf	main@idx,f
  1824  02EC  300C               	movlw	12
  1825  02ED  026A               	subwf	main@idx,w
  1826  02EE  1C03               	skipc
  1827  02EF  2AD9               	goto	l4507
  1828  02F0                     l4515:	
  1829                           
  1830                           ;main.c: 1727: Timer1Clock = Setting.Timer1Clock;
  1831  02F0  0021               	movlb	1	; select bank1
  1832  02F1  0863               	movf	(_Setting^(0+128)+11),w
  1833  02F2  0020               	movlb	0	; select bank0
  1834  02F3  00E6               	movwf	??_main
  1835  02F4  0866               	movf	??_main,w
  1836  02F5  00ED               	movwf	_Timer1Clock
  1837                           
  1838                           ;main.c: 1730: TRISA = 0b00111111;
  1839  02F6  303F               	movlw	63
  1840  02F7  0021               	movlb	1	; select bank1
  1841  02F8  008C               	movwf	12	;volatile
  1842                           
  1843                           ;main.c: 1731: TRISB = 0b11011110;
  1844  02F9  30DE               	movlw	222
  1845  02FA  008D               	movwf	13	;volatile
  1846                           
  1847                           ;main.c: 1732: RB0=0;
  1848  02FB  0020               	movlb	0	; select bank0
  1849  02FC  100D               	bcf	13,0	;volatile
  1850                           
  1851                           ;main.c: 1737: APFCON0 = 0b10000000;
  1852  02FD  3080               	movlw	128
  1853  02FE  0022               	movlb	2	; select bank2
  1854  02FF  009D               	movwf	29	;volatile
  1855                           
  1856                           ;main.c: 1738: APFCON1 = 0b00000001;
  1857  0300  3001               	movlw	1
  1858  0301  009E               	movwf	30	;volatile
  1859                           
  1860                           ;main.c: 1741: TXSTA = 0b10000010;
  1861  0302  3082               	movlw	130
  1862  0303  0023               	movlb	3	; select bank3
  1863  0304  009E               	movwf	30	;volatile
  1864                           
  1865                           ;main.c: 1742: RCSTA = 0;
  1866  0305  019D               	clrf	29	;volatile
  1867                           
  1868                           ;main.c: 1777: BRGH =1;
  1869  0306  151E               	bsf	30,2	;volatile
  1870                           
  1871                           ;main.c: 1778: BRG16 = 1;
  1872  0307  159F               	bsf	31,3	;volatile
  1873                           
  1874                           ;main.c: 1779: SYNC =0;
  1875  0308  121E               	bcf	30,4	;volatile
  1876                           
  1877                           ;main.c: 1782: SPBRGL = 138;
  1878  0309  308A               	movlw	138
  1879  030A  009B               	movwf	27	;volatile
  1880                           
  1881                           ;main.c: 1783: SPBRGH =0;
  1882  030B  019C               	clrf	28	;volatile
  1883                           
  1884                           ;main.c: 1788: TXEN =1;
  1885  030C  169E               	bsf	30,5	;volatile
  1886                           
  1887                           ;main.c: 1789: SPEN = 1;
  1888  030D  179D               	bsf	29,7	;volatile
  1889                           
  1890                           ;main.c: 1790: CREN = 1;
  1891  030E  161D               	bsf	29,4	;volatile
  1892                           
  1893                           ;main.c: 1791: TXIE =0;
  1894  030F  0021               	movlb	1	; select bank1
  1895  0310  1211               	bcf	17,4	;volatile
  1896                           
  1897                           ;main.c: 1792: RCIF =0;
  1898  0311  0020               	movlb	0	; select bank0
  1899  0312  1291               	bcf	17,5	;volatile
  1900                           
  1901                           ;main.c: 1793: TXIF = 0;
  1902  0313  1211               	bcf	17,4	;volatile
  1903                           
  1904                           ;main.c: 1794: SCKP = 0;
  1905  0314  0023               	movlb	3	; select bank3
  1906  0315  121F               	bcf	31,4	;volatile
  1907                           
  1908                           ;main.c: 1795: ABDEN = 0;
  1909  0316  101F               	bcf	31,0	;volatile
  1910                           
  1911                           ;main.c: 1797: InFiFo=0;
  1912  0317  0020               	movlb	0	; select bank0
  1913  0318  01BC               	clrf	_InFiFo	;volatile
  1914                           
  1915                           ;main.c: 1798: OutFiFo=0;
  1916  0319  01F8               	clrf	_OutFiFo	;volatile
  1917                           
  1918                           ;main.c: 1799: RcvInFiFo=0;
  1919  031A  01BB               	clrf	_RcvInFiFo	;volatile
  1920                           
  1921                           ;main.c: 1800: RcvOutFiFo=0;
  1922  031B  01BA               	clrf	_RcvOutFiFo	;volatile
  1923                           
  1924                           ;main.c: 1803: GIE = 1;
  1925  031C  178B               	bsf	11,7	;volatile
  1926                           
  1927                           ;main.c: 1804: PEIE =1;
  1928  031D  170B               	bsf	11,6	;volatile
  1929                           
  1930                           ;main.c: 1805: RCIE =1;
  1931  031E  0021               	movlb	1	; select bank1
  1932  031F  1691               	bsf	17,5	;volatile
  1933                           
  1934                           ;main.c: 1806: IOCBP =0;
  1935  0320  0027               	movlb	7	; select bank7
  1936  0321  0194               	clrf	20	;volatile
  1937                           
  1938                           ;main.c: 1807: IOCBN = 0;
  1939  0322  0195               	clrf	21	;volatile
  1940                           
  1941                           ;main.c: 1808: IOCBF = 0;
  1942  0323  0196               	clrf	22	;volatile
  1943                           
  1944                           ;main.c: 1809: IOCIE = 1;
  1945  0324  158B               	bsf	11,3	;volatile
  1946                           
  1947                           ;main.c: 1812: IOCounterFlag.Byte=DHTFlag=0;
  1948  0325  0020               	movlb	0	; select bank0
  1949  0326  01F0               	clrf	112	;volatile
  1950  0327  01F1               	clrf	113	;volatile
  1951                           
  1952                           ;main.c: 1814: ModbusOnTransmit=0;
  1953  0328  116C               	bcf	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  1954                           
  1955                           ;main.c: 1823: T2CON= 0b00000111;
  1956  0329  3007               	movlw	7
  1957  032A  009C               	movwf	28	;volatile
  1958                           
  1959                           ;main.c: 1824: PR2=125;
  1960  032B  307D               	movlw	125
  1961  032C  009B               	movwf	27	;volatile
  1962                           
  1963                           ;main.c: 1825: TMR2=0;
  1964  032D  019A               	clrf	26	;volatile
  1965                           
  1966                           ;main.c: 1827: TMR2IF=0;
  1967  032E  1091               	bcf	17,1	;volatile
  1968                           
  1969                           ;main.c: 1828: PrimaryTimerms=100;
  1970  032F  3064               	movlw	100
  1971  0330  00A6               	movwf	_PrimaryTimerms	;volatile
  1972  0331  3000               	movlw	0
  1973  0332  00A7               	movwf	_PrimaryTimerms+1	;volatile
  1974                           
  1975                           ;main.c: 1829: TimerDeciSec=10;
  1976  0333  300A               	movlw	10
  1977  0334  00E6               	movwf	??_main
  1978  0335  0866               	movf	??_main,w
  1979  0336  00BD               	movwf	_TimerDeciSec	;volatile
  1980                           
  1981                           ;main.c: 1830: TMR2IE=1;
  1982  0337  0021               	movlb	1	; select bank1
  1983  0338  1491               	bsf	17,1	;volatile
  1984                           
  1985                           ;main.c: 1831: PEIE = 1;
  1986  0339  170B               	bsf	11,6	;volatile
  1987                           
  1988                           ;main.c: 1832: GIE=1;
  1989  033A  178B               	bsf	11,7	;volatile
  1990                           
  1991                           ;main.c: 1837: ADCON1 = 0b11100011;
  1992  033B  30E3               	movlw	227
  1993  033C  009E               	movwf	30	;volatile
  1994                           
  1995                           ;main.c: 1838: ADCON0= 0b00000001;
  1996  033D  3001               	movlw	1
  1997  033E  009D               	movwf	29	;volatile
  1998                           
  1999                           ;main.c: 1839: ANSELA = 0b0000000;
  2000  033F  0023               	movlb	3	; select bank3
  2001  0340  018C               	clrf	12	;volatile
  2002                           
  2003                           ;main.c: 1840: ANSELB = 0b0000000;
  2004  0341  018D               	clrf	13	;volatile
  2005                           
  2006                           ;main.c: 1841: ADIE=0;
  2007  0342  0021               	movlb	1	; select bank1
  2008  0343  1311               	bcf	17,6	;volatile
  2009                           
  2010                           ;main.c: 1842: ADIF=0;
  2011  0344  0020               	movlb	0	; select bank0
  2012  0345  1311               	bcf	17,6	;volatile
  2013                           
  2014                           ;main.c: 1843: FVRCON=0b11000010;
  2015  0346  30C2               	movlw	194
  2016  0347  0022               	movlb	2	; select bank2
  2017  0348  0097               	movwf	23	;volatile
  2018                           
  2019                           ;main.c: 1847: for(loop=0;loop<10;loop++)
  2020  0349  0020               	movlb	0	; select bank0
  2021  034A  01EB               	clrf	main@loop
  2022  034B  300A               	movlw	10
  2023  034C  026B               	subwf	main@loop,w
  2024  034D  1803               	btfsc	3,0
  2025  034E  2B5D               	goto	l695
  2026  034F                     l694:	
  2027                           
  2028                           ;main.c: 1848: {
  2029                           ;main.c: 1849: EnableConfigChange=1;
  2030  034F  14EC               	bsf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  2031                           
  2032                           ;main.c: 1850: SetIOConfig(loop);
  2033  0350  086B               	movf	main@loop,w
  2034  0351  3183  23EE  3182   	fcall	_SetIOConfig
  2035  0354  3001               	movlw	1
  2036  0355  0020               	movlb	0	; select bank0
  2037  0356  00E6               	movwf	??_main
  2038  0357  0866               	movf	??_main,w
  2039  0358  07EB               	addwf	main@loop,f
  2040  0359  300A               	movlw	10
  2041  035A  026B               	subwf	main@loop,w
  2042  035B  1C03               	skipc
  2043  035C  2B4F               	goto	l694
  2044  035D                     l695:	
  2045                           
  2046                           ;main.c: 1851: }
  2047                           ;main.c: 1852: EnableConfigChange=0;
  2048  035D  10EC               	bcf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  2049                           
  2050                           ;main.c: 1855: T4CON = 0b00000111;
  2051  035E  3007               	movlw	7
  2052  035F  0028               	movlb	8	; select bank8
  2053  0360  0097               	movwf	23	;volatile
  2054                           
  2055                           ;main.c: 1856: CCPTMRS= 0b01010101;
  2056  0361  3055               	movlw	85
  2057  0362  0025               	movlb	5	; select bank5
  2058  0363  009E               	movwf	30	;volatile
  2059                           
  2060                           ;main.c: 1857: PR4=0xff;
  2061  0364  30FF               	movlw	255
  2062  0365  0028               	movlb	8	; select bank8
  2063  0366  0096               	movwf	22	;volatile
  2064                           
  2065                           ;main.c: 1858: TMR4=0;
  2066  0367  0195               	clrf	21	;volatile
  2067                           
  2068                           ;main.c: 1859: TMR4IE=0;
  2069  0368  0021               	movlb	1	; select bank1
  2070  0369  1093               	bcf	19,1	;volatile
  2071                           
  2072                           ;main.c: 1860: TMR4IF=0;
  2073  036A  0020               	movlb	0	; select bank0
  2074  036B  1093               	bcf	19,1	;volatile
  2075                           
  2076                           ;main.c: 1863: RcvClear();
  2077  036C  318B  23D9  3182   	fcall	_RcvClear
  2078                           
  2079                           ;main.c: 1864: ModbusFramePointer=0;
  2080  036F  0020               	movlb	0	; select bank0
  2081  0370  01B5               	clrf	_ModbusFramePointer
  2082                           
  2083                           ;main.c: 1866: _delay((unsigned long)((5000)*(32000000/4000.0)));
  2084  0371  30CB               	movlw	203
  2085  0372  0020               	movlb	0	; select bank0
  2086  0373  00E7               	movwf	??_main+1
  2087  0374  30EC               	movlw	236
  2088  0375  00E6               	movwf	??_main
  2089  0376  3084               	movlw	132
  2090  0377                     u4807:	
  2091  0377  0B89               	decfsz	9,f
  2092  0378  2B77               	goto	u4807
  2093  0379  0BE6               	decfsz	??_main,f
  2094  037A  2B77               	goto	u4807
  2095  037B  0BE7               	decfsz	??_main+1,f
  2096  037C  2B77               	goto	u4807
  2097  037D  0000               	nop
  2098                           
  2099                           ;main.c: 1869: ResetIOCycle();
  2100  037E  318C  2453  3182   	fcall	_ResetIOCycle
  2101                           
  2102                           ;main.c: 1871: InitTimeCapture();
  2103  0381  318F  2727  3182   	fcall	_InitTimeCapture
  2104  0384                     l4609:	
  2105                           ;main.c: 1874: while(1)
  2106                           
  2107                           
  2108                           ;main.c: 1875: {
  2109                           ;main.c: 1877: if(!ForceReset)
  2110  0384  0020               	movlb	0	; select bank0
  2111  0385  1C6C               	btfss	_ForceReset/(0+8),_ForceReset& (0+7)
  2112  0386  0064               	clrwdt	;# 
  2113                           
  2114                           ;main.c: 1882: }
  2115                           ;main.c: 1885: if(!ModbusOnTransmit)
  2116  0387  0020               	movlb	0	; select bank0
  2117  0388  1D6C               	btfss	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  2118                           
  2119                           ;main.c: 1886: RB0=0;
  2120  0389  100D               	bcf	13,0	;volatile
  2121                           
  2122                           ;main.c: 1887: if(ModbusOnTransmit)
  2123  038A  1D6C               	btfss	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  2124  038B  2B9A               	goto	l4623
  2125                           
  2126                           ;main.c: 1888: {
  2127                           ;main.c: 1889: if(!TXIE)
  2128  038C  0021               	movlb	1	; select bank1
  2129  038D  1A11               	btfsc	17,4	;volatile
  2130  038E  2BEA               	goto	l4657
  2131                           
  2132                           ;main.c: 1890: {
  2133                           ;main.c: 1894: _delay((unsigned long)((200)*(32000000/4000000.0)));
  2134  038F  30E4               	movlw	228
  2135  0390                     u4817:	
  2136  0390  3200               	nop2
  2137  0391  3200               	nop2
  2138  0392  0B89               	decfsz	9,f
  2139  0393  2B90               	goto	u4817
  2140  0394  3200               	nop2
  2141  0395  3200               	nop2
  2142                           
  2143                           ;main.c: 1896: RB0=0;
  2144  0396  0020               	movlb	0	; select bank0
  2145  0397  100D               	bcf	13,0	;volatile
  2146                           
  2147                           ;main.c: 1897: ModbusOnTransmit=0;
  2148  0398  116C               	bcf	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  2149                           
  2150                           ;main.c: 1898: }
  2151                           ;main.c: 1899: }
  2152  0399  2BEA               	goto	l4657
  2153  039A                     l4623:	
  2154                           
  2155                           ;main.c: 1900: else
  2156                           ;main.c: 1901: if(RcvIsDataIn())
  2157  039A  318B  23ED  3182   	fcall	_RcvIsDataIn
  2158  039D  3A00               	xorlw	0
  2159  039E  1903               	skipnz
  2160  039F  2BEA               	goto	l4657
  2161                           
  2162                           ;main.c: 1902: {
  2163                           ;main.c: 1904: ModbusBuffer[ModbusFramePointer++]=RcvGetChar();
  2164  03A0  318C  24D2  3182   	fcall	_RcvGetChar
  2165  03A3  0020               	movlb	0	; select bank0
  2166  03A4  00E6               	movwf	??_main
  2167  03A5  0835               	movf	_ModbusFramePointer,w
  2168  03A6  3EE4               	addlw	(low (_ModbusBuffer| 0))& (0+255)
  2169  03A7  0086               	movwf	6
  2170  03A8  0187               	clrf	7
  2171  03A9  0866               	movf	??_main,w
  2172  03AA  0081               	movwf	1
  2173  03AB  3001               	movlw	1
  2174  03AC  00E6               	movwf	??_main
  2175  03AD  0866               	movf	??_main,w
  2176  03AE  07B5               	addwf	_ModbusFramePointer,f
  2177                           
  2178                           ;main.c: 1905: if(ModbusFramePointer>=8)
  2179  03AF  3008               	movlw	8
  2180  03B0  0235               	subwf	_ModbusFramePointer,w
  2181  03B1  1C03               	skipc
  2182  03B2  2BEA               	goto	l4657
  2183                           
  2184                           ;main.c: 1906: {
  2185                           ;main.c: 1907: ModbusFramePointer=8;
  2186  03B3  3008               	movlw	8
  2187  03B4  00E6               	movwf	??_main
  2188  03B5  0866               	movf	??_main,w
  2189  03B6  00B5               	movwf	_ModbusFramePointer
  2190                           
  2191                           ;main.c: 1908: rcode = DecodeSerial(ModbusBuffer);
  2192  03B7  30E4               	movlw	(low (_ModbusBuffer| 0))& (0+255)
  2193  03B8  3187  27B4  3182   	fcall	_DecodeSerial
  2194  03BB  0020               	movlb	0	; select bank0
  2195  03BC  00E6               	movwf	??_main
  2196  03BD  0866               	movf	??_main,w
  2197  03BE  00E9               	movwf	main@rcode
  2198                           
  2199                           ;main.c: 1909: if(rcode==1)
  2200  03BF  0369               	decf	main@rcode,w
  2201  03C0  1D03               	btfss	3,2
  2202  03C1  2BC7               	goto	l4641
  2203                           
  2204                           ;main.c: 1910: {
  2205                           ;main.c: 1911: ExecuteCommand();
  2206  03C2  3186  26B8  3182   	fcall	_ExecuteCommand
  2207                           
  2208                           ;main.c: 1912: ModbusFramePointer=0;
  2209  03C5  0020               	movlb	0	; select bank0
  2210  03C6  2BCB               	goto	l4643
  2211  03C7                     l4641:	
  2212                           ;main.c: 1913: }
  2213                           
  2214                           
  2215                           ;main.c: 1914: else if(rcode ==2)
  2216  03C7  3002               	movlw	2
  2217  03C8  0669               	xorwf	main@rcode,w
  2218  03C9  1D03               	btfss	3,2
  2219  03CA  2BCD               	goto	l706
  2220  03CB                     l4643:	
  2221                           
  2222                           ;main.c: 1915: {
  2223                           ;main.c: 1917: ModbusFramePointer=0;
  2224  03CB  01B5               	clrf	_ModbusFramePointer
  2225                           
  2226                           ;main.c: 1918: }
  2227  03CC  2BEA               	goto	l4657
  2228  03CD                     l706:	
  2229                           
  2230                           ;main.c: 1919: else
  2231                           ;main.c: 1920: {
  2232                           ;main.c: 1922: for(loop=1;loop<8;loop++)
  2233  03CD  01EB               	clrf	main@loop
  2234  03CE  0AEB               	incf	main@loop,f
  2235  03CF  3008               	movlw	8
  2236  03D0  026B               	subwf	main@loop,w
  2237  03D1  1803               	btfsc	3,0
  2238  03D2  2BE8               	goto	l4655
  2239  03D3                     l4649:	
  2240                           
  2241                           ;main.c: 1923: ModbusBuffer[loop-1U]=ModbusBuffer[loop];
  2242  03D3  086B               	movf	main@loop,w
  2243  03D4  3EE4               	addlw	(low (_ModbusBuffer| 0))& (0+255)
  2244  03D5  0086               	movwf	6
  2245  03D6  0187               	clrf	7
  2246  03D7  0801               	movf	1,w
  2247  03D8  00E6               	movwf	??_main
  2248  03D9  086B               	movf	main@loop,w
  2249  03DA  3EFF               	addlw	255
  2250  03DB  3EE4               	addlw	(low (_ModbusBuffer| 0))& (0+255)
  2251  03DC  0086               	movwf	6
  2252  03DD  0187               	clrf	7
  2253  03DE  0866               	movf	??_main,w
  2254  03DF  0081               	movwf	1
  2255  03E0  3001               	movlw	1
  2256  03E1  00E6               	movwf	??_main
  2257  03E2  0866               	movf	??_main,w
  2258  03E3  07EB               	addwf	main@loop,f
  2259  03E4  3008               	movlw	8
  2260  03E5  026B               	subwf	main@loop,w
  2261  03E6  1C03               	skipc
  2262  03E7  2BD3               	goto	l4649
  2263  03E8                     l4655:	
  2264                           
  2265                           ;main.c: 1924: ModbusFramePointer--;
  2266  03E8  3001               	movlw	1
  2267  03E9  02B5               	subwf	_ModbusFramePointer,f
  2268  03EA                     l4657:	
  2269                           
  2270                           ;main.c: 1925: }
  2271                           ;main.c: 1926: }
  2272                           ;main.c: 1927: }
  2273                           ;main.c: 1929: DoIOCycle();
  2274  03EA  318F  2790  3182   	fcall	_DoIOCycle
  2275  03ED  2B84               	goto	l4609
  2276  03EE                     __end_of_main:	
  2277                           
  2278                           	psect	text1
  2279  0CBA                     __ptext1:	
  2280 ;; *************** function _eeprom_read *****************
  2281 ;; Defined at:
  2282 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eeread.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  addr            1    wreg     unsigned char 
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;  addr            1    5[COMMON] unsigned char 
  2287 ;; Return value:  Size  Location     Type
  2288 ;;                  1    wreg      unsigned char 
  2289 ;; Registers used:
  2290 ;;		wreg, status,2, status,0
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: 0/0
  2295 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2296 ;;      Params:         0       0       0       0       0       0       0
  2297 ;;      Locals:         1       0       0       0       0       0       0
  2298 ;;      Temps:          3       0       0       0       0       0       0
  2299 ;;      Totals:         4       0       0       0       0       0       0
  2300 ;;Total ram usage:        4 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310                           
  2311                           ;psect for function _eeprom_read
  2312  0CBA                     _eeprom_read:	
  2313                           
  2314                           ;incstack = 0
  2315                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  2316                           ;eeprom_read@addr stored from wreg
  2317  0CBA  00F5               	movwf	eeprom_read@addr
  2318  0CBB                     l815:	
  2319  0CBB  0064               	clrwdt	;# 
  2320  0CBC  0023               	movlb	3	; select bank3
  2321  0CBD  1895               	btfsc	21,1	;volsfr
  2322  0CBE  2CBB               	goto	l815
  2323  0CBF  0875               	movf	eeprom_read@addr,w
  2324  0CC0  00F2               	movwf	??_eeprom_read
  2325  0CC1  01F3               	clrf	??_eeprom_read+1
  2326  0CC2  0872               	movf	??_eeprom_read,w
  2327  0CC3  0091               	movwf	17	;volatile
  2328  0CC4  0873               	movf	??_eeprom_read+1,w
  2329  0CC5  0092               	movwf	18	;volatile
  2330  0CC6  303F               	movlw	63
  2331  0CC7  00F4               	movwf	??_eeprom_read+2
  2332  0CC8  0874               	movf	??_eeprom_read+2,w
  2333  0CC9  0595               	andwf	21,f	;volsfr
  2334  0CCA  1415               	bsf	21,0	;volsfr
  2335  0CCB  1003               	clrc
  2336  0CCC  1815               	btfsc	21,0	;volsfr
  2337  0CCD  1403               	setc
  2338  0CCE  3000               	movlw	0
  2339  0CCF  3D09               	addwfc	9,w
  2340  0CD0  0813               	movf	19,w	;volatile
  2341  0CD1  0008               	return
  2342  0CD2                     __end_of_eeprom_read:	
  2343                           
  2344                           	psect	text2
  2345  0CD2                     __ptext2:	
  2346 ;; *************** function _RcvGetChar *****************
  2347 ;; Defined at:
  2348 ;;		line 877 in file "main.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;  temp            1    3[COMMON] unsigned char 
  2353 ;; Return value:  Size  Location     Type
  2354 ;;                  1    wreg      unsigned char 
  2355 ;; Registers used:
  2356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 0/0
  2360 ;;		Unchanged: 0/0
  2361 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2362 ;;      Params:         0       0       0       0       0       0       0
  2363 ;;      Locals:         1       0       0       0       0       0       0
  2364 ;;      Temps:          1       0       0       0       0       0       0
  2365 ;;      Totals:         2       0       0       0       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    2
  2369 ;; This function calls:
  2370 ;;		_RcvIsDataIn
  2371 ;; This function is called by:
  2372 ;;		_main
  2373 ;; This function uses a non-reentrant model
  2374 ;;
  2375                           
  2376                           
  2377                           ;psect for function _RcvGetChar
  2378  0CD2                     _RcvGetChar:	
  2379  0CD2                     l3361:	
  2380                           ;main.c: 879: char temp;
  2381                           ;main.c: 882: while(!RcvIsDataIn());
  2382                           
  2383                           ;incstack = 0
  2384                           ; Regs used in _RcvGetChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2385                           
  2386  0CD2  318B  23ED  318C   	fcall	_RcvIsDataIn
  2387  0CD5  3A00               	xorlw	0
  2388  0CD6  1903               	skipnz
  2389  0CD7  2CD2               	goto	l3361
  2390                           
  2391                           ;main.c: 885: temp = RcvSerialBuffer[RcvOutFiFo];
  2392  0CD8  0020               	movlb	0	; select bank0
  2393  0CD9  083A               	movf	_RcvOutFiFo,w
  2394  0CDA  3E20               	addlw	(low (_RcvSerialBuffer| (0+256)))& (0+255)
  2395  0CDB  0086               	movwf	6
  2396  0CDC  3001               	movlw	1	; select bank2/3
  2397  0CDD  0087               	movwf	7
  2398  0CDE  0801               	movf	1,w
  2399  0CDF  00F2               	movwf	??_RcvGetChar
  2400  0CE0  0872               	movf	??_RcvGetChar,w
  2401  0CE1  00F3               	movwf	RcvGetChar@temp
  2402                           
  2403                           ;main.c: 886: RcvOutFiFo++;
  2404  0CE2  3001               	movlw	1
  2405  0CE3  00F2               	movwf	??_RcvGetChar
  2406  0CE4  0872               	movf	??_RcvGetChar,w
  2407  0CE5  07BA               	addwf	_RcvOutFiFo,f	;volatile
  2408                           
  2409                           ;main.c: 887: if(RcvOutFiFo >= 32)
  2410  0CE6  3020               	movlw	32
  2411  0CE7  023A               	subwf	_RcvOutFiFo,w	;volatile
  2412  0CE8  1803               	btfsc	3,0
  2413                           
  2414                           ;main.c: 888: RcvOutFiFo=0;
  2415  0CE9  01BA               	clrf	_RcvOutFiFo	;volatile
  2416                           
  2417                           ;main.c: 890: return temp;
  2418  0CEA  0873               	movf	RcvGetChar@temp,w
  2419  0CEB  0008               	return
  2420  0CEC                     __end_of_RcvGetChar:	
  2421                           
  2422                           	psect	text3
  2423  0BED                     __ptext3:	
  2424 ;; *************** function _RcvIsDataIn *****************
  2425 ;; Defined at:
  2426 ;;		line 872 in file "main.c"
  2427 ;; Parameters:    Size  Location     Type
  2428 ;;		None
  2429 ;; Auto vars:     Size  Location     Type
  2430 ;;		None
  2431 ;; Return value:  Size  Location     Type
  2432 ;;                  1    wreg      unsigned char 
  2433 ;; Registers used:
  2434 ;;		wreg
  2435 ;; Tracked objects:
  2436 ;;		On entry : 0/0
  2437 ;;		On exit  : 0/0
  2438 ;;		Unchanged: 0/0
  2439 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2440 ;;      Params:         0       0       0       0       0       0       0
  2441 ;;      Locals:         0       0       0       0       0       0       0
  2442 ;;      Temps:          0       0       0       0       0       0       0
  2443 ;;      Totals:         0       0       0       0       0       0       0
  2444 ;;Total ram usage:        0 bytes
  2445 ;; Hardware stack levels used:    1
  2446 ;; Hardware stack levels required when called:    1
  2447 ;; This function calls:
  2448 ;;		Nothing
  2449 ;; This function is called by:
  2450 ;;		_RcvGetChar
  2451 ;;		_main
  2452 ;; This function uses a non-reentrant model
  2453 ;;
  2454                           
  2455                           
  2456                           ;psect for function _RcvIsDataIn
  2457  0BED                     _RcvIsDataIn:	
  2458                           
  2459                           ;main.c: 874: return (RcvInFiFo == RcvOutFiFo ? 0U : 1U);
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _RcvIsDataIn: [wreg]
  2463  0BED  0020               	movlb	0	; select bank0
  2464  0BEE  083B               	movf	_RcvInFiFo,w	;volatile
  2465  0BEF  063A               	xorwf	_RcvOutFiFo,w	;volatile
  2466  0BF0  1903               	btfsc	3,2
  2467  0BF1  2BF4               	goto	u2550
  2468  0BF2  3001               	movlw	1
  2469  0BF3  0008               	return
  2470  0BF4                     u2550:	
  2471  0BF4  3000               	movlw	0
  2472  0BF5  0008               	return
  2473  0BF6                     __end_of_RcvIsDataIn:	
  2474                           
  2475                           	psect	text4
  2476  0BD9                     __ptext4:	
  2477 ;; *************** function _RcvClear *****************
  2478 ;; Defined at:
  2479 ;;		line 865 in file "main.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		status,2
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2493 ;;      Params:         0       0       0       0       0       0       0
  2494 ;;      Locals:         0       0       0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0       0       0
  2496 ;;      Totals:         0       0       0       0       0       0       0
  2497 ;;Total ram usage:        0 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_main
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           
  2508                           ;psect for function _RcvClear
  2509  0BD9                     _RcvClear:	
  2510                           
  2511                           ;main.c: 867: GIE=0;
  2512                           
  2513                           ;incstack = 0
  2514                           ; Regs used in _RcvClear: [status,2]
  2515  0BD9  138B               	bcf	11,7	;volatile
  2516                           
  2517                           ;main.c: 868: RcvInFiFo=0;
  2518  0BDA  0020               	movlb	0	; select bank0
  2519  0BDB  01BB               	clrf	_RcvInFiFo	;volatile
  2520                           
  2521                           ;main.c: 869: RcvOutFiFo=0;
  2522  0BDC  01BA               	clrf	_RcvOutFiFo	;volatile
  2523                           
  2524                           ;main.c: 870: GIE=1;
  2525  0BDD  178B               	bsf	11,7	;volatile
  2526  0BDE  0008               	return
  2527  0BDF                     __end_of_RcvClear:	
  2528                           
  2529                           	psect	text5
  2530  0F27                     __ptext5:	
  2531 ;; *************** function _InitTimeCapture *****************
  2532 ;; Defined at:
  2533 ;;		line 53 in file "TimeCapture.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;		None
  2536 ;; Auto vars:     Size  Location     Type
  2537 ;;		None
  2538 ;; Return value:  Size  Location     Type
  2539 ;;                  1    wreg      void 
  2540 ;; Registers used:
  2541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2542 ;; Tracked objects:
  2543 ;;		On entry : 0/0
  2544 ;;		On exit  : 0/0
  2545 ;;		Unchanged: 0/0
  2546 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2547 ;;      Params:         0       0       0       0       0       0       0
  2548 ;;      Locals:         0       0       0       0       0       0       0
  2549 ;;      Temps:          0       0       0       0       0       0       0
  2550 ;;      Totals:         0       0       0       0       0       0       0
  2551 ;;Total ram usage:        0 bytes
  2552 ;; Hardware stack levels used:    1
  2553 ;; Hardware stack levels required when called:    2
  2554 ;; This function calls:
  2555 ;;		_SetTimer1Clock
  2556 ;; This function is called by:
  2557 ;;		_main
  2558 ;; This function uses a non-reentrant model
  2559 ;;
  2560                           
  2561                           
  2562                           ;psect for function _InitTimeCapture
  2563  0F27                     _InitTimeCapture:	
  2564                           
  2565                           ;TimeCapture.c: 58: TimeCapture[0]=0;
  2566                           
  2567                           ;incstack = 0
  2568                           ; Regs used in _InitTimeCapture: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2569  0F27  3000               	movlw	0
  2570  0F28  0021               	movlb	1	; select bank1
  2571  0F29  00A3               	movwf	(_TimeCapture+3)^(0+128)	;volatile
  2572  0F2A  3000               	movlw	0
  2573  0F2B  00A2               	movwf	(_TimeCapture+2)^(0+128)	;volatile
  2574  0F2C  3000               	movlw	0
  2575  0F2D  00A1               	movwf	(_TimeCapture+1)^(0+128)	;volatile
  2576  0F2E  3000               	movlw	0
  2577  0F2F  00A0               	movwf	_TimeCapture^(0+128)	;volatile
  2578                           
  2579                           ;TimeCapture.c: 59: TimeCapture[1]=0;
  2580  0F30  3000               	movlw	0
  2581  0F31  00A7               	movwf	((_TimeCapture+3)^(0+128)+4)	;volatile
  2582  0F32  3000               	movlw	0
  2583  0F33  00A6               	movwf	((_TimeCapture+2)^(0+128)+4)	;volatile
  2584  0F34  3000               	movlw	0
  2585  0F35  00A5               	movwf	((_TimeCapture+1)^(0+128)+4)	;volatile
  2586  0F36  3000               	movlw	0
  2587  0F37  00A4               	movwf	(_TimeCapture^(0+128)+4)	;volatile
  2588                           
  2589                           ;TimeCapture.c: 60: TimeCapture[2]=0;
  2590  0F38  3000               	movlw	0
  2591  0F39  00AB               	movwf	((_TimeCapture+3)^(0+128)+8)	;volatile
  2592  0F3A  3000               	movlw	0
  2593  0F3B  00AA               	movwf	((_TimeCapture+2)^(0+128)+8)	;volatile
  2594  0F3C  3000               	movlw	0
  2595  0F3D  00A9               	movwf	((_TimeCapture+1)^(0+128)+8)	;volatile
  2596  0F3E  3000               	movlw	0
  2597  0F3F  00A8               	movwf	(_TimeCapture^(0+128)+8)	;volatile
  2598                           
  2599                           ;TimeCapture.c: 61: TimeCapture[3]=0;
  2600  0F40  3000               	movlw	0
  2601  0F41  00AF               	movwf	((_TimeCapture+3)^(0+128)+12)	;volatile
  2602  0F42  3000               	movlw	0
  2603  0F43  00AE               	movwf	((_TimeCapture+2)^(0+128)+12)	;volatile
  2604  0F44  3000               	movlw	0
  2605  0F45  00AD               	movwf	((_TimeCapture+1)^(0+128)+12)	;volatile
  2606  0F46  3000               	movlw	0
  2607  0F47  00AC               	movwf	(_TimeCapture^(0+128)+12)	;volatile
  2608                           
  2609                           ;TimeCapture.c: 63: TimerHiCount = 0;
  2610  0F48  0020               	movlb	0	; select bank0
  2611  0F49  01B0               	clrf	_TimerHiCount	;volatile
  2612  0F4A  01B1               	clrf	_TimerHiCount+1	;volatile
  2613                           
  2614                           ;TimeCapture.c: 64: TMR1H = 0;
  2615  0F4B  0197               	clrf	23	;volatile
  2616                           
  2617                           ;TimeCapture.c: 65: TMR1L = 0;
  2618  0F4C  0196               	clrf	22	;volatile
  2619                           
  2620                           ;TimeCapture.c: 66: T1CON = 0b00000000;
  2621  0F4D  0198               	clrf	24	;volatile
  2622                           
  2623                           ;TimeCapture.c: 68: SetTimer1Clock(Timer1Clock);
  2624  0F4E  086D               	movf	_Timer1Clock,w
  2625  0F4F  318E  261F         	fcall	_SetTimer1Clock
  2626                           
  2627                           ;TimeCapture.c: 69: TMR1GE=0;
  2628  0F51  0020               	movlb	0	; select bank0
  2629  0F52  1399               	bcf	25,7	;volatile
  2630                           
  2631                           ;TimeCapture.c: 70: TMR1IF=0;
  2632  0F53  1011               	bcf	17,0	;volatile
  2633                           
  2634                           ;TimeCapture.c: 71: TMR1IE=1;
  2635  0F54  0021               	movlb	1	; select bank1
  2636  0F55  1411               	bsf	17,0	;volatile
  2637                           
  2638                           ;TimeCapture.c: 72: TMR1ON=1;
  2639  0F56  0020               	movlb	0	; select bank0
  2640  0F57  1418               	bsf	24,0	;volatile
  2641  0F58  0008               	return
  2642  0F59                     __end_of_InitTimeCapture:	
  2643                           ;TimeCapture.c: 74: return;
  2644                           
  2645                           
  2646                           	psect	text6
  2647  06B8                     __ptext6:	
  2648 ;; *************** function _ExecuteCommand *****************
  2649 ;; Defined at:
  2650 ;;		line 1648 in file "main.c"
  2651 ;; Parameters:    Size  Location     Type
  2652 ;;		None
  2653 ;; Auto vars:     Size  Location     Type
  2654 ;;		None
  2655 ;; Return value:  Size  Location     Type
  2656 ;;                  1    wreg      void 
  2657 ;; Registers used:
  2658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2659 ;; Tracked objects:
  2660 ;;		On entry : 0/0
  2661 ;;		On exit  : 0/0
  2662 ;;		Unchanged: 0/0
  2663 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2664 ;;      Params:         0       0       0       0       0       0       0
  2665 ;;      Locals:         0       0       0       0       0       0       0
  2666 ;;      Temps:          0       0       0       0       0       0       0
  2667 ;;      Totals:         0       0       0       0       0       0       0
  2668 ;;Total ram usage:        0 bytes
  2669 ;; Hardware stack levels used:    1
  2670 ;; Hardware stack levels required when called:    6
  2671 ;; This function calls:
  2672 ;;		_ForceSingleCoil
  2673 ;;		_PresetSingleRegister
  2674 ;;		_ReadCurrentRegister
  2675 ;;		_ReadHoldingRegister
  2676 ;;		_ReadInputStatus
  2677 ;;		_SendFrameError
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _ExecuteCommand
  2685  06B8                     _ExecuteCommand:	
  2686                           
  2687                           ;main.c: 1650: if(ModbusSlave!=0)
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _ExecuteCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2691  06B8  0020               	movlb	0	; select bank0
  2692  06B9  0836               	movf	_ModbusSlave,w
  2693  06BA  1903               	btfsc	3,2
  2694  06BB  2EC2               	goto	l4461
  2695                           
  2696                           ;main.c: 1651: if(ModbusSlave != Setting.SlaveAddress)
  2697  06BC  0021               	movlb	1	; select bank1
  2698  06BD  0862               	movf	(_Setting^(0+128)+10),w
  2699  06BE  0020               	movlb	0	; select bank0
  2700  06BF  0636               	xorwf	_ModbusSlave,w
  2701  06C0  1D03               	btfss	3,2
  2702  06C1  0008               	return
  2703  06C2                     l4461:	
  2704                           ;main.c: 1652: return;
  2705                           
  2706                           
  2707                           ;main.c: 1657: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2708  06C2  30A0               	movlw	160
  2709  06C3                     u4827:	
  2710  06C3  3200               	nop2
  2711  06C4  0B89               	decfsz	9,f
  2712  06C5  2EC3               	goto	u4827
  2713                           
  2714                           ;main.c: 1662: if(ModbusFunction == 1)
  2715  06C6  0020               	movlb	0	; select bank0
  2716  06C7  0337               	decf	_ModbusFunction,w
  2717  06C8  1D03               	btfss	3,2
  2718  06C9  2ECD               	goto	l4467
  2719                           
  2720                           ;main.c: 1663: ReadInputStatus();
  2721  06CA  318C  2466         	fcall	_ReadInputStatus
  2722  06CC  0008               	return
  2723  06CD                     l4467:	
  2724                           
  2725                           ;main.c: 1664: else if(ModbusFunction == 2)
  2726  06CD  3002               	movlw	2
  2727  06CE  0020               	movlb	0	; select bank0
  2728  06CF  0637               	xorwf	_ModbusFunction,w
  2729  06D0  1D03               	btfss	3,2
  2730  06D1  2ED5               	goto	l4471
  2731                           
  2732                           ;main.c: 1665: ReadInputStatus();
  2733  06D2  318C  2466         	fcall	_ReadInputStatus
  2734  06D4  0008               	return
  2735  06D5                     l4471:	
  2736                           
  2737                           ;main.c: 1666: else if(ModbusFunction == 3)
  2738  06D5  3003               	movlw	3
  2739  06D6  0020               	movlb	0	; select bank0
  2740  06D7  0637               	xorwf	_ModbusFunction,w
  2741  06D8  1D03               	btfss	3,2
  2742  06D9  2EDD               	goto	l4475
  2743                           
  2744                           ;main.c: 1667: ReadHoldingRegister();
  2745  06DA  3184  24E7         	fcall	_ReadHoldingRegister
  2746  06DC  0008               	return
  2747  06DD                     l4475:	
  2748                           
  2749                           ;main.c: 1668: else if(ModbusFunction == 4)
  2750  06DD  3004               	movlw	4
  2751  06DE  0020               	movlb	0	; select bank0
  2752  06DF  0637               	xorwf	_ModbusFunction,w
  2753  06E0  1D03               	btfss	3,2
  2754  06E1  2EE5               	goto	l4479
  2755                           
  2756                           ;main.c: 1669: ReadCurrentRegister();
  2757  06E2  3185  256C         	fcall	_ReadCurrentRegister
  2758  06E4  0008               	return
  2759  06E5                     l4479:	
  2760                           
  2761                           ;main.c: 1670: else if(ModbusFunction == 5)
  2762  06E5  3005               	movlw	5
  2763  06E6  0020               	movlb	0	; select bank0
  2764  06E7  0637               	xorwf	_ModbusFunction,w
  2765  06E8  1D03               	btfss	3,2
  2766  06E9  2EED               	goto	l4483
  2767                           
  2768                           ;main.c: 1671: ForceSingleCoil();
  2769  06EA  318C  24EC         	fcall	_ForceSingleCoil
  2770  06EC  0008               	return
  2771  06ED                     l4483:	
  2772                           
  2773                           ;main.c: 1672: else if(ModbusFunction == 6)
  2774  06ED  3006               	movlw	6
  2775  06EE  0020               	movlb	0	; select bank0
  2776  06EF  0637               	xorwf	_ModbusFunction,w
  2777  06F0  1D03               	btfss	3,2
  2778  06F1  2EF5               	goto	l4487
  2779                           
  2780                           ;main.c: 1673: PresetSingleRegister();
  2781  06F2  3181  217B         	fcall	_PresetSingleRegister
  2782  06F4  0008               	return
  2783  06F5                     l4487:	
  2784                           
  2785                           ;main.c: 1674: else
  2786                           ;main.c: 1675: SendFrameError(1);
  2787  06F5  3001               	movlw	1
  2788  06F6  318C  248D         	fcall	_SendFrameError
  2789  06F8  0008               	return
  2790  06F9                     __end_of_ExecuteCommand:	
  2791                           
  2792                           	psect	text7
  2793  0C66                     __ptext7:	
  2794 ;; *************** function _ReadInputStatus *****************
  2795 ;; Defined at:
  2796 ;;		line 1446 in file "main.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;		None
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2810 ;;      Params:         0       0       0       0       0       0       0
  2811 ;;      Locals:         0       0       0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0
  2813 ;;      Totals:         0       0       0       0       0       0       0
  2814 ;;Total ram usage:        0 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    4
  2817 ;; This function calls:
  2818 ;;		_GetInputPin
  2819 ;;		_SendFrameError
  2820 ;;		_SendReadByteFrame
  2821 ;; This function is called by:
  2822 ;;		_ExecuteCommand
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _ReadInputStatus
  2828  0C66                     _ReadInputStatus:	
  2829                           
  2830                           ;main.c: 1450: if(ModbusAddress < 10)
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _ReadInputStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2834  0C66  3000               	movlw	0
  2835  0C67  0020               	movlb	0	; select bank0
  2836  0C68  0225               	subwf	_ModbusAddress+1,w
  2837  0C69  300A               	movlw	10
  2838  0C6A  1903               	skipnz
  2839  0C6B  0224               	subwf	_ModbusAddress,w
  2840  0C6C  1803               	skipnc
  2841  0C6D  2C75               	goto	l4303
  2842                           
  2843                           ;main.c: 1451: {
  2844                           ;main.c: 1452: SendReadByteFrame(GetInputPin(ModbusAddress));
  2845  0C6E  0824               	movf	_ModbusAddress,w
  2846  0C6F  318D  2528  318C   	fcall	_GetInputPin
  2847  0C72  318C  2421         	fcall	_SendReadByteFrame
  2848                           
  2849                           ;main.c: 1453: }
  2850  0C74  0008               	return
  2851  0C75                     l4303:	
  2852                           
  2853                           ;main.c: 1455: else
  2854                           ;main.c: 1456: SendFrameError( 2);
  2855  0C75  3002               	movlw	2
  2856  0C76  318C  248D         	fcall	_SendFrameError
  2857  0C78  0008               	return
  2858  0C79                     __end_of_ReadInputStatus:	
  2859                           
  2860                           	psect	text8
  2861  0C21                     __ptext8:	
  2862 ;; *************** function _SendReadByteFrame *****************
  2863 ;; Defined at:
  2864 ;;		line 943 in file "main.c"
  2865 ;; Parameters:    Size  Location     Type
  2866 ;;  value           1    wreg     unsigned char 
  2867 ;; Auto vars:     Size  Location     Type
  2868 ;;  value           1    0[COMMON] unsigned char 
  2869 ;; Return value:  Size  Location     Type
  2870 ;;                  1    wreg      void 
  2871 ;; Registers used:
  2872 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2873 ;; Tracked objects:
  2874 ;;		On entry : 0/0
  2875 ;;		On exit  : 0/0
  2876 ;;		Unchanged: 0/0
  2877 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2878 ;;      Params:         0       0       0       0       0       0       0
  2879 ;;      Locals:         0       0       0       0       0       0       0
  2880 ;;      Temps:          0       0       0       0       0       0       0
  2881 ;;      Totals:         0       0       0       0       0       0       0
  2882 ;;Total ram usage:        0 bytes
  2883 ;; Hardware stack levels used:    1
  2884 ;; Hardware stack levels required when called:    3
  2885 ;; This function calls:
  2886 ;;		_InitModbusPacket
  2887 ;;		_SendModbusPacket
  2888 ;; This function is called by:
  2889 ;;		_ReadInputStatus
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           
  2894                           ;psect for function _SendReadByteFrame
  2895  0C21                     _SendReadByteFrame:	
  2896                           
  2897                           ;incstack = 0
  2898                           ; Regs used in _SendReadByteFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2899  0C21  0020               	movlb	0	;# 
  2900  0C22  00F9               	movwf	SendReadByteFrame@value	;# 
  2901                           
  2902                           ;main.c: 952: InitModbusPacket();
  2903  0C23  318B  23F6  318C   	fcall	_InitModbusPacket
  2904  0C26  3001               	movlw	1	;# 
  2905  0C27  0021               	banksel	_ModbusPacketBuffer	;# 
  2906  0C28  00BA               	movwf	(_ModbusPacketBuffer& (0+127)+2)	;# 
  2907  0C29  0020               	movlb	0	;# 
  2908  0C2A  0879               	movf	SendReadByteFrame@value,w	;# 
  2909  0C2B  0021               	banksel	_ModbusPacketBuffer	;# 
  2910  0C2C  00BB               	movwf	(_ModbusPacketBuffer& (0+127)+3)	;# 
  2911                           
  2912                           ;main.c: 966: SendModbusPacket(4);
  2913  0C2D  3004               	movlw	4
  2914  0C2E  318E  26C6         	fcall	_SendModbusPacket
  2915  0C30  0008               	return
  2916  0C31                     __end_of_SendReadByteFrame:	
  2917                           
  2918                           	psect	text9
  2919  04E7                     __ptext9:	
  2920 ;; *************** function _ReadHoldingRegister *****************
  2921 ;; Defined at:
  2922 ;;		line 1263 in file "main.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;  temp            4   21[BANK0 ] struct .
  2927 ;;  ctemp1          1   27[BANK0 ] volatile unsigned char 
  2928 ;;  Flag            1   20[BANK0 ] unsigned char 
  2929 ;;  ctemp3          1   26[BANK0 ] volatile unsigned char 
  2930 ;;  ctemp2          1   25[BANK0 ] volatile unsigned char 
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      void 
  2933 ;; Registers used:
  2934 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2940 ;;      Params:         0       0       0       0       0       0       0
  2941 ;;      Locals:         0       8       0       0       0       0       0
  2942 ;;      Temps:          0       5       0       0       0       0       0
  2943 ;;      Totals:         0      13       0       0       0       0       0
  2944 ;;Total ram usage:       13 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    5
  2947 ;; This function calls:
  2948 ;;		_SendFrameError
  2949 ;;		_SendReadRegistersFrame
  2950 ;; This function is called by:
  2951 ;;		_ExecuteCommand
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _ReadHoldingRegister
  2957  04E7                     _ReadHoldingRegister:	
  2958                           
  2959                           ;main.c: 1265: volatile unsigned char ctemp1,ctemp2,ctemp3;
  2960                           ;main.c: 1266: ByteLongUnion temp;
  2961                           ;main.c: 1267: char Flag= 0;
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _ReadHoldingRegister: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2965  04E7  0020               	movlb	0	; select bank0
  2966  04E8  01DE               	clrf	ReadHoldingRegister@Flag
  2967                           
  2968                           ;main.c: 1268: if((ModbusAddress >= 0x100) && (ModbusAddress <= 0x10a))
  2969  04E9  3001               	movlw	1
  2970  04EA  0225               	subwf	_ModbusAddress+1,w
  2971  04EB  3000               	movlw	0
  2972  04EC  1903               	skipnz
  2973  04ED  0224               	subwf	_ModbusAddress,w
  2974  04EE  1C03               	skipc
  2975  04EF  2CFD               	goto	l4233
  2976  04F0  3001               	movlw	1
  2977  04F1  0225               	subwf	_ModbusAddress+1,w
  2978  04F2  300B               	movlw	11
  2979  04F3  1903               	skipnz
  2980  04F4  0224               	subwf	_ModbusAddress,w
  2981  04F5  1803               	skipnc
  2982  04F6  2CFD               	goto	l4233
  2983                           
  2984                           ;main.c: 1269: temp.USHORT[0] = Setting.IOConfig[ModbusAddress - 0x100];
  2985  04F7  0824               	movf	_ModbusAddress,w
  2986  04F8  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  2987  04F9  0086               	movwf	6
  2988  04FA  0187               	clrf	7
  2989  04FB  0801               	movf	1,w
  2990  04FC  2D50               	goto	L6
  2991  04FD                     l4233:	
  2992                           
  2993                           ;main.c: 1270: else if(ModbusAddress == 160)
  2994  04FD  30A0               	movlw	160
  2995  04FE  0624               	xorwf	_ModbusAddress,w
  2996  04FF  0425               	iorwf	_ModbusAddress+1,w
  2997  0500  1D03               	btfss	3,2
  2998  0501  2D06               	goto	l4237
  2999                           
  3000                           ;main.c: 1271: temp.USHORT[0] = Setting.SlaveAddress;
  3001  0502  0021               	movlb	1	; select bank1
  3002  0503  0862               	movf	(_Setting^(0+128)+10),w
  3003  0504  0020               	movlb	0	; select bank0
  3004  0505  2D50               	goto	L6
  3005  0506                     l4237:	
  3006                           
  3007                           ;main.c: 1272: else if(ModbusAddress == 250)
  3008  0506  30FA               	movlw	250
  3009  0507  0624               	xorwf	_ModbusAddress,w
  3010  0508  0425               	iorwf	_ModbusAddress+1,w
  3011  0509  1D03               	btfss	3,2
  3012  050A  2D0F               	goto	l4241
  3013                           
  3014                           ;main.c: 1273: temp.USHORT[0] = 0x0101;
  3015  050B  3001               	movlw	1
  3016  050C  00DF               	movwf	ReadHoldingRegister@temp
  3017  050D  3001               	movlw	1
  3018  050E  2D55               	goto	L5
  3019  050F                     l4241:	
  3020                           
  3021                           ;main.c: 1274: else if(ModbusAddress == 251)
  3022  050F  30FB               	movlw	251
  3023  0510  0624               	xorwf	_ModbusAddress,w
  3024  0511  0425               	iorwf	_ModbusAddress+1,w
  3025  0512  1D03               	btfss	3,2
  3026  0513  2D18               	goto	l4245
  3027                           
  3028                           ;main.c: 1275: temp.USHORT[0] = 0x653B;
  3029  0514  303B               	movlw	59
  3030  0515  00DF               	movwf	ReadHoldingRegister@temp
  3031  0516  3065               	movlw	101
  3032  0517  2D55               	goto	L5
  3033  0518                     l4245:	
  3034                           
  3035                           ;main.c: 1276: else if(ModbusAddress == 240)
  3036  0518  30F0               	movlw	240
  3037  0519  0624               	xorwf	_ModbusAddress,w
  3038  051A  0425               	iorwf	_ModbusAddress+1,w
  3039  051B  1D03               	btfss	3,2
  3040  051C  2D40               	goto	l4251
  3041  051D                     l4247:	
  3042                           ;main.c: 1277: {
  3043                           ;main.c: 1278: do{
  3044                           
  3045                           
  3046                           ;main.c: 1279: ctemp1 = TMR1H;
  3047  051D  0817               	movf	23,w	;volatile
  3048  051E  00D9               	movwf	??_ReadHoldingRegister
  3049  051F  0859               	movf	??_ReadHoldingRegister,w
  3050  0520  00E5               	movwf	ReadHoldingRegister@ctemp1	;volatile
  3051                           
  3052                           ;main.c: 1280: temp.USHORT[1]=TimerHiCount;
  3053  0521  0831               	movf	_TimerHiCount+1,w	;volatile
  3054  0522  00E2               	movwf	ReadHoldingRegister@temp+3
  3055  0523  0830               	movf	_TimerHiCount,w	;volatile
  3056  0524  00E1               	movwf	ReadHoldingRegister@temp+2
  3057                           
  3058                           ;main.c: 1281: ctemp2 = TMR1L;
  3059  0525  0816               	movf	22,w	;volatile
  3060  0526  00D9               	movwf	??_ReadHoldingRegister
  3061  0527  0859               	movf	??_ReadHoldingRegister,w
  3062  0528  00E3               	movwf	ReadHoldingRegister@ctemp2	;volatile
  3063                           
  3064                           ;main.c: 1282: ctemp3 = TMR1H;
  3065  0529  0817               	movf	23,w	;volatile
  3066  052A  00D9               	movwf	??_ReadHoldingRegister
  3067  052B  0859               	movf	??_ReadHoldingRegister,w
  3068  052C  00E4               	movwf	ReadHoldingRegister@ctemp3	;volatile
  3069                           
  3070                           ;main.c: 1283: }while(ctemp1 != ctemp3);
  3071  052D  0865               	movf	ReadHoldingRegister@ctemp1,w	;volatile
  3072  052E  0664               	xorwf	ReadHoldingRegister@ctemp3,w	;volatile
  3073  052F  1D03               	skipz
  3074  0530  2D1D               	goto	l4247
  3075                           
  3076                           ;main.c: 1284: temp.USHORT[0]= ((unsigned short) ctemp1 << 8) | (unsigned short)ctemp2;
  3077  0531  0863               	movf	ReadHoldingRegister@ctemp2,w	;volatile
  3078  0532  00D9               	movwf	??_ReadHoldingRegister
  3079  0533  01DA               	clrf	??_ReadHoldingRegister+1
  3080  0534  0865               	movf	ReadHoldingRegister@ctemp1,w	;volatile
  3081  0535  00DB               	movwf	??_ReadHoldingRegister+2
  3082  0536  01DC               	clrf	??_ReadHoldingRegister+3
  3083  0537  085B               	movf	??_ReadHoldingRegister+2,w
  3084  0538  00DC               	movwf	??_ReadHoldingRegister+3
  3085  0539  01DB               	clrf	??_ReadHoldingRegister+2
  3086  053A  0859               	movf	??_ReadHoldingRegister,w
  3087  053B  045B               	iorwf	??_ReadHoldingRegister+2,w
  3088  053C  00DF               	movwf	ReadHoldingRegister@temp
  3089  053D  085A               	movf	??_ReadHoldingRegister+1,w
  3090  053E  045C               	iorwf	??_ReadHoldingRegister+3,w
  3091  053F  2D55               	goto	L5
  3092  0540                     l4251:	
  3093                           ;main.c: 1285: }
  3094                           
  3095                           
  3096                           ;main.c: 1286: else if(ModbusAddress == 241)
  3097  0540  30F1               	movlw	241
  3098  0541  0624               	xorwf	_ModbusAddress,w
  3099  0542  0425               	iorwf	_ModbusAddress+1,w
  3100  0543  1D03               	btfss	3,2
  3101  0544  2D4A               	goto	l4255
  3102                           
  3103                           ;main.c: 1287: {
  3104                           ;main.c: 1288: temp.USHORT[0] = TimerHiCount;
  3105  0545  0831               	movf	_TimerHiCount+1,w	;volatile
  3106  0546  00E0               	movwf	ReadHoldingRegister@temp+1
  3107  0547  0830               	movf	_TimerHiCount,w	;volatile
  3108  0548  00DF               	movwf	ReadHoldingRegister@temp
  3109                           
  3110                           ;main.c: 1289: }
  3111  0549  2D59               	goto	l4259
  3112  054A                     l4255:	
  3113                           
  3114                           ;main.c: 1290: else if(ModbusAddress == 242)
  3115  054A  30F2               	movlw	242
  3116  054B  0624               	xorwf	_ModbusAddress,w
  3117  054C  0425               	iorwf	_ModbusAddress+1,w
  3118  054D  1D03               	btfss	3,2
  3119  054E  2D57               	goto	l577
  3120                           
  3121                           ;main.c: 1291: {
  3122                           ;main.c: 1292: temp.USHORT[0] = Timer1Clock;
  3123  054F  086D               	movf	_Timer1Clock,w
  3124  0550                     L6:	
  3125  0550  00D9               	movwf	??_ReadHoldingRegister
  3126  0551  01DA               	clrf	??_ReadHoldingRegister+1
  3127  0552  0859               	movf	??_ReadHoldingRegister,w
  3128  0553  00DF               	movwf	ReadHoldingRegister@temp
  3129  0554  085A               	movf	??_ReadHoldingRegister+1,w
  3130  0555                     L5:	
  3131  0555  00E0               	movwf	ReadHoldingRegister@temp+1
  3132                           
  3133                           ;main.c: 1293: }
  3134  0556  2D59               	goto	l4259
  3135  0557                     l577:	
  3136                           
  3137                           ;main.c: 1294: else
  3138                           ;main.c: 1295: Flag= 1;
  3139  0557  01DE               	clrf	ReadHoldingRegister@Flag
  3140  0558  0ADE               	incf	ReadHoldingRegister@Flag,f
  3141  0559                     l4259:	
  3142                           
  3143                           ;main.c: 1297: if(Flag)
  3144  0559  085E               	movf	ReadHoldingRegister@Flag,w
  3145  055A  1903               	btfsc	3,2
  3146  055B  2D60               	goto	l4263
  3147                           
  3148                           ;main.c: 1298: SendFrameError( 2);
  3149  055C  3002               	movlw	2
  3150  055D  318C  248D         	fcall	_SendFrameError
  3151  055F  0008               	return
  3152  0560                     l4263:	
  3153                           
  3154                           ;main.c: 1299: else
  3155                           ;main.c: 1300: SendReadRegistersFrame(temp);
  3156  0560  0020               	movlb	0	; select bank0
  3157  0561  0862               	movf	ReadHoldingRegister@temp+3,w
  3158  0562  00D7               	movwf	SendReadRegistersFrame@temp+3
  3159  0563  0861               	movf	ReadHoldingRegister@temp+2,w
  3160  0564  00D6               	movwf	SendReadRegistersFrame@temp+2
  3161  0565  0860               	movf	ReadHoldingRegister@temp+1,w
  3162  0566  00D5               	movwf	SendReadRegistersFrame@temp+1
  3163  0567  085F               	movf	ReadHoldingRegister@temp,w
  3164  0568  00D4               	movwf	SendReadRegistersFrame@temp
  3165  0569  318F  2759         	fcall	_SendReadRegistersFrame
  3166  056B  0008               	return
  3167  056C                     __end_of_ReadHoldingRegister:	
  3168                           
  3169                           	psect	text10
  3170  0F59                     __ptext10:	
  3171 ;; *************** function _SendReadRegistersFrame *****************
  3172 ;; Defined at:
  3173 ;;		line 1010 in file "main.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  temp            4   10[BANK0 ] struct .
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      void 
  3180 ;; Registers used:
  3181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3187 ;;      Params:         0       4       0       0       0       0       0
  3188 ;;      Locals:         0       0       0       0       0       0       0
  3189 ;;      Temps:          0       1       0       0       0       0       0
  3190 ;;      Totals:         0       5       0       0       0       0       0
  3191 ;;Total ram usage:        5 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    4
  3194 ;; This function calls:
  3195 ;;		_InitModbusPacket
  3196 ;;		_SendModbusPacket
  3197 ;;		_SendReadFrame
  3198 ;; This function is called by:
  3199 ;;		_ReadHoldingRegister
  3200 ;; This function uses a non-reentrant model
  3201 ;;
  3202                           
  3203                           
  3204                           ;psect for function _SendReadRegistersFrame
  3205  0F59                     _SendReadRegistersFrame:	
  3206                           
  3207                           ;main.c: 1012: if(ModbusData==1)
  3208                           
  3209                           ;incstack = 0
  3210                           ; Regs used in _SendReadRegistersFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
  3211  0F59  0020               	movlb	0	; select bank0
  3212  0F5A  0322               	decf	_ModbusData,w
  3213  0F5B  0423               	iorwf	_ModbusData+1,w
  3214  0F5C  1D03               	btfss	3,2
  3215  0F5D  2F65               	goto	l4109
  3216                           
  3217                           ;main.c: 1013: SendReadFrame(temp.USHORT[0]);
  3218  0F5E  0855               	movf	SendReadRegistersFrame@temp+1,w
  3219  0F5F  00D3               	movwf	SendReadFrame@value+1
  3220  0F60  0854               	movf	SendReadRegistersFrame@temp,w
  3221  0F61  00D2               	movwf	SendReadFrame@value
  3222  0F62  318C  2479         	fcall	_SendReadFrame
  3223  0F64  0008               	return
  3224  0F65                     l4109:	
  3225                           
  3226                           ;main.c: 1014: else if(ModbusData==2)
  3227  0F65  3002               	movlw	2
  3228  0F66  0020               	movlb	0	; select bank0
  3229  0F67  0622               	xorwf	_ModbusData,w
  3230  0F68  0423               	iorwf	_ModbusData+1,w
  3231  0F69  1D03               	btfss	3,2
  3232  0F6A  0008               	return
  3233                           
  3234                           ;main.c: 1015: {
  3235                           ;main.c: 1016: InitModbusPacket();
  3236  0F6B  318B  23F6  318F   	fcall	_InitModbusPacket
  3237                           
  3238                           ;main.c: 1017: ModbusPacketBuffer[2]=4;
  3239  0F6E  3004               	movlw	4
  3240  0F6F  0020               	movlb	0	; select bank0
  3241  0F70  00D8               	movwf	??_SendReadRegistersFrame
  3242  0F71  0858               	movf	??_SendReadRegistersFrame,w
  3243  0F72  0021               	movlb	1	; select bank1
  3244  0F73  00BA               	movwf	(_ModbusPacketBuffer^(0+128)+2)
  3245                           
  3246                           ;main.c: 1018: ModbusPacketBuffer[3]=temp.BYTE[3];
  3247  0F74  0020               	movlb	0	; select bank0
  3248  0F75  0857               	movf	SendReadRegistersFrame@temp+3,w
  3249  0F76  00D8               	movwf	??_SendReadRegistersFrame
  3250  0F77  0858               	movf	??_SendReadRegistersFrame,w
  3251  0F78  0021               	movlb	1	; select bank1
  3252  0F79  00BB               	movwf	(_ModbusPacketBuffer^(0+128)+3)
  3253                           
  3254                           ;main.c: 1019: ModbusPacketBuffer[4]=temp.BYTE[2];
  3255  0F7A  0020               	movlb	0	; select bank0
  3256  0F7B  0856               	movf	SendReadRegistersFrame@temp+2,w
  3257  0F7C  00D8               	movwf	??_SendReadRegistersFrame
  3258  0F7D  0858               	movf	??_SendReadRegistersFrame,w
  3259  0F7E  0021               	movlb	1	; select bank1
  3260  0F7F  00BC               	movwf	(_ModbusPacketBuffer^(0+128)+4)
  3261                           
  3262                           ;main.c: 1020: ModbusPacketBuffer[5]=temp.BYTE[1];
  3263  0F80  0020               	movlb	0	; select bank0
  3264  0F81  0855               	movf	SendReadRegistersFrame@temp+1,w
  3265  0F82  00D8               	movwf	??_SendReadRegistersFrame
  3266  0F83  0858               	movf	??_SendReadRegistersFrame,w
  3267  0F84  0021               	movlb	1	; select bank1
  3268  0F85  00BD               	movwf	(_ModbusPacketBuffer^(0+128)+5)
  3269                           
  3270                           ;main.c: 1021: ModbusPacketBuffer[6]=temp.BYTE[0];
  3271  0F86  0020               	movlb	0	; select bank0
  3272  0F87  0854               	movf	SendReadRegistersFrame@temp,w
  3273  0F88  00D8               	movwf	??_SendReadRegistersFrame
  3274  0F89  0858               	movf	??_SendReadRegistersFrame,w
  3275  0F8A  0021               	movlb	1	; select bank1
  3276  0F8B  00BE               	movwf	(_ModbusPacketBuffer^(0+128)+6)
  3277                           
  3278                           ;main.c: 1022: SendModbusPacket(7);
  3279  0F8C  3007               	movlw	7
  3280  0F8D  318E  26C6         	fcall	_SendModbusPacket
  3281  0F8F  0008               	return
  3282  0F90                     __end_of_SendReadRegistersFrame:	
  3283                           
  3284                           	psect	text11
  3285  056C                     __ptext11:	
  3286 ;; *************** function _ReadCurrentRegister *****************
  3287 ;; Defined at:
  3288 ;;		line 1387 in file "main.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;  temp            2   19[BANK0 ] unsigned short 
  3293 ;;  IOn             1   21[BANK0 ] unsigned char 
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3303 ;;      Params:         0       0       0       0       0       0       0
  3304 ;;      Locals:         0       3       0       0       0       0       0
  3305 ;;      Temps:          0       3       0       0       0       0       0
  3306 ;;      Totals:         0       6       0       0       0       0       0
  3307 ;;Total ram usage:        6 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    5
  3310 ;; This function calls:
  3311 ;;		_MultipleRegister
  3312 ;;		_ReadAllCoils
  3313 ;;		_ReadIO
  3314 ;;		_ReadTSensor
  3315 ;;		_ReadVRef
  3316 ;;		_SendBytesFrame
  3317 ;;		_SendFrameError
  3318 ;;		_SendReadFrame
  3319 ;; This function is called by:
  3320 ;;		_ExecuteCommand
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           
  3325                           ;psect for function _ReadCurrentRegister
  3326  056C                     _ReadCurrentRegister:	
  3327                           
  3328                           ;main.c: 1389: unsigned short temp;
  3329                           ;main.c: 1390: unsigned char IOn;
  3330                           ;main.c: 1393: temp=0;
  3331                           
  3332                           ;incstack = 0
  3333                           ; Regs used in _ReadCurrentRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3334  056C  0020               	movlb	0	; select bank0
  3335  056D  01DD               	clrf	ReadCurrentRegister@temp
  3336  056E  01DE               	clrf	ReadCurrentRegister@temp+1
  3337                           
  3338                           ;main.c: 1394: BadIO=0;
  3339  056F  01BE               	clrf	_BadIO
  3340                           
  3341                           ;main.c: 1395: if(ModbusAddress<0xA0)
  3342  0570  3000               	movlw	0
  3343  0571  0225               	subwf	_ModbusAddress+1,w
  3344  0572  30A0               	movlw	160
  3345  0573  1903               	skipnz
  3346  0574  0224               	subwf	_ModbusAddress,w
  3347  0575  1803               	skipnc
  3348  0576  2D9A               	goto	l4281
  3349                           
  3350                           ;main.c: 1396: {
  3351                           ;main.c: 1397: IOn = ModbusAddress >>4;
  3352  0577  0825               	movf	_ModbusAddress+1,w
  3353  0578  00DB               	movwf	??_ReadCurrentRegister+1
  3354  0579  0824               	movf	_ModbusAddress,w
  3355  057A  00DA               	movwf	??_ReadCurrentRegister
  3356  057B  3004               	movlw	4
  3357  057C                     u4255:	
  3358  057C  36DB               	lsrf	??_ReadCurrentRegister+1,f
  3359  057D  0CDA               	rrf	??_ReadCurrentRegister,f
  3360  057E  0B89               	decfsz	9,f
  3361  057F  2D7C               	goto	u4255
  3362  0580  085A               	movf	??_ReadCurrentRegister,w
  3363  0581  00DC               	movwf	??_ReadCurrentRegister+2
  3364  0582  085C               	movf	??_ReadCurrentRegister+2,w
  3365  0583  00DF               	movwf	ReadCurrentRegister@IOn
  3366                           
  3367                           ;main.c: 1399: if(MultipleRegister(IOn))
  3368  0584  085F               	movf	ReadCurrentRegister@IOn,w
  3369  0585  318C  2411  3185   	fcall	_MultipleRegister
  3370  0588  3A00               	xorlw	0
  3371  0589  1903               	skipnz
  3372  058A  2D90               	goto	l4279
  3373                           
  3374                           ;main.c: 1400: {
  3375                           ;main.c: 1401: SendBytesFrame(IOn);
  3376  058B  0020               	movlb	0	; select bank0
  3377  058C  085F               	movf	ReadCurrentRegister@IOn,w
  3378  058D  3186  2627         	fcall	_SendBytesFrame
  3379                           
  3380                           ;main.c: 1402: return;
  3381  058F  0008               	return
  3382  0590                     l4279:	
  3383                           ;main.c: 1403: }
  3384                           
  3385                           
  3386                           ;main.c: 1404: else
  3387                           ;main.c: 1405: temp= ReadIO(IOn);
  3388  0590  0020               	movlb	0	; select bank0
  3389  0591  085F               	movf	ReadCurrentRegister@IOn,w
  3390  0592  318F  27C8  3185   	fcall	_ReadIO
  3391  0595  0020               	movlb	0	; select bank0
  3392  0596  084E               	movf	?_ReadIO+1,w
  3393  0597  00DE               	movwf	ReadCurrentRegister@temp+1
  3394  0598  084D               	movf	?_ReadIO,w
  3395  0599  2DC3               	goto	L9
  3396  059A                     l4281:	
  3397                           ;main.c: 1406: }
  3398                           
  3399                           
  3400                           ;main.c: 1407: else if(ModbusAddress==0x1000)
  3401  059A  3010               	movlw	16
  3402  059B  0625               	xorwf	_ModbusAddress+1,w
  3403  059C  0424               	iorwf	_ModbusAddress,w
  3404  059D  1D03               	btfss	3,2
  3405  059E  2DA7               	goto	l4285
  3406                           
  3407                           ;main.c: 1408: temp = ReadVRef();
  3408  059F  318C  2442  3185   	fcall	_ReadVRef
  3409  05A2  0020               	movlb	0	; select bank0
  3410  05A3  084E               	movf	?_ReadVRef+1,w
  3411  05A4  00DE               	movwf	ReadCurrentRegister@temp+1
  3412  05A5  084D               	movf	?_ReadVRef,w
  3413  05A6  2DC3               	goto	L9
  3414  05A7                     l4285:	
  3415                           
  3416                           ;main.c: 1409: else if(ModbusAddress==0x1001)
  3417  05A7  0324               	decf	_ModbusAddress,w
  3418  05A8  3010               	movlw	16
  3419  05A9  1903               	skipnz
  3420  05AA  0625               	xorwf	_ModbusAddress+1,w
  3421  05AB  1D03               	btfss	3,2
  3422  05AC  2DB5               	goto	l4289
  3423                           
  3424                           ;main.c: 1410: temp = ReadTSensor();
  3425  05AD  318C  2402  3185   	fcall	_ReadTSensor
  3426  05B0  0020               	movlb	0	; select bank0
  3427  05B1  084E               	movf	?_ReadTSensor+1,w
  3428  05B2  00DE               	movwf	ReadCurrentRegister@temp+1
  3429  05B3  084D               	movf	?_ReadTSensor,w
  3430  05B4  2DC3               	goto	L9
  3431  05B5                     l4289:	
  3432                           
  3433                           ;main.c: 1411: else if(ModbusAddress==0x1002)
  3434  05B5  3002               	movlw	2
  3435  05B6  0624               	xorwf	_ModbusAddress,w
  3436  05B7  3010               	movlw	16
  3437  05B8  1903               	skipnz
  3438  05B9  0625               	xorwf	_ModbusAddress+1,w
  3439  05BA  1D03               	btfss	3,2
  3440  05BB  2DC5               	goto	l619
  3441                           
  3442                           ;main.c: 1412: temp = ReadAllCoils();
  3443  05BC  318E  2647  3185   	fcall	_ReadAllCoils
  3444  05BF  0876               	movf	?_ReadAllCoils+1,w
  3445  05C0  0020               	movlb	0	; select bank0
  3446  05C1  00DE               	movwf	ReadCurrentRegister@temp+1
  3447  05C2  0875               	movf	?_ReadAllCoils,w
  3448  05C3                     L9:	
  3449  05C3  00DD               	movwf	ReadCurrentRegister@temp
  3450  05C4  2DC7               	goto	l4293
  3451  05C5                     l619:	
  3452                           
  3453                           ;main.c: 1413: else
  3454                           ;main.c: 1414: BadIO=1;
  3455  05C5  01BE               	clrf	_BadIO
  3456  05C6  0ABE               	incf	_BadIO,f
  3457  05C7                     l4293:	
  3458                           
  3459                           ;main.c: 1416: if(BadIO)
  3460  05C7  0020               	movlb	0	; select bank0
  3461  05C8  083E               	movf	_BadIO,w
  3462  05C9  1903               	btfsc	3,2
  3463  05CA  2DCF               	goto	l4297
  3464                           
  3465                           ;main.c: 1417: SendFrameError(2);
  3466  05CB  3002               	movlw	2
  3467  05CC  318C  248D         	fcall	_SendFrameError
  3468  05CE  0008               	return
  3469  05CF                     l4297:	
  3470                           
  3471                           ;main.c: 1418: else
  3472                           ;main.c: 1419: SendReadFrame(temp);
  3473  05CF  0020               	movlb	0	; select bank0
  3474  05D0  085E               	movf	ReadCurrentRegister@temp+1,w
  3475  05D1  00D3               	movwf	SendReadFrame@value+1
  3476  05D2  085D               	movf	ReadCurrentRegister@temp,w
  3477  05D3  00D2               	movwf	SendReadFrame@value
  3478  05D4  318C  2479         	fcall	_SendReadFrame
  3479  05D6  0008               	return
  3480  05D7                     __end_of_ReadCurrentRegister:	
  3481                           
  3482                           	psect	text12
  3483  0C79                     __ptext12:	
  3484 ;; *************** function _SendReadFrame *****************
  3485 ;; Defined at:
  3486 ;;		line 981 in file "main.c"
  3487 ;; Parameters:    Size  Location     Type
  3488 ;;  value           2    8[BANK0 ] unsigned short 
  3489 ;; Auto vars:     Size  Location     Type
  3490 ;;		None
  3491 ;; Return value:  Size  Location     Type
  3492 ;;                  1    wreg      void 
  3493 ;; Registers used:
  3494 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3495 ;; Tracked objects:
  3496 ;;		On entry : 0/0
  3497 ;;		On exit  : 0/0
  3498 ;;		Unchanged: 0/0
  3499 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3500 ;;      Params:         0       2       0       0       0       0       0
  3501 ;;      Locals:         0       0       0       0       0       0       0
  3502 ;;      Temps:          0       0       0       0       0       0       0
  3503 ;;      Totals:         0       2       0       0       0       0       0
  3504 ;;Total ram usage:        2 bytes
  3505 ;; Hardware stack levels used:    1
  3506 ;; Hardware stack levels required when called:    3
  3507 ;; This function calls:
  3508 ;;		_InitModbusPacket
  3509 ;;		_SendModbusPacket
  3510 ;; This function is called by:
  3511 ;;		_SendReadRegistersFrame
  3512 ;;		_ReadCurrentRegister
  3513 ;; This function uses a non-reentrant model
  3514 ;;
  3515                           
  3516                           
  3517                           ;psect for function _SendReadFrame
  3518  0C79                     _SendReadFrame:	
  3519                           
  3520                           ;incstack = 0
  3521                           ; Regs used in _SendReadFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3522  0C79  0020               	movlb	0	;# 
  3523  0C7A  00D2               	movwf	SendReadFrame@value	;# 
  3524                           
  3525                           ;main.c: 988: InitModbusPacket();
  3526  0C7B  318B  23F6  318C   	fcall	_InitModbusPacket
  3527  0C7E  3002               	movlw	2	;# 
  3528  0C7F  0021               	banksel	_ModbusPacketBuffer	;# 
  3529  0C80  00BA               	movwf	(_ModbusPacketBuffer& (0+127)+2)	;# 
  3530  0C81  0020               	movlb	0	;# 
  3531  0C82  0853               	movf	SendReadFrame@value+1,w	;# 
  3532  0C83  0021               	banksel	_ModbusPacketBuffer	;# 
  3533  0C84  00BB               	movwf	(_ModbusPacketBuffer& (0+127)+3)	;# 
  3534  0C85  0020               	movlb	0	;# 
  3535  0C86  0852               	movf	SendReadFrame@value,w	;# 
  3536  0C87  0021               	banksel	_ModbusPacketBuffer	;# 
  3537  0C88  00BC               	movwf	(_ModbusPacketBuffer& (0+127)+4)	;# 
  3538                           
  3539                           ;main.c: 1007: SendModbusPacket(5);
  3540  0C89  3005               	movlw	5
  3541  0C8A  318E  26C6         	fcall	_SendModbusPacket
  3542  0C8C  0008               	return
  3543  0C8D                     __end_of_SendReadFrame:	
  3544                           
  3545                           	psect	text13
  3546  0627                     __ptext13:	
  3547 ;; *************** function _SendBytesFrame *****************
  3548 ;; Defined at:
  3549 ;;		line 1030 in file "main.c"
  3550 ;; Parameters:    Size  Location     Type
  3551 ;;  _Address        1    wreg     unsigned char 
  3552 ;; Auto vars:     Size  Location     Type
  3553 ;;  _Address        1   14[BANK0 ] unsigned char 
  3554 ;;  NByte           1   15[BANK0 ] unsigned char 
  3555 ;;  _temp           1   13[BANK0 ] unsigned char 
  3556 ;;  loop            1   12[BANK0 ] unsigned char 
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  1    wreg      void 
  3559 ;; Registers used:
  3560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3566 ;;      Params:         0       0       0       0       0       0       0
  3567 ;;      Locals:         0       4       0       0       0       0       0
  3568 ;;      Temps:          0       2       0       0       0       0       0
  3569 ;;      Totals:         0       6       0       0       0       0       0
  3570 ;;Total ram usage:        6 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    4
  3573 ;; This function calls:
  3574 ;;		_InitModbusPacket
  3575 ;;		_SendFrameError
  3576 ;;		_SendModbusPacket
  3577 ;;		___bmul
  3578 ;; This function is called by:
  3579 ;;		_ReadCurrentRegister
  3580 ;; This function uses a non-reentrant model
  3581 ;;
  3582                           
  3583                           
  3584                           ;psect for function _SendBytesFrame
  3585  0627                     _SendBytesFrame:	
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _SendBytesFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3589                           ;SendBytesFrame@_Address stored from wreg
  3590  0627  0020               	movlb	0	; select bank0
  3591  0628  00D8               	movwf	SendBytesFrame@_Address
  3592                           
  3593                           ;main.c: 1032: unsigned char loop=0;
  3594  0629  01D6               	clrf	SendBytesFrame@loop
  3595                           
  3596                           ;main.c: 1033: unsigned char NByte=0;
  3597  062A  01D9               	clrf	SendBytesFrame@NByte
  3598                           
  3599                           ;main.c: 1035: unsigned char _temp;
  3600                           ;main.c: 1037: _temp = Setting.IOConfig[_Address];
  3601  062B  0858               	movf	SendBytesFrame@_Address,w
  3602  062C  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  3603  062D  0086               	movwf	6
  3604  062E  0187               	clrf	7
  3605  062F  0801               	movf	1,w
  3606  0630  00D4               	movwf	??_SendBytesFrame
  3607  0631  0854               	movf	??_SendBytesFrame,w
  3608  0632  00D7               	movwf	SendBytesFrame@_temp
  3609                           
  3610                           ;main.c: 1049: if((_temp & 12)== 12)
  3611  0633  300C               	movlw	12
  3612  0634  0557               	andwf	SendBytesFrame@_temp,w
  3613  0635  00D4               	movwf	??_SendBytesFrame
  3614  0636  300C               	movlw	12
  3615  0637  0654               	xorwf	??_SendBytesFrame,w
  3616  0638  1D03               	btfss	3,2
  3617  0639  2E3C               	goto	l4133
  3618                           
  3619                           ;main.c: 1050: NByte = 6;
  3620  063A  3006               	movlw	6
  3621  063B  2E3D               	goto	L10
  3622  063C                     l4133:	
  3623                           
  3624                           ;main.c: 1051: else
  3625                           ;main.c: 1052: NByte=4;
  3626  063C  3004               	movlw	4
  3627  063D                     L10:	
  3628  063D  00D4               	movwf	??_SendBytesFrame
  3629  063E  0854               	movf	??_SendBytesFrame,w
  3630  063F  00D9               	movwf	SendBytesFrame@NByte
  3631                           
  3632                           ;main.c: 1054: if(NByte==0)
  3633  0640  0859               	movf	SendBytesFrame@NByte,w
  3634  0641  1D03               	btfss	3,2
  3635  0642  2E47               	goto	l4139
  3636                           
  3637                           ;main.c: 1055: SendFrameError(2);
  3638  0643  3002               	movlw	2
  3639  0644  318C  248D         	fcall	_SendFrameError
  3640  0646  0008               	return
  3641  0647                     l4139:	
  3642                           
  3643                           ;main.c: 1056: else
  3644                           ;main.c: 1057: {
  3645                           ;main.c: 1058: InitModbusPacket();
  3646  0647  318B  23F6  3186   	fcall	_InitModbusPacket
  3647                           
  3648                           ;main.c: 1060: ModbusPacketBuffer[2]= NByte;
  3649  064A  0020               	movlb	0	; select bank0
  3650  064B  0859               	movf	SendBytesFrame@NByte,w
  3651  064C  00D4               	movwf	??_SendBytesFrame
  3652  064D  0854               	movf	??_SendBytesFrame,w
  3653  064E  0021               	movlb	1	; select bank1
  3654  064F  00BA               	movwf	(_ModbusPacketBuffer^(0+128)+2)
  3655                           
  3656                           ;main.c: 1075: _temp = _Address * sizeof(SensorDataUnion);
  3657  0650  3006               	movlw	6
  3658  0651  0020               	movlb	0	; select bank0
  3659  0652  00D4               	movwf	??_SendBytesFrame
  3660  0653  0854               	movf	??_SendBytesFrame,w
  3661  0654  00F2               	movwf	___bmul@multiplicand
  3662  0655  0858               	movf	SendBytesFrame@_Address,w
  3663  0656  318C  2431  3186   	fcall	___bmul
  3664  0659  0020               	movlb	0	; select bank0
  3665  065A  00D5               	movwf	??_SendBytesFrame+1
  3666  065B  0855               	movf	??_SendBytesFrame+1,w
  3667  065C  00D7               	movwf	SendBytesFrame@_temp
  3668  065D  3001               	movlw	_IOSensorData/(0+256)	;# 
  3669  065E  0085               	movwf	5	;# 
  3670  065F  30A0               	movlw	_IOSensorData& (0+255)	;# 
  3671  0660  0757               	addwf	SendBytesFrame@_temp,w	;# 
  3672  0661  0084               	movwf	4	;# 
  3673  0662  3000               	movlw	_ModbusPacketBuffer/(0+256)	;# 
  3674  0663  0087               	movwf	7	;# 
  3675  0664  30BB               	movlw	(_ModbusPacketBuffer& (0+255)+3)	;# 
  3676  0665  0086               	movwf	6	;# 
  3677  0666  0859               	movf	SendBytesFrame@NByte,w	;# 
  3678  0667  00D6               	movwf	SendBytesFrame@loop	;# 
  3679                           
  3680                           ;main.c: 1090: (GIE = 0);
  3681  0668  138B               	bcf	11,7	;volatile
  3682  0669                     BYTELOOP:	
  3683                           
  3684                           ;# 
  3685  0669  0800               	movf	0,w	;# 
  3686  066A  001E               	movwi fsr1++	;# 
  3687  066B  0A84               	incf	4,f	;# 
  3688  066C  0BD6               	decfsz	SendBytesFrame@loop,f	;# 
  3689  066D  2E69               	goto	BYTELOOP	;# 
  3690                           
  3691                           ;main.c: 1099: (GIE = 1);
  3692  066E  178B               	bsf	11,7	;volatile
  3693                           
  3694                           ;main.c: 1101: SendModbusPacket((unsigned char) (NByte+3));
  3695  066F  0020               	movlb	0	; select bank0
  3696  0670  0859               	movf	SendBytesFrame@NByte,w
  3697  0671  3E03               	addlw	3
  3698  0672  318E  26C6         	fcall	_SendModbusPacket
  3699  0674  0008               	return
  3700  0675                     __end_of_SendBytesFrame:	
  3701                           
  3702                           	psect	text14
  3703  0C42                     __ptext14:	
  3704 ;; *************** function _ReadVRef *****************
  3705 ;; Defined at:
  3706 ;;		line 1329 in file "main.c"
  3707 ;; Parameters:    Size  Location     Type
  3708 ;;		None
  3709 ;; Auto vars:     Size  Location     Type
  3710 ;;		None
  3711 ;; Return value:  Size  Location     Type
  3712 ;;                  2    3[BANK0 ] unsigned short 
  3713 ;; Registers used:
  3714 ;;		wreg, status,2, status,0, pclath, cstack
  3715 ;; Tracked objects:
  3716 ;;		On entry : 0/0
  3717 ;;		On exit  : 0/0
  3718 ;;		Unchanged: 0/0
  3719 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3720 ;;      Params:         0       2       0       0       0       0       0
  3721 ;;      Locals:         0       0       0       0       0       0       0
  3722 ;;      Temps:          0       0       0       0       0       0       0
  3723 ;;      Totals:         0       2       0       0       0       0       0
  3724 ;;Total ram usage:        2 bytes
  3725 ;; Hardware stack levels used:    1
  3726 ;; Hardware stack levels required when called:    2
  3727 ;; This function calls:
  3728 ;;		_ReadA2D
  3729 ;; This function is called by:
  3730 ;;		_ReadCurrentRegister
  3731 ;; This function uses a non-reentrant model
  3732 ;;
  3733                           
  3734                           
  3735                           ;psect for function _ReadVRef
  3736  0C42                     _ReadVRef:	
  3737                           
  3738                           ;main.c: 1332: FVRCONbits.ADFVR=2;
  3739                           
  3740                           ;incstack = 0
  3741                           ; Regs used in _ReadVRef: [wreg+status,2+status,0+pclath+cstack]
  3742  0C42  0022               	movlb	2	; select bank2
  3743  0C43  0817               	movf	23,w	;volatile
  3744  0C44  39FC               	andlw	-4
  3745  0C45  3802               	iorlw	2
  3746  0C46  0097               	movwf	23	;volatile
  3747                           
  3748                           ;main.c: 1334: ADCON1bits.ADPREF=0;
  3749  0C47  30FC               	movlw	-4
  3750  0C48  0021               	movlb	1	; select bank1
  3751  0C49  059E               	andwf	30,f	;volatile
  3752                           
  3753                           ;main.c: 1335: return ReadA2D(31);
  3754  0C4A  301F               	movlw	31
  3755  0C4B  3187  2778         	fcall	_ReadA2D
  3756  0C4D  0873               	movf	?_ReadA2D+1,w
  3757  0C4E  0020               	movlb	0	; select bank0
  3758  0C4F  00CE               	movwf	?_ReadVRef+1
  3759  0C50  0872               	movf	?_ReadA2D,w
  3760  0C51  00CD               	movwf	?_ReadVRef
  3761  0C52  0008               	return
  3762  0C53                     __end_of_ReadVRef:	
  3763                           
  3764                           	psect	text15
  3765  0C02                     __ptext15:	
  3766 ;; *************** function _ReadTSensor *****************
  3767 ;; Defined at:
  3768 ;;		line 1338 in file "main.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;		None
  3771 ;; Auto vars:     Size  Location     Type
  3772 ;;		None
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  2    3[BANK0 ] unsigned short 
  3775 ;; Registers used:
  3776 ;;		wreg, status,2, status,0, pclath, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3782 ;;      Params:         0       2       0       0       0       0       0
  3783 ;;      Locals:         0       0       0       0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0       0       0
  3785 ;;      Totals:         0       2       0       0       0       0       0
  3786 ;;Total ram usage:        2 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    2
  3789 ;; This function calls:
  3790 ;;		_ReadA2D
  3791 ;; This function is called by:
  3792 ;;		_ReadCurrentRegister
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _ReadTSensor
  3798  0C02                     _ReadTSensor:	
  3799                           
  3800                           ;main.c: 1341: FVRCONbits.TSEN=1;
  3801                           
  3802                           ;incstack = 0
  3803                           ; Regs used in _ReadTSensor: [wreg+status,2+status,0+pclath+cstack]
  3804  0C02  0022               	movlb	2	; select bank2
  3805  0C03  1697               	bsf	23,5	;volatile
  3806                           
  3807                           ;main.c: 1342: FVRCONbits.TSRNG=0;
  3808  0C04  1217               	bcf	23,4	;volatile
  3809                           
  3810                           ;main.c: 1343: ADCON1bits.ADPREF=0;
  3811  0C05  30FC               	movlw	-4
  3812  0C06  0021               	movlb	1	; select bank1
  3813  0C07  059E               	andwf	30,f	;volatile
  3814                           
  3815                           ;main.c: 1344: return ReadA2D(29);
  3816  0C08  301D               	movlw	29
  3817  0C09  3187  2778         	fcall	_ReadA2D
  3818  0C0B  0873               	movf	?_ReadA2D+1,w
  3819  0C0C  0020               	movlb	0	; select bank0
  3820  0C0D  00CE               	movwf	?_ReadTSensor+1
  3821  0C0E  0872               	movf	?_ReadA2D,w
  3822  0C0F  00CD               	movwf	?_ReadTSensor
  3823  0C10  0008               	return
  3824  0C11                     __end_of_ReadTSensor:	
  3825                           
  3826                           	psect	text16
  3827  0FC8                     __ptext16:	
  3828 ;; *************** function _ReadIO *****************
  3829 ;; Defined at:
  3830 ;;		line 1304 in file "main.c"
  3831 ;; Parameters:    Size  Location     Type
  3832 ;;  Pin             1    wreg     unsigned char 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  Pin             1    8[BANK0 ] unsigned char 
  3835 ;;  temp            2    0        unsigned short 
  3836 ;;  ioconfig        1    7[BANK0 ] unsigned char 
  3837 ;;  _tempb          1    0        unsigned char 
  3838 ;;  mask            1    0        unsigned char 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;                  2    3[BANK0 ] unsigned short 
  3841 ;; Registers used:
  3842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 0/0
  3845 ;;		On exit  : 0/0
  3846 ;;		Unchanged: 0/0
  3847 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3848 ;;      Params:         0       2       0       0       0       0       0
  3849 ;;      Locals:         0       2       0       0       0       0       0
  3850 ;;      Temps:          0       2       0       0       0       0       0
  3851 ;;      Totals:         0       6       0       0       0       0       0
  3852 ;;Total ram usage:        6 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    2
  3855 ;; This function calls:
  3856 ;;		_ReadA2D
  3857 ;;		_ReadIOPin
  3858 ;;		_SetAnalogConfig
  3859 ;; This function is called by:
  3860 ;;		_ReadCurrentRegister
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           
  3865                           ;psect for function _ReadIO
  3866  0FC8                     _ReadIO:	
  3867                           
  3868                           ;incstack = 0
  3869                           ; Regs used in _ReadIO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3870                           ;ReadIO@Pin stored from wreg
  3871  0FC8  0020               	movlb	0	; select bank0
  3872  0FC9  00D2               	movwf	ReadIO@Pin
  3873                           
  3874                           ;main.c: 1307: BadIO=0;
  3875  0FCA  01BE               	clrf	_BadIO
  3876                           
  3877                           ;main.c: 1308: unsigned char ioconfig = Setting.IOConfig[Pin];
  3878  0FCB  0852               	movf	ReadIO@Pin,w
  3879  0FCC  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  3880  0FCD  0086               	movwf	6
  3881  0FCE  0187               	clrf	7
  3882  0FCF  0801               	movf	1,w
  3883  0FD0  00CF               	movwf	??_ReadIO
  3884  0FD1  084F               	movf	??_ReadIO,w
  3885  0FD2  00D1               	movwf	ReadIO@ioconfig
  3886                           
  3887                           ;main.c: 1309: unsigned short temp;
  3888                           ;main.c: 1310: unsigned char mask;
  3889                           ;main.c: 1311: unsigned char _tempb;
  3890                           ;main.c: 1313: if(ioconfig <= 3)
  3891  0FD3  3004               	movlw	4
  3892  0FD4  0251               	subwf	ReadIO@ioconfig,w
  3893  0FD5  1803               	skipnc
  3894  0FD6  2FEC               	goto	l4163
  3895                           
  3896                           ;main.c: 1314: {
  3897                           ;main.c: 1315: SetAnalogConfig(Pin);
  3898  0FD7  0852               	movf	ReadIO@Pin,w
  3899  0FD8  3187  273A  318F   	fcall	_SetAnalogConfig
  3900                           
  3901                           ;main.c: 1316: return ReadA2D(CSMASK[Pin]);
  3902  0FDB  0020               	movlb	0	; select bank0
  3903  0FDC  0852               	movf	ReadIO@Pin,w
  3904  0FDD  3E20               	addlw	low (_CSMASK| (0+32768))
  3905  0FDE  0084               	movwf	4
  3906  0FDF  3088               	movlw	high (_CSMASK| (0+32768))
  3907  0FE0  1803               	skipnc
  3908  0FE1  3E01               	addlw	1
  3909  0FE2  0085               	movwf	5
  3910  0FE3  0800               	movf	0,w	;code access
  3911  0FE4  3187  2778         	fcall	_ReadA2D
  3912  0FE6  0873               	movf	?_ReadA2D+1,w
  3913  0FE7  0020               	movlb	0	; select bank0
  3914  0FE8  00CE               	movwf	?_ReadIO+1
  3915  0FE9  0872               	movf	?_ReadA2D,w
  3916  0FEA  00CD               	movwf	?_ReadIO
  3917  0FEB  0008               	return
  3918  0FEC                     l4163:	
  3919                           
  3920                           ;main.c: 1317: }
  3921                           ;main.c: 1320: if(ioconfig <= 6)
  3922  0FEC  3007               	movlw	7
  3923  0FED  0251               	subwf	ReadIO@ioconfig,w
  3924  0FEE  1803               	skipnc
  3925  0FEF  2FFB               	goto	l4171
  3926                           
  3927                           ;main.c: 1321: {
  3928                           ;main.c: 1322: return ReadIOPin(Pin);
  3929  0FF0  0852               	movf	ReadIO@Pin,w
  3930  0FF1  318D  2547         	fcall	_ReadIOPin
  3931  0FF3  0020               	movlb	0	; select bank0
  3932  0FF4  00CF               	movwf	??_ReadIO
  3933  0FF5  01D0               	clrf	??_ReadIO+1
  3934  0FF6  084F               	movf	??_ReadIO,w
  3935  0FF7  00CD               	movwf	?_ReadIO
  3936  0FF8  0850               	movf	??_ReadIO+1,w
  3937  0FF9  00CE               	movwf	?_ReadIO+1
  3938                           
  3939                           ;main.c: 1323: }
  3940  0FFA  0008               	return
  3941  0FFB                     l4171:	
  3942                           
  3943                           ;main.c: 1324: else
  3944                           ;main.c: 1325: return(0xffff);
  3945  0FFB  30FF               	movlw	255
  3946  0FFC  00CD               	movwf	?_ReadIO
  3947  0FFD  30FF               	movlw	255
  3948  0FFE  00CE               	movwf	?_ReadIO+1
  3949  0FFF  0008               	return
  3950  1000                     __end_of_ReadIO:	
  3951                           
  3952                           	psect	text17
  3953  0D47                     __ptext17:	
  3954 ;; *************** function _ReadIOPin *****************
  3955 ;; Defined at:
  3956 ;;		line 137 in file "IOCycle.c"
  3957 ;; Parameters:    Size  Location     Type
  3958 ;;  Pin             1    wreg     unsigned char 
  3959 ;; Auto vars:     Size  Location     Type
  3960 ;;  Pin             1    4[COMMON] unsigned char 
  3961 ;;  mask            1    5[COMMON] unsigned char 
  3962 ;;  _tempb          1    3[COMMON] unsigned char 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  1    wreg      unsigned char 
  3965 ;; Registers used:
  3966 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3972 ;;      Params:         0       0       0       0       0       0       0
  3973 ;;      Locals:         3       0       0       0       0       0       0
  3974 ;;      Temps:          1       0       0       0       0       0       0
  3975 ;;      Totals:         4       0       0       0       0       0       0
  3976 ;;Total ram usage:        4 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    1
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_ReadIO
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _ReadIOPin
  3988  0D47                     _ReadIOPin:	
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _ReadIOPin: [wreg-fsr0h+status,2+status,0+pclath]
  3992                           ;ReadIOPin@Pin stored from wreg
  3993  0D47  00F4               	movwf	ReadIOPin@Pin
  3994                           
  3995                           ;IOCycle.c: 139: unsigned char _tempb;
  3996                           ;IOCycle.c: 140: unsigned char mask = IOMASK[Pin];
  3997  0D48  0874               	movf	ReadIOPin@Pin,w
  3998  0D49  3E0B               	addlw	low (_IOMASK| (0+32768))
  3999  0D4A  0084               	movwf	4
  4000  0D4B  3088               	movlw	high (_IOMASK| (0+32768))
  4001  0D4C  1803               	skipnc
  4002  0D4D  3E01               	addlw	1
  4003  0D4E  0085               	movwf	5
  4004  0D4F  0800               	movf	0,w	;code access
  4005  0D50  00F2               	movwf	??_ReadIOPin
  4006  0D51  0872               	movf	??_ReadIOPin,w
  4007  0D52  00F5               	movwf	ReadIOPin@mask
  4008                           
  4009                           ;IOCycle.c: 141: if(Pin<5)
  4010  0D53  3005               	movlw	5
  4011  0D54  0274               	subwf	ReadIOPin@Pin,w
  4012  0D55  1803               	skipnc
  4013  0D56  2D5A               	goto	l2639
  4014                           
  4015                           ;IOCycle.c: 142: _tempb = (unsigned char) (PORTB & mask);
  4016  0D57  0020               	movlb	0	; select bank0
  4017  0D58  080D               	movf	13,w	;volatile
  4018  0D59  2D5C               	goto	L11
  4019  0D5A                     l2639:	
  4020                           
  4021                           ;IOCycle.c: 143: else
  4022                           ;IOCycle.c: 144: _tempb = (unsigned char) (PORTA & mask);
  4023  0D5A  0020               	movlb	0	; select bank0
  4024  0D5B  080C               	movf	12,w	;volatile
  4025  0D5C                     L11:	
  4026  0D5C  0575               	andwf	ReadIOPin@mask,w
  4027  0D5D  00F2               	movwf	??_ReadIOPin
  4028  0D5E  0872               	movf	??_ReadIOPin,w
  4029  0D5F  00F3               	movwf	ReadIOPin@_tempb
  4030                           
  4031                           ;IOCycle.c: 145: if(_tempb==0)
  4032  0D60  0873               	movf	ReadIOPin@_tempb,w
  4033  0D61  1D03               	btfss	3,2
  4034  0D62  2D65               	goto	l2645
  4035                           
  4036                           ;IOCycle.c: 146: return 0;
  4037  0D63  3000               	movlw	0
  4038  0D64  0008               	return
  4039  0D65                     l2645:	
  4040                           
  4041                           ;IOCycle.c: 147: return 1;
  4042  0D65  3001               	movlw	1
  4043  0D66  0008               	return
  4044  0D67                     __end_of_ReadIOPin:	
  4045                           
  4046                           	psect	text18
  4047  0778                     __ptext18:	
  4048 ;; *************** function _ReadA2D *****************
  4049 ;; Defined at:
  4050 ;;		line 619 in file "main.c"
  4051 ;; Parameters:    Size  Location     Type
  4052 ;;  channel         1    wreg     unsigned char 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  channel         1    0[BANK0 ] unsigned char 
  4055 ;;  value           2    1[BANK0 ] struct .
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  2    2[COMMON] unsigned short 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4065 ;;      Params:         2       0       0       0       0       0       0
  4066 ;;      Locals:         0       3       0       0       0       0       0
  4067 ;;      Temps:          1       0       0       0       0       0       0
  4068 ;;      Totals:         3       3       0       0       0       0       0
  4069 ;;Total ram usage:        6 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    1
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_ReadIO
  4076 ;;		_ReadVRef
  4077 ;;		_ReadTSensor
  4078 ;; This function uses a non-reentrant model
  4079 ;;
  4080                           
  4081                           
  4082                           ;psect for function _ReadA2D
  4083  0778                     _ReadA2D:	
  4084                           
  4085                           ;incstack = 0
  4086                           ; Regs used in _ReadA2D: [wreg+status,2+status,0]
  4087                           ;ReadA2D@channel stored from wreg
  4088  0778  0020               	movlb	0	; select bank0
  4089  0779  00CA               	movwf	ReadA2D@channel
  4090                           
  4091                           ;main.c: 622: ByteShortUnion value;
  4092                           ;main.c: 623: ADIE=0;
  4093  077A  0021               	movlb	1	; select bank1
  4094  077B  1311               	bcf	17,6	;volatile
  4095                           
  4096                           ;main.c: 624: ADIF=0;
  4097  077C  0020               	movlb	0	; select bank0
  4098  077D  1311               	bcf	17,6	;volatile
  4099                           
  4100                           ;main.c: 625: ADON=1;
  4101  077E  0021               	movlb	1	; select bank1
  4102  077F  141D               	bsf	29,0	;volatile
  4103                           
  4104                           ;main.c: 626: ADCON0bits.ADON=1;
  4105  0780  141D               	bsf	29,0	;volatile
  4106                           
  4107                           ;main.c: 627: ADCON0bits.CHS=channel;
  4108  0781  0020               	movlb	0	; select bank0
  4109  0782  084A               	movf	ReadA2D@channel,w
  4110  0783  00F4               	movwf	??_ReadA2D
  4111  0784  0DF4               	rlf	??_ReadA2D,f
  4112  0785  0DF4               	rlf	??_ReadA2D,f
  4113  0786  0021               	movlb	1	; select bank1
  4114  0787  081D               	movf	29,w	;volatile
  4115  0788  0674               	xorwf	??_ReadA2D,w
  4116  0789  3983               	andlw	-125
  4117  078A  0674               	xorwf	??_ReadA2D,w
  4118  078B  009D               	movwf	29	;volatile
  4119                           
  4120                           ;main.c: 628: _delay((unsigned long)((1)*(32000000/4000.0)));
  4121  078C  300B               	movlw	11
  4122  078D  00F4               	movwf	??_ReadA2D
  4123  078E  3062               	movlw	98
  4124  078F                     u4837:	
  4125  078F  0B89               	decfsz	9,f
  4126  0790  2F8F               	goto	u4837
  4127  0791  0BF4               	decfsz	??_ReadA2D,f
  4128  0792  2F8F               	goto	u4837
  4129  0793  3200               	nop2
  4130                           
  4131                           ;main.c: 629: ADCON0bits.ADGO=1;
  4132  0794  0021               	movlb	1	; select bank1
  4133  0795  149D               	bsf	29,1	;volatile
  4134  0796                     l455:	
  4135                           ;main.c: 630: while(ADCON0bits.ADGO==1);
  4136                           
  4137  0796  189D               	btfsc	29,1	;volatile
  4138  0797  2F96               	goto	l455
  4139                           
  4140                           ;main.c: 631: _delay((unsigned long)((1)*(32000000/4000.0)));
  4141  0798  300B               	movlw	11
  4142  0799  00F4               	movwf	??_ReadA2D
  4143  079A  3062               	movlw	98
  4144  079B                     u4847:	
  4145  079B  0B89               	decfsz	9,f
  4146  079C  2F9B               	goto	u4847
  4147  079D  0BF4               	decfsz	??_ReadA2D,f
  4148  079E  2F9B               	goto	u4847
  4149  079F  3200               	nop2
  4150                           
  4151                           ;main.c: 632: ADCON0bits.ADGO=1;
  4152  07A0  0021               	movlb	1	; select bank1
  4153  07A1  149D               	bsf	29,1	;volatile
  4154  07A2                     l458:	
  4155                           ;main.c: 633: while(ADCON0bits.ADGO==1);
  4156                           
  4157  07A2  189D               	btfsc	29,1	;volatile
  4158  07A3  2FA2               	goto	l458
  4159                           
  4160                           ;main.c: 634: value.BYTE[1]=ADRESH;
  4161  07A4  081C               	movf	28,w	;volatile
  4162  07A5  00F4               	movwf	??_ReadA2D
  4163  07A6  0874               	movf	??_ReadA2D,w
  4164  07A7  0020               	movlb	0	; select bank0
  4165  07A8  00CC               	movwf	ReadA2D@value+1
  4166                           
  4167                           ;main.c: 635: value.BYTE[0]=ADRESL;
  4168  07A9  0021               	movlb	1	; select bank1
  4169  07AA  081B               	movf	27,w	;volatile
  4170  07AB  00F4               	movwf	??_ReadA2D
  4171  07AC  0874               	movf	??_ReadA2D,w
  4172  07AD  0020               	movlb	0	; select bank0
  4173  07AE  00CB               	movwf	ReadA2D@value
  4174                           
  4175                           ;main.c: 636: return value.USHORT;
  4176  07AF  084C               	movf	ReadA2D@value+1,w
  4177  07B0  00F3               	movwf	?_ReadA2D+1
  4178  07B1  084B               	movf	ReadA2D@value,w
  4179  07B2  00F2               	movwf	?_ReadA2D
  4180  07B3  0008               	return
  4181  07B4                     __end_of_ReadA2D:	
  4182                           
  4183                           	psect	text19
  4184  0E47                     __ptext19:	
  4185 ;; *************** function _ReadAllCoils *****************
  4186 ;; Defined at:
  4187 ;;		line 1368 in file "main.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  stemp           2    2[BANK0 ] unsigned short 
  4192 ;;  loop            1    4[BANK0 ] unsigned char 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  2    5[COMMON] unsigned short 
  4195 ;; Registers used:
  4196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4202 ;;      Params:         2       0       0       0       0       0       0
  4203 ;;      Locals:         0       3       0       0       0       0       0
  4204 ;;      Temps:          0       2       0       0       0       0       0
  4205 ;;      Totals:         2       5       0       0       0       0       0
  4206 ;;Total ram usage:        7 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    2
  4209 ;; This function calls:
  4210 ;;		_GetInputPin
  4211 ;; This function is called by:
  4212 ;;		_ReadCurrentRegister
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _ReadAllCoils
  4218  0E47                     _ReadAllCoils:	
  4219                           
  4220                           ;main.c: 1370: unsigned short stemp=0;
  4221                           
  4222                           ;incstack = 0
  4223                           ; Regs used in _ReadAllCoils: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4224  0E47  0020               	movlb	0	; select bank0
  4225  0E48  01CC               	clrf	ReadAllCoils@stemp
  4226  0E49  01CD               	clrf	ReadAllCoils@stemp+1
  4227                           
  4228                           ;main.c: 1371: unsigned char loop;
  4229                           ;main.c: 1373: for(loop=0;loop<10;loop++)
  4230  0E4A  01CE               	clrf	ReadAllCoils@loop
  4231  0E4B  300A               	movlw	10
  4232  0E4C  024E               	subwf	ReadAllCoils@loop,w
  4233  0E4D  1803               	btfsc	3,0
  4234  0E4E  2E6B               	goto	l4203
  4235  0E4F                     l4195:	
  4236                           
  4237                           ;main.c: 1374: {
  4238                           ;main.c: 1375: stemp *=2;
  4239  0E4F  3001               	movlw	1
  4240  0E50                     u4095:	
  4241  0E50  35CC               	lslf	ReadAllCoils@stemp,f
  4242  0E51  0DCD               	rlf	ReadAllCoils@stemp+1,f
  4243  0E52  0B89               	decfsz	9,f
  4244  0E53  2E50               	goto	u4095
  4245                           
  4246                           ;main.c: 1376: stemp |= (unsigned short) GetInputPin( (unsigned char) ((10 -1)-loop));
  4247  0E54  084E               	movf	ReadAllCoils@loop,w
  4248  0E55  3E01               	addlw	1
  4249  0E56  3AFF               	xorlw	255
  4250  0E57  3E01               	addlw	1
  4251  0E58  3E0A               	addlw	10
  4252  0E59  318D  2528  318E   	fcall	_GetInputPin
  4253  0E5C  0020               	movlb	0	; select bank0
  4254  0E5D  00CA               	movwf	??_ReadAllCoils
  4255  0E5E  01CB               	clrf	??_ReadAllCoils+1
  4256  0E5F  084A               	movf	??_ReadAllCoils,w
  4257  0E60  04CC               	iorwf	ReadAllCoils@stemp,f
  4258  0E61  084B               	movf	??_ReadAllCoils+1,w
  4259  0E62  04CD               	iorwf	ReadAllCoils@stemp+1,f
  4260  0E63  3001               	movlw	1
  4261  0E64  00CA               	movwf	??_ReadAllCoils
  4262  0E65  084A               	movf	??_ReadAllCoils,w
  4263  0E66  07CE               	addwf	ReadAllCoils@loop,f
  4264  0E67  300A               	movlw	10
  4265  0E68  024E               	subwf	ReadAllCoils@loop,w
  4266  0E69  1C03               	skipc
  4267  0E6A  2E4F               	goto	l4195
  4268  0E6B                     l4203:	
  4269                           
  4270                           ;main.c: 1377: }
  4271                           ;main.c: 1378: return stemp;
  4272  0E6B  084D               	movf	ReadAllCoils@stemp+1,w
  4273  0E6C  00F6               	movwf	?_ReadAllCoils+1
  4274  0E6D  084C               	movf	ReadAllCoils@stemp,w
  4275  0E6E  00F5               	movwf	?_ReadAllCoils
  4276  0E6F  0008               	return
  4277  0E70                     __end_of_ReadAllCoils:	
  4278                           
  4279                           	psect	text20
  4280  0D28                     __ptext20:	
  4281 ;; *************** function _GetInputPin *****************
  4282 ;; Defined at:
  4283 ;;		line 1356 in file "main.c"
  4284 ;; Parameters:    Size  Location     Type
  4285 ;;  thePin          1    wreg     unsigned char 
  4286 ;; Auto vars:     Size  Location     Type
  4287 ;;  thePin          1    4[COMMON] unsigned char 
  4288 ;;  _tmp            1    3[COMMON] unsigned char 
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  1    wreg      unsigned char 
  4291 ;; Registers used:
  4292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4298 ;;      Params:         0       0       0       0       0       0       0
  4299 ;;      Locals:         2       0       0       0       0       0       0
  4300 ;;      Temps:          1       0       0       0       0       0       0
  4301 ;;      Totals:         3       0       0       0       0       0       0
  4302 ;;Total ram usage:        3 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; Hardware stack levels required when called:    1
  4305 ;; This function calls:
  4306 ;;		Nothing
  4307 ;; This function is called by:
  4308 ;;		_ReadAllCoils
  4309 ;;		_ReadInputStatus
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _GetInputPin
  4315  0D28                     _GetInputPin:	
  4316                           
  4317                           ;incstack = 0
  4318                           ; Regs used in _GetInputPin: [wreg-fsr0h+status,2+status,0+pclath]
  4319                           ;GetInputPin@thePin stored from wreg
  4320  0D28  00F4               	movwf	GetInputPin@thePin
  4321                           
  4322                           ;main.c: 1358: unsigned char _tmp;
  4323                           ;main.c: 1360: if(thePin < 5)
  4324  0D29  3005               	movlw	5
  4325  0D2A  0274               	subwf	GetInputPin@thePin,w
  4326  0D2B  1803               	skipnc
  4327  0D2C  2D30               	goto	l2819
  4328                           
  4329                           ;main.c: 1361: _tmp = PORTB;
  4330  0D2D  0020               	movlb	0	; select bank0
  4331  0D2E  080D               	movf	13,w	;volatile
  4332  0D2F  2D32               	goto	L12
  4333  0D30                     l2819:	
  4334                           
  4335                           ;main.c: 1362: else
  4336                           ;main.c: 1363: _tmp = PORTA;
  4337  0D30  0020               	movlb	0	; select bank0
  4338  0D31  080C               	movf	12,w	;volatile
  4339  0D32                     L12:	
  4340  0D32  00F2               	movwf	??_GetInputPin
  4341  0D33  0872               	movf	??_GetInputPin,w
  4342  0D34  00F3               	movwf	GetInputPin@_tmp
  4343                           
  4344                           ;main.c: 1364: _tmp &= IOMASK[thePin];
  4345  0D35  0874               	movf	GetInputPin@thePin,w
  4346  0D36  3E0B               	addlw	low (_IOMASK| (0+32768))
  4347  0D37  0084               	movwf	4
  4348  0D38  3088               	movlw	high (_IOMASK| (0+32768))
  4349  0D39  1803               	skipnc
  4350  0D3A  3E01               	addlw	1
  4351  0D3B  0085               	movwf	5
  4352  0D3C  0800               	movf	0,w	;code access
  4353  0D3D  00F2               	movwf	??_GetInputPin
  4354  0D3E  0872               	movf	??_GetInputPin,w
  4355  0D3F  05F3               	andwf	GetInputPin@_tmp,f
  4356                           
  4357                           ;main.c: 1365: return ( (unsigned char) (_tmp==0 ?0 : 1));
  4358  0D40  0873               	movf	GetInputPin@_tmp,w
  4359  0D41  1903               	btfsc	3,2
  4360  0D42  2D45               	goto	u2150
  4361  0D43  3001               	movlw	1
  4362  0D44  0008               	return
  4363  0D45                     u2150:	
  4364  0D45  3000               	movlw	0
  4365  0D46  0008               	return
  4366  0D47                     __end_of_GetInputPin:	
  4367                           
  4368                           	psect	text21
  4369  0C11                     __ptext21:	
  4370 ;; *************** function _MultipleRegister *****************
  4371 ;; Defined at:
  4372 ;;		line 1348 in file "main.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;  _Address        1    wreg     unsigned char 
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  _Address        1    3[COMMON] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      unsigned char 
  4379 ;; Registers used:
  4380 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4386 ;;      Params:         0       0       0       0       0       0       0
  4387 ;;      Locals:         1       0       0       0       0       0       0
  4388 ;;      Temps:          1       0       0       0       0       0       0
  4389 ;;      Totals:         2       0       0       0       0       0       0
  4390 ;;Total ram usage:        2 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; Hardware stack levels required when called:    1
  4393 ;; This function calls:
  4394 ;;		Nothing
  4395 ;; This function is called by:
  4396 ;;		_ReadCurrentRegister
  4397 ;; This function uses a non-reentrant model
  4398 ;;
  4399                           
  4400                           
  4401                           ;psect for function _MultipleRegister
  4402  0C11                     _MultipleRegister:	
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _MultipleRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
  4406                           ;MultipleRegister@_Address stored from wreg
  4407  0C11  00F3               	movwf	MultipleRegister@_Address
  4408                           
  4409                           ;main.c: 1350: if((Setting.IOConfig[_Address] & (12)) == 12)
  4410  0C12  0873               	movf	MultipleRegister@_Address,w
  4411  0C13  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  4412  0C14  0086               	movwf	6
  4413  0C15  0187               	clrf	7
  4414  0C16  300C               	movlw	12
  4415  0C17  0501               	andwf	1,w
  4416  0C18  00F2               	movwf	??_MultipleRegister
  4417  0C19  300C               	movlw	12
  4418  0C1A  0672               	xorwf	??_MultipleRegister,w
  4419  0C1B  1D03               	btfss	3,2
  4420  0C1C  2C1F               	goto	l3047
  4421                           
  4422                           ;main.c: 1351: return 1;
  4423  0C1D  3001               	movlw	1
  4424  0C1E  0008               	return
  4425  0C1F                     l3047:	
  4426                           
  4427                           ;main.c: 1352: return 0;
  4428  0C1F  3000               	movlw	0
  4429  0C20  0008               	return
  4430  0C21                     __end_of_MultipleRegister:	
  4431                           
  4432                           	psect	text22
  4433  017B                     __ptext22:	
  4434 ;; *************** function _PresetSingleRegister *****************
  4435 ;; Defined at:
  4436 ;;		line 1538 in file "main.c"
  4437 ;; Parameters:    Size  Location     Type
  4438 ;;		None
  4439 ;; Auto vars:     Size  Location     Type
  4440 ;;  temp            1   14[BANK0 ] unsigned char 
  4441 ;;  oldConfig       1   13[BANK0 ] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4451 ;;      Params:         0       0       0       0       0       0       0
  4452 ;;      Locals:         0       2       0       0       0       0       0
  4453 ;;      Temps:          0       1       0       0       0       0       0
  4454 ;;      Totals:         0       3       0       0       0       0       0
  4455 ;;Total ram usage:        3 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    5
  4458 ;; This function calls:
  4459 ;;		_SaveSetting
  4460 ;;		_SendFrameError
  4461 ;;		_SendPresetFrame
  4462 ;;		_SetIOConfig
  4463 ;;		_SetTimer1Clock
  4464 ;;		_WriteAllCoils
  4465 ;;		___bmul
  4466 ;; This function is called by:
  4467 ;;		_ExecuteCommand
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           
  4472                           ;psect for function _PresetSingleRegister
  4473  017B                     _PresetSingleRegister:	
  4474                           
  4475                           ;main.c: 1540: unsigned char oldConfig;
  4476                           ;main.c: 1541: unsigned char temp;
  4477                           ;main.c: 1543: if(ModbusAddress == 0x1002)
  4478                           
  4479                           ;incstack = 0
  4480                           ; Regs used in _PresetSingleRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4481  017B  3002               	movlw	2
  4482  017C  0020               	movlb	0	; select bank0
  4483  017D  0624               	xorwf	_ModbusAddress,w
  4484  017E  3010               	movlw	16
  4485  017F  1903               	skipnz
  4486  0180  0625               	xorwf	_ModbusAddress+1,w
  4487  0181  1D03               	btfss	3,2
  4488  0182  2986               	goto	l4317
  4489                           
  4490                           ;main.c: 1544: {
  4491                           ;main.c: 1545: WriteAllCoils();
  4492  0183  318D  25AE         	fcall	_WriteAllCoils
  4493                           
  4494                           ;main.c: 1546: }
  4495  0185  0008               	return
  4496  0186                     l4317:	
  4497                           
  4498                           ;main.c: 1547: else if(ModbusAddress == 0x1ff)
  4499  0186  0020               	movlb	0	; select bank0
  4500  0187  0A24               	incf	_ModbusAddress,w
  4501  0188  1D03               	skipz
  4502  0189  299C               	goto	l4323
  4503  018A  0325               	decf	_ModbusAddress+1,w
  4504  018B  1D03               	btfss	3,2
  4505  018C  299C               	goto	l4323
  4506                           
  4507                           ;main.c: 1548: {
  4508                           ;main.c: 1549: EnableConfigChange= (ModbusData == 0x5678);
  4509  018D  3078               	movlw	120
  4510  018E  0622               	xorwf	_ModbusData,w
  4511  018F  3056               	movlw	86
  4512  0190  1903               	skipnz
  4513  0191  0623               	xorwf	_ModbusData+1,w
  4514  0192  1D03               	btfss	3,2
  4515  0193  2997               	goto	u4370
  4516  0194  0020               	movlb	0	; select bank0
  4517  0195  14EC               	bsf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4518  0196  2999               	goto	l4321
  4519  0197                     u4370:	
  4520  0197  0020               	movlb	0	; select bank0
  4521  0198  10EC               	bcf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4522  0199                     l4321:	
  4523                           
  4524                           ;main.c: 1550: SendPresetFrame();
  4525  0199  318C  24A3         	fcall	_SendPresetFrame
  4526                           
  4527                           ;main.c: 1551: }
  4528  019B  0008               	return
  4529  019C                     l4323:	
  4530                           
  4531                           ;main.c: 1552: else if(ModbusAddress == 0xAA55)
  4532  019C  3055               	movlw	85
  4533  019D  0020               	movlb	0	; select bank0
  4534  019E  0624               	xorwf	_ModbusAddress,w
  4535  019F  30AA               	movlw	170
  4536  01A0  1903               	skipnz
  4537  01A1  0625               	xorwf	_ModbusAddress+1,w
  4538  01A2  1D03               	btfss	3,2
  4539  01A3  29B6               	goto	l4335
  4540                           
  4541                           ;main.c: 1553: {
  4542                           ;main.c: 1555: if(ModbusData == 0x1234)
  4543  01A4  3034               	movlw	52
  4544  01A5  0622               	xorwf	_ModbusData,w
  4545  01A6  3012               	movlw	18
  4546  01A7  1903               	skipnz
  4547  01A8  0623               	xorwf	_ModbusData+1,w
  4548  01A9  1D03               	btfss	3,2
  4549  01AA  29B2               	goto	l4333
  4550                           
  4551                           ;main.c: 1556: {
  4552                           ;main.c: 1557: ForceReset=1;
  4553  01AB  146C               	bsf	_ForceReset/(0+8),_ForceReset& (0+7)
  4554                           
  4555                           ;main.c: 1558: WDTCON = 0b00010001;
  4556  01AC  3011               	movlw	17
  4557  01AD  0021               	movlb	1	; select bank1
  4558  01AE  0097               	movwf	23	;volatile
  4559                           
  4560                           ;main.c: 1559: SendPresetFrame();
  4561  01AF  318C  24A3         	fcall	_SendPresetFrame
  4562                           
  4563                           ;main.c: 1562: }
  4564  01B1  0008               	return
  4565  01B2                     l4333:	
  4566                           
  4567                           ;main.c: 1563: else
  4568                           ;main.c: 1564: SendFrameError(2);
  4569  01B2  3002               	movlw	2
  4570  01B3  318C  248D         	fcall	_SendFrameError
  4571                           
  4572                           ;main.c: 1565: }
  4573  01B5  0008               	return
  4574  01B6                     l4335:	
  4575                           
  4576                           ;main.c: 1566: else if((ModbusAddress >=0x100) && (ModbusAddress <= 0x109))
  4577  01B6  3001               	movlw	1
  4578  01B7  0020               	movlb	0	; select bank0
  4579  01B8  0225               	subwf	_ModbusAddress+1,w
  4580  01B9  3000               	movlw	0
  4581  01BA  1903               	skipnz
  4582  01BB  0224               	subwf	_ModbusAddress,w
  4583  01BC  1C03               	skipc
  4584  01BD  2A00               	goto	l4365
  4585  01BE  3001               	movlw	1
  4586  01BF  0225               	subwf	_ModbusAddress+1,w
  4587  01C0  300A               	movlw	10
  4588  01C1  1903               	skipnz
  4589  01C2  0224               	subwf	_ModbusAddress,w
  4590  01C3  1803               	skipnc
  4591  01C4  2A00               	goto	l4365
  4592                           
  4593                           ;main.c: 1567: {
  4594                           ;main.c: 1568: if(EnableConfigChange)
  4595  01C5  1CEC               	btfss	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4596  01C6  29FD               	goto	l4363
  4597                           
  4598                           ;main.c: 1569: {
  4599                           ;main.c: 1570: temp = ModbusAddress - 0x100;
  4600  01C7  0824               	movf	_ModbusAddress,w
  4601  01C8  00D6               	movwf	??_PresetSingleRegister
  4602  01C9  0856               	movf	??_PresetSingleRegister,w
  4603  01CA  00D8               	movwf	PresetSingleRegister@temp
  4604                           
  4605                           ;main.c: 1571: BadIO=0;
  4606  01CB  01BE               	clrf	_BadIO
  4607                           
  4608                           ;main.c: 1572: oldConfig=Setting.IOConfig[temp];
  4609  01CC  0858               	movf	PresetSingleRegister@temp,w
  4610  01CD  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  4611  01CE  0086               	movwf	6
  4612  01CF  0187               	clrf	7
  4613  01D0  0801               	movf	1,w
  4614  01D1  00D6               	movwf	??_PresetSingleRegister
  4615  01D2  0856               	movf	??_PresetSingleRegister,w
  4616  01D3  00D7               	movwf	PresetSingleRegister@oldConfig
  4617                           
  4618                           ;main.c: 1573: Setting.IOConfig[temp]=ModbusData;
  4619  01D4  0822               	movf	_ModbusData,w
  4620  01D5  00D6               	movwf	??_PresetSingleRegister
  4621  01D6  0858               	movf	PresetSingleRegister@temp,w
  4622  01D7  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  4623  01D8  0086               	movwf	6
  4624  01D9  0187               	clrf	7
  4625  01DA  0856               	movf	??_PresetSingleRegister,w
  4626  01DB  0081               	movwf	1
  4627                           
  4628                           ;main.c: 1574: SetIOConfig(temp);
  4629  01DC  0858               	movf	PresetSingleRegister@temp,w
  4630  01DD  3183  23EE  3181   	fcall	_SetIOConfig
  4631                           
  4632                           ;main.c: 1575: if(BadIO)
  4633  01E0  0020               	movlb	0	; select bank0
  4634  01E1  083E               	movf	_BadIO,w
  4635  01E2  1903               	btfsc	3,2
  4636  01E3  29F5               	goto	l4359
  4637                           
  4638                           ;main.c: 1576: {
  4639                           ;main.c: 1577: Setting.IOConfig[temp]=oldConfig;
  4640  01E4  0857               	movf	PresetSingleRegister@oldConfig,w
  4641  01E5  00D6               	movwf	??_PresetSingleRegister
  4642  01E6  0858               	movf	PresetSingleRegister@temp,w
  4643  01E7  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  4644  01E8  0086               	movwf	6
  4645  01E9  0187               	clrf	7
  4646  01EA  0856               	movf	??_PresetSingleRegister,w
  4647  01EB  0081               	movwf	1
  4648                           
  4649                           ;main.c: 1578: SetIOConfig(temp);
  4650  01EC  0858               	movf	PresetSingleRegister@temp,w
  4651  01ED  3183  23EE  3181   	fcall	_SetIOConfig
  4652                           
  4653                           ;main.c: 1579: SendFrameError(2);
  4654  01F0  3002               	movlw	2
  4655  01F1  318C  248D  3181   	fcall	_SendFrameError
  4656                           
  4657                           ;main.c: 1580: }
  4658  01F4  29FA               	goto	l4361
  4659  01F5                     l4359:	
  4660                           
  4661                           ;main.c: 1581: else
  4662                           ;main.c: 1582: {
  4663                           ;main.c: 1583: SendPresetFrame();
  4664  01F5  318C  24A3  3181   	fcall	_SendPresetFrame
  4665                           
  4666                           ;main.c: 1584: SaveSetting();
  4667  01F8  318D  2509         	fcall	_SaveSetting
  4668  01FA                     l4361:	
  4669                           
  4670                           ;main.c: 1585: }
  4671                           ;main.c: 1586: EnableConfigChange=1;
  4672  01FA  0020               	movlb	0	; select bank0
  4673  01FB  14EC               	bsf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4674                           
  4675                           ;main.c: 1587: }
  4676  01FC  0008               	return
  4677  01FD                     l4363:	
  4678                           
  4679                           ;main.c: 1588: else
  4680                           ;main.c: 1589: SendPresetFrame();
  4681  01FD  318C  24A3         	fcall	_SendPresetFrame
  4682                           
  4683                           ;main.c: 1590: }
  4684  01FF  0008               	return
  4685  0200                     l4365:	
  4686                           
  4687                           ;main.c: 1591: else if(ModbusAddress <10)
  4688  0200  3000               	movlw	0
  4689  0201  0020               	movlb	0	; select bank0
  4690  0202  0225               	subwf	_ModbusAddress+1,w
  4691  0203  300A               	movlw	10
  4692  0204  1903               	skipnz
  4693  0205  0224               	subwf	_ModbusAddress,w
  4694  0206  1803               	skipnc
  4695  0207  2A7F               	goto	l4383
  4696                           
  4697                           ;main.c: 1592: {
  4698                           ;main.c: 1593: oldConfig= Setting.IOConfig[ModbusAddress];
  4699  0208  0824               	movf	_ModbusAddress,w
  4700  0209  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  4701  020A  0086               	movwf	6
  4702  020B  0187               	clrf	7
  4703  020C  0801               	movf	1,w
  4704  020D  00D6               	movwf	??_PresetSingleRegister
  4705  020E  0856               	movf	??_PresetSingleRegister,w
  4706  020F  00D7               	movwf	PresetSingleRegister@oldConfig
  4707                           
  4708                           ;main.c: 1594: if((oldConfig&12)==12)
  4709  0210  300C               	movlw	12
  4710  0211  0557               	andwf	PresetSingleRegister@oldConfig,w
  4711  0212  00D6               	movwf	??_PresetSingleRegister
  4712  0213  300C               	movlw	12
  4713  0214  0656               	xorwf	??_PresetSingleRegister,w
  4714  0215  1D03               	btfss	3,2
  4715  0216  2A7B               	goto	l4381
  4716                           
  4717                           ;main.c: 1595: {
  4718                           ;main.c: 1597: IOSensorData[ModbusAddress].BYTE[0]=0;
  4719  0217  3006               	movlw	6
  4720  0218  00D6               	movwf	??_PresetSingleRegister
  4721  0219  0856               	movf	??_PresetSingleRegister,w
  4722  021A  00F2               	movwf	___bmul@multiplicand
  4723  021B  0824               	movf	_ModbusAddress,w
  4724  021C  318C  2431  3181   	fcall	___bmul
  4725  021F  3EA0               	addlw	160
  4726  0220  0086               	movwf	6
  4727  0221  3001               	movlw	1	; select bank3/4
  4728  0222  0087               	movwf	7
  4729  0223  0181               	clrf	1
  4730                           
  4731                           ;main.c: 1598: IOSensorData[ModbusAddress].BYTE[1]=0;
  4732  0224  3006               	movlw	6
  4733  0225  0020               	movlb	0	; select bank0
  4734  0226  00D6               	movwf	??_PresetSingleRegister
  4735  0227  0856               	movf	??_PresetSingleRegister,w
  4736  0228  00F2               	movwf	___bmul@multiplicand
  4737  0229  0824               	movf	_ModbusAddress,w
  4738  022A  318C  2431  3181   	fcall	___bmul
  4739  022D  3E01               	addlw	1
  4740  022E  3EA0               	addlw	160
  4741  022F  0086               	movwf	6
  4742  0230  3001               	movlw	1	; select bank3/4
  4743  0231  0087               	movwf	7
  4744  0232  0181               	clrf	1
  4745                           
  4746                           ;main.c: 1599: IOSensorData[ModbusAddress].BYTE[2]=0;
  4747  0233  3006               	movlw	6
  4748  0234  0020               	movlb	0	; select bank0
  4749  0235  00D6               	movwf	??_PresetSingleRegister
  4750  0236  0856               	movf	??_PresetSingleRegister,w
  4751  0237  00F2               	movwf	___bmul@multiplicand
  4752  0238  0824               	movf	_ModbusAddress,w
  4753  0239  318C  2431  3181   	fcall	___bmul
  4754  023C  3E02               	addlw	2
  4755  023D  3EA0               	addlw	160
  4756  023E  0086               	movwf	6
  4757  023F  3001               	movlw	1	; select bank3/4
  4758  0240  0087               	movwf	7
  4759  0241  0181               	clrf	1
  4760                           
  4761                           ;main.c: 1600: IOSensorData[ModbusAddress].BYTE[3]=0;
  4762  0242  3006               	movlw	6
  4763  0243  0020               	movlb	0	; select bank0
  4764  0244  00D6               	movwf	??_PresetSingleRegister
  4765  0245  0856               	movf	??_PresetSingleRegister,w
  4766  0246  00F2               	movwf	___bmul@multiplicand
  4767  0247  0824               	movf	_ModbusAddress,w
  4768  0248  318C  2431  3181   	fcall	___bmul
  4769  024B  3E03               	addlw	3
  4770  024C  3EA0               	addlw	160
  4771  024D  0086               	movwf	6
  4772  024E  3001               	movlw	1	; select bank3/4
  4773  024F  0087               	movwf	7
  4774  0250  0181               	clrf	1
  4775                           
  4776                           ;main.c: 1601: IOSensorData[ModbusAddress].BYTE[4]=0;
  4777  0251  3006               	movlw	6
  4778  0252  0020               	movlb	0	; select bank0
  4779  0253  00D6               	movwf	??_PresetSingleRegister
  4780  0254  0856               	movf	??_PresetSingleRegister,w
  4781  0255  00F2               	movwf	___bmul@multiplicand
  4782  0256  0824               	movf	_ModbusAddress,w
  4783  0257  318C  2431  3181   	fcall	___bmul
  4784  025A  3E04               	addlw	4
  4785  025B  3EA0               	addlw	160
  4786  025C  0086               	movwf	6
  4787  025D  3001               	movlw	1	; select bank3/4
  4788  025E  0087               	movwf	7
  4789  025F  0181               	clrf	1
  4790                           
  4791                           ;main.c: 1602: IOSensorData[ModbusAddress].BYTE[5]=0;
  4792  0260  3006               	movlw	6
  4793  0261  0020               	movlb	0	; select bank0
  4794  0262  00D6               	movwf	??_PresetSingleRegister
  4795  0263  0856               	movf	??_PresetSingleRegister,w
  4796  0264  00F2               	movwf	___bmul@multiplicand
  4797  0265  0824               	movf	_ModbusAddress,w
  4798  0266  318C  2431  3181   	fcall	___bmul
  4799  0269  3E05               	addlw	5
  4800  026A  3EA0               	addlw	160
  4801  026B  0086               	movwf	6
  4802  026C  3001               	movlw	1	; select bank3/4
  4803  026D  0087               	movwf	7
  4804  026E  0181               	clrf	1
  4805                           
  4806                           ;main.c: 1603: TimeCapture1Count=0;
  4807  026F  0020               	movlb	0	; select bank0
  4808  0270  01AE               	clrf	_TimeCapture1Count	;volatile
  4809  0271  01AF               	clrf	_TimeCapture1Count+1	;volatile
  4810                           
  4811                           ;main.c: 1604: TimeCapture2Count=0;
  4812  0272  01AC               	clrf	_TimeCapture2Count	;volatile
  4813  0273  01AD               	clrf	_TimeCapture2Count+1	;volatile
  4814                           
  4815                           ;main.c: 1605: TimeCapture3Count=0;
  4816  0274  01AA               	clrf	_TimeCapture3Count	;volatile
  4817  0275  01AB               	clrf	_TimeCapture3Count+1	;volatile
  4818                           
  4819                           ;main.c: 1606: TimeCapture4Count=0;
  4820  0276  01A8               	clrf	_TimeCapture4Count	;volatile
  4821  0277  01A9               	clrf	_TimeCapture4Count+1	;volatile
  4822                           
  4823                           ;main.c: 1608: SendPresetFrame();
  4824  0278  318C  24A3         	fcall	_SendPresetFrame
  4825                           
  4826                           ;main.c: 1609: }
  4827  027A  0008               	return
  4828  027B                     l4381:	
  4829                           
  4830                           ;main.c: 1610: else
  4831                           ;main.c: 1611: SendFrameError(1);
  4832  027B  3001               	movlw	1
  4833  027C  318C  248D         	fcall	_SendFrameError
  4834                           
  4835                           ;main.c: 1612: }
  4836  027E  0008               	return
  4837  027F                     l4383:	
  4838                           
  4839                           ;main.c: 1613: else if(ModbusAddress == 160)
  4840  027F  30A0               	movlw	160
  4841  0280  0020               	movlb	0	; select bank0
  4842  0281  0624               	xorwf	_ModbusAddress,w
  4843  0282  0425               	iorwf	_ModbusAddress+1,w
  4844  0283  1D03               	btfss	3,2
  4845  0284  2A92               	goto	l4393
  4846                           
  4847                           ;main.c: 1614: {
  4848                           ;main.c: 1615: if(EnableConfigChange)
  4849  0285  1CEC               	btfss	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4850  0286  2A8F               	goto	l4391
  4851                           
  4852                           ;main.c: 1616: {
  4853                           ;main.c: 1617: Setting.SlaveAddress=ModbusData;
  4854  0287  0822               	movf	_ModbusData,w
  4855  0288  00D6               	movwf	??_PresetSingleRegister
  4856  0289  0856               	movf	??_PresetSingleRegister,w
  4857  028A  0021               	movlb	1	; select bank1
  4858  028B  00E2               	movwf	(_Setting^(0+128)+10)
  4859                           
  4860                           ;main.c: 1618: SaveSetting();
  4861  028C  318D  2509  3181   	fcall	_SaveSetting
  4862  028F                     l4391:	
  4863                           
  4864                           ;main.c: 1619: }
  4865                           ;main.c: 1620: SendPresetFrame();
  4866  028F  318C  24A3         	fcall	_SendPresetFrame
  4867                           
  4868                           ;main.c: 1621: }
  4869  0291  0008               	return
  4870  0292                     l4393:	
  4871                           
  4872                           ;main.c: 1622: else if(ModbusAddress == 240)
  4873  0292  30F0               	movlw	240
  4874  0293  0020               	movlb	0	; select bank0
  4875  0294  0624               	xorwf	_ModbusAddress,w
  4876  0295  0425               	iorwf	_ModbusAddress+1,w
  4877  0296  1D03               	btfss	3,2
  4878  0297  2AA3               	goto	l4405
  4879                           
  4880                           ;main.c: 1623: {
  4881                           ;main.c: 1624: (GIE = 0);
  4882  0298  138B               	bcf	11,7	;volatile
  4883                           
  4884                           ;main.c: 1625: TMR1ON=0;
  4885  0299  1018               	bcf	24,0	;volatile
  4886                           
  4887                           ;main.c: 1626: TMR1H=0;
  4888  029A  0197               	clrf	23	;volatile
  4889                           
  4890                           ;main.c: 1627: TMR1L=0;
  4891  029B  0196               	clrf	22	;volatile
  4892                           
  4893                           ;main.c: 1628: TimerHiCount=0;
  4894  029C  01B0               	clrf	_TimerHiCount	;volatile
  4895  029D  01B1               	clrf	_TimerHiCount+1	;volatile
  4896                           
  4897                           ;main.c: 1629: TMR1ON=1;
  4898  029E  1418               	bsf	24,0	;volatile
  4899                           
  4900                           ;main.c: 1630: (GIE = 1);
  4901  029F  178B               	bsf	11,7	;volatile
  4902                           
  4903                           ;main.c: 1631: SendPresetFrame();
  4904  02A0  318C  24A3         	fcall	_SendPresetFrame
  4905                           
  4906                           ;main.c: 1632: }
  4907  02A2  0008               	return
  4908  02A3                     l4405:	
  4909                           
  4910                           ;main.c: 1633: else if(ModbusAddress == 242)
  4911  02A3  30F2               	movlw	242
  4912  02A4  0020               	movlb	0	; select bank0
  4913  02A5  0624               	xorwf	_ModbusAddress,w
  4914  02A6  0425               	iorwf	_ModbusAddress+1,w
  4915  02A7  1D03               	btfss	3,2
  4916  02A8  2AB8               	goto	l4415
  4917                           
  4918                           ;main.c: 1634: {
  4919                           ;main.c: 1635: SetTimer1Clock(ModbusData);
  4920  02A9  0822               	movf	_ModbusData,w
  4921  02AA  318E  261F  3181   	fcall	_SetTimer1Clock
  4922                           
  4923                           ;main.c: 1636: if(EnableConfigChange)
  4924  02AD  0020               	movlb	0	; select bank0
  4925  02AE  1CEC               	btfss	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4926  02AF  2AB5               	goto	l4413
  4927                           
  4928                           ;main.c: 1637: {
  4929                           ;main.c: 1638: Setting.Timer1Clock = ModbusData;
  4930  02B0  0822               	movf	_ModbusData,w
  4931  02B1  00D6               	movwf	??_PresetSingleRegister
  4932  02B2  0856               	movf	??_PresetSingleRegister,w
  4933  02B3  0021               	movlb	1	; select bank1
  4934  02B4  00E3               	movwf	(_Setting^(0+128)+11)
  4935  02B5                     l4413:	
  4936                           
  4937                           ;main.c: 1640: }
  4938                           ;main.c: 1641: SendPresetFrame();
  4939  02B5  318C  24A3         	fcall	_SendPresetFrame
  4940                           
  4941                           ;main.c: 1642: }
  4942  02B7  0008               	return
  4943  02B8                     l4415:	
  4944                           
  4945                           ;main.c: 1643: else
  4946                           ;main.c: 1644: SendFrameError( 2);
  4947  02B8  3002               	movlw	2
  4948  02B9  318C  248D         	fcall	_SendFrameError
  4949  02BB  0008               	return
  4950  02BC                     __end_of_PresetSingleRegister:	
  4951                           
  4952                           	psect	text23
  4953  0DAE                     __ptext23:	
  4954 ;; *************** function _WriteAllCoils *****************
  4955 ;; Defined at:
  4956 ;;		line 1501 in file "main.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  stemp           2    9[BANK0 ] unsigned short 
  4961 ;;  loop            1   11[BANK0 ] unsigned char 
  4962 ;; Return value:  Size  Location     Type
  4963 ;;                  1    wreg      void 
  4964 ;; Registers used:
  4965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4966 ;; Tracked objects:
  4967 ;;		On entry : 0/0
  4968 ;;		On exit  : 0/0
  4969 ;;		Unchanged: 0/0
  4970 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4971 ;;      Params:         0       0       0       0       0       0       0
  4972 ;;      Locals:         0       3       0       0       0       0       0
  4973 ;;      Temps:          0       1       0       0       0       0       0
  4974 ;;      Totals:         0       4       0       0       0       0       0
  4975 ;;Total ram usage:        4 bytes
  4976 ;; Hardware stack levels used:    1
  4977 ;; Hardware stack levels required when called:    4
  4978 ;; This function calls:
  4979 ;;		_SendPresetFrame
  4980 ;;		_SetSingleCoil
  4981 ;; This function is called by:
  4982 ;;		_PresetSingleRegister
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           
  4987                           ;psect for function _WriteAllCoils
  4988  0DAE                     _WriteAllCoils:	
  4989                           
  4990                           ;main.c: 1503: unsigned char loop;
  4991                           ;main.c: 1504: unsigned short stemp;
  4992                           ;main.c: 1506: stemp= ModbusData;
  4993                           
  4994                           ;incstack = 0
  4995                           ; Regs used in _WriteAllCoils: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4996  0DAE  0020               	movlb	0	; select bank0
  4997  0DAF  0823               	movf	_ModbusData+1,w
  4998  0DB0  00D4               	movwf	WriteAllCoils@stemp+1
  4999  0DB1  0822               	movf	_ModbusData,w
  5000  0DB2  00D3               	movwf	WriteAllCoils@stemp
  5001                           
  5002                           ;main.c: 1507: for(loop=0;loop<10;loop++)
  5003  0DB3  01D5               	clrf	WriteAllCoils@loop
  5004  0DB4  300A               	movlw	10
  5005  0DB5  0255               	subwf	WriteAllCoils@loop,w
  5006  0DB6  1803               	btfsc	3,0
  5007  0DB7  2DCF               	goto	l4223
  5008  0DB8                     l4215:	
  5009                           
  5010                           ;main.c: 1508: {
  5011                           ;main.c: 1509: SetSingleCoil(loop,(stemp & 1));
  5012  0DB8  0853               	movf	WriteAllCoils@stemp,w
  5013  0DB9  3901               	andlw	1
  5014  0DBA  00D2               	movwf	??_WriteAllCoils
  5015  0DBB  0852               	movf	??_WriteAllCoils,w
  5016  0DBC  00CA               	movwf	SetSingleCoil@value
  5017  0DBD  0855               	movf	WriteAllCoils@loop,w
  5018  0DBE  3187  27EE  318D   	fcall	_SetSingleCoil
  5019                           
  5020                           ;main.c: 1510: stemp/=2;
  5021  0DC1  3001               	movlw	1
  5022  0DC2  0020               	movlb	0	; select bank0
  5023  0DC3                     u4125:	
  5024  0DC3  36D4               	lsrf	WriteAllCoils@stemp+1,f
  5025  0DC4  0CD3               	rrf	WriteAllCoils@stemp,f
  5026  0DC5  0B89               	decfsz	9,f
  5027  0DC6  2DC3               	goto	u4125
  5028  0DC7  3001               	movlw	1
  5029  0DC8  00D2               	movwf	??_WriteAllCoils
  5030  0DC9  0852               	movf	??_WriteAllCoils,w
  5031  0DCA  07D5               	addwf	WriteAllCoils@loop,f
  5032  0DCB  300A               	movlw	10
  5033  0DCC  0255               	subwf	WriteAllCoils@loop,w
  5034  0DCD  1C03               	skipc
  5035  0DCE  2DB8               	goto	l4215
  5036  0DCF                     l4223:	
  5037                           
  5038                           ;main.c: 1511: }
  5039                           ;main.c: 1512: SendPresetFrame();
  5040  0DCF  318C  24A3         	fcall	_SendPresetFrame
  5041  0DD1  0008               	return
  5042  0DD2                     __end_of_WriteAllCoils:	
  5043                           
  5044                           	psect	text24
  5045  0E1F                     __ptext24:	
  5046 ;; *************** function _SetTimer1Clock *****************
  5047 ;; Defined at:
  5048 ;;		line 31 in file "TimeCapture.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  value           1    wreg     unsigned char 
  5051 ;; Auto vars:     Size  Location     Type
  5052 ;;  value           1    3[COMMON] unsigned char 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;                  1    wreg      void 
  5055 ;; Registers used:
  5056 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5062 ;;      Params:         0       0       0       0       0       0       0
  5063 ;;      Locals:         1       0       0       0       0       0       0
  5064 ;;      Temps:          1       0       0       0       0       0       0
  5065 ;;      Totals:         2       0       0       0       0       0       0
  5066 ;;Total ram usage:        2 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    1
  5069 ;; This function calls:
  5070 ;;		Nothing
  5071 ;; This function is called by:
  5072 ;;		_PresetSingleRegister
  5073 ;;		_InitTimeCapture
  5074 ;; This function uses a non-reentrant model
  5075 ;;
  5076                           
  5077                           
  5078                           ;psect for function _SetTimer1Clock
  5079  0E1F                     _SetTimer1Clock:	
  5080                           
  5081                           ;incstack = 0
  5082                           ; Regs used in _SetTimer1Clock: [wreg-fsr0h+status,2+status,0]
  5083                           ;SetTimer1Clock@value stored from wreg
  5084  0E1F  00F3               	movwf	SetTimer1Clock@value
  5085                           
  5086                           ;TimeCapture.c: 33: switch(value)
  5087  0E20  2E36               	goto	l3099
  5088  0E21                     l3089:	
  5089                           ;TimeCapture.c: 34: {
  5090                           ;TimeCapture.c: 35: case 8:
  5091                           
  5092                           
  5093                           ;TimeCapture.c: 36: T1CONbits.T1CKPS = 0;
  5094  0E21  30CF               	movlw	-49
  5095  0E22  0020               	movlb	0	; select bank0
  5096  0E23  0598               	andwf	24,f	;volatile
  5097                           
  5098                           ;TimeCapture.c: 37: break;
  5099  0E24  2E41               	goto	l3101
  5100  0E25                     l3091:	
  5101                           ;TimeCapture.c: 38: case 4:
  5102                           
  5103                           
  5104                           ;TimeCapture.c: 39: T1CONbits.T1CKPS = 1;
  5105  0E25  0020               	movlb	0	; select bank0
  5106  0E26  0818               	movf	24,w	;volatile
  5107  0E27  39CF               	andlw	-49
  5108  0E28  3810               	iorlw	16
  5109  0E29  2E2E               	goto	L13
  5110  0E2A                     l3093:	
  5111                           ;TimeCapture.c: 41: case 2:
  5112                           
  5113                           ;TimeCapture.c: 40: break;
  5114                           
  5115                           
  5116                           ;TimeCapture.c: 42: T1CONbits.T1CKPS = 2;
  5117  0E2A  0020               	movlb	0	; select bank0
  5118  0E2B  0818               	movf	24,w	;volatile
  5119  0E2C  39CF               	andlw	-49
  5120  0E2D  3820               	iorlw	32
  5121  0E2E                     L13:	
  5122  0E2E  0098               	movwf	24	;volatile
  5123                           
  5124                           ;TimeCapture.c: 43: break;
  5125  0E2F  2E41               	goto	l3101
  5126  0E30                     l3095:	
  5127                           ;TimeCapture.c: 44: default:
  5128                           
  5129                           
  5130                           ;TimeCapture.c: 45: T1CONbits.T1CKPS = 3;
  5131  0E30  3030               	movlw	48
  5132  0E31  0020               	movlb	0	; select bank0
  5133  0E32  0498               	iorwf	24,f	;volatile
  5134                           
  5135                           ;TimeCapture.c: 46: value=1;
  5136  0E33  01F3               	clrf	SetTimer1Clock@value
  5137  0E34  0AF3               	incf	SetTimer1Clock@value,f
  5138                           
  5139                           ;TimeCapture.c: 47: }
  5140  0E35  2E41               	goto	l3101
  5141  0E36                     l3099:	
  5142  0E36  0873               	movf	SetTimer1Clock@value,w
  5143                           
  5144                           ; Switch size 1, requested type "space"
  5145                           ; Number of cases is 3, Range of values is 2 to 8
  5146                           ; switch strategies available:
  5147                           ; Name         Instructions Cycles
  5148                           ; simple_byte           10     6 (average)
  5149                           ; direct_byte           23     9 (fixed)
  5150                           ; jumptable            263     9 (fixed)
  5151                           ;	Chosen strategy is simple_byte
  5152  0E37  3A02               	xorlw	2	; case 2
  5153  0E38  1903               	skipnz
  5154  0E39  2E2A               	goto	l3093
  5155  0E3A  3A06               	xorlw	6	; case 4
  5156  0E3B  1903               	skipnz
  5157  0E3C  2E25               	goto	l3091
  5158  0E3D  3A0C               	xorlw	12	; case 8
  5159  0E3E  1903               	skipnz
  5160  0E3F  2E21               	goto	l3089
  5161  0E40  2E30               	goto	l3095
  5162  0E41                     l3101:	
  5163                           
  5164                           ;TimeCapture.c: 48: Timer1Clock = value;
  5165  0E41  0873               	movf	SetTimer1Clock@value,w
  5166  0E42  00F2               	movwf	??_SetTimer1Clock
  5167  0E43  0872               	movf	??_SetTimer1Clock,w
  5168  0E44  0020               	movlb	0	; select bank0
  5169  0E45  00ED               	movwf	_Timer1Clock
  5170  0E46  0008               	return
  5171  0E47                     __end_of_SetTimer1Clock:	
  5172                           
  5173                           	psect	text25
  5174  03EE                     __ptext25:	
  5175 ;; *************** function _SetIOConfig *****************
  5176 ;; Defined at:
  5177 ;;		line 497 in file "main.c"
  5178 ;; Parameters:    Size  Location     Type
  5179 ;;  Pin             1    wreg     unsigned char 
  5180 ;; Auto vars:     Size  Location     Type
  5181 ;;  Pin             1    1[BANK0 ] unsigned char 
  5182 ;;  ioconfig        1    0[BANK0 ] struct .
  5183 ;;  loop            1    0        unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5193 ;;      Params:         0       0       0       0       0       0       0
  5194 ;;      Locals:         0       2       0       0       0       0       0
  5195 ;;      Temps:          1       0       0       0       0       0       0
  5196 ;;      Totals:         1       2       0       0       0       0       0
  5197 ;;Total ram usage:        3 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    2
  5200 ;; This function calls:
  5201 ;;		_ResetIOCycle
  5202 ;;		_SetAnalogConfig
  5203 ;;		_SetIOChange
  5204 ;;		_SetInputConfig
  5205 ;;		_SetOutputConfig
  5206 ;;		_SetPullUp
  5207 ;;		_SetTimeCaptureConfig
  5208 ;;		___bmul
  5209 ;; This function is called by:
  5210 ;;		_PresetSingleRegister
  5211 ;;		_main
  5212 ;; This function uses a non-reentrant model
  5213 ;;
  5214                           
  5215                           
  5216                           ;psect for function _SetIOConfig
  5217  03EE                     _SetIOConfig:	
  5218                           
  5219                           ;incstack = 0
  5220                           ; Regs used in _SetIOConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5221                           ;SetIOConfig@Pin stored from wreg
  5222  03EE  0020               	movlb	0	; select bank0
  5223  03EF  00CB               	movwf	SetIOConfig@Pin
  5224                           
  5225                           ;main.c: 499: unsigned char loop;
  5226                           ;main.c: 500: ConfigUnion ioconfig;
  5227                           ;main.c: 502: const unsigned char ValidCCP[10]={1,0,0,1,0,0,0,0,1,1};
  5228                           ;main.c: 504: ioconfig.Config = Setting.IOConfig[Pin];
  5229  03F0  084B               	movf	SetIOConfig@Pin,w
  5230  03F1  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  5231  03F2  0086               	movwf	6
  5232  03F3  0187               	clrf	7
  5233  03F4  0801               	movf	1,w
  5234  03F5  00F6               	movwf	??_SetIOConfig
  5235  03F6  0876               	movf	??_SetIOConfig,w
  5236  03F7  00CA               	movwf	SetIOConfig@ioconfig
  5237                           
  5238                           ;main.c: 505: ResetIOCycle();
  5239  03F8  318C  2453  3183   	fcall	_ResetIOCycle
  5240                           
  5241                           ;main.c: 509: IOSensorData[Pin].DWORD=0;
  5242  03FB  3006               	movlw	6
  5243  03FC  00F6               	movwf	??_SetIOConfig
  5244  03FD  0876               	movf	??_SetIOConfig,w
  5245  03FE  00F2               	movwf	___bmul@multiplicand
  5246  03FF  0020               	movlb	0	; select bank0
  5247  0400  084B               	movf	SetIOConfig@Pin,w
  5248  0401  318C  2431  3183   	fcall	___bmul
  5249  0404  3EA0               	addlw	160
  5250  0405  0086               	movwf	6
  5251  0406  3001               	movlw	1	; select bank3/4
  5252  0407  0087               	movwf	7
  5253  0408  3000               	movlw	0
  5254  0409  3FC0               	movwi [0]fsr1
  5255  040A  3000               	movlw	0
  5256  040B  3FC1               	movwi [1]fsr1
  5257  040C  3FC2               	movwi [2]fsr1
  5258  040D  3FC3               	movwi [3]fsr1
  5259                           
  5260                           ;main.c: 510: IOSensorData[Pin].WORD[2]=0;
  5261  040E  3006               	movlw	6
  5262  040F  00F6               	movwf	??_SetIOConfig
  5263  0410  0876               	movf	??_SetIOConfig,w
  5264  0411  00F2               	movwf	___bmul@multiplicand
  5265  0412  0020               	movlb	0	; select bank0
  5266  0413  084B               	movf	SetIOConfig@Pin,w
  5267  0414  318C  2431  3183   	fcall	___bmul
  5268  0417  3E04               	addlw	4
  5269  0418  3EA0               	addlw	160
  5270  0419  0086               	movwf	6
  5271  041A  3001               	movlw	1	; select bank3/4
  5272  041B  0087               	movwf	7
  5273  041C  3000               	movlw	0
  5274  041D  3FC0               	movwi [0]fsr1
  5275  041E  3FC1               	movwi [1]fsr1
  5276                           
  5277                           ;main.c: 513: if(Pin<5)
  5278  041F  3005               	movlw	5
  5279  0420  0020               	movlb	0	; select bank0
  5280  0421  024B               	subwf	SetIOConfig@Pin,w
  5281  0422  1803               	skipnc
  5282  0423  2C2F               	goto	l4023
  5283                           
  5284                           ;main.c: 514: {
  5285                           ;main.c: 515: IOCounterFlag.Byte & = NOT_IOMASK[Pin];
  5286  0424  084B               	movf	SetIOConfig@Pin,w
  5287  0425  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5288  0426  0084               	movwf	4
  5289  0427  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5290  0428  1803               	skipnc
  5291  0429  3E01               	addlw	1
  5292  042A  0085               	movwf	5
  5293  042B  0800               	movf	0,w	;code access
  5294  042C  00F6               	movwf	??_SetIOConfig
  5295  042D  0876               	movf	??_SetIOConfig,w
  5296  042E  05F1               	andwf	113,f	;volatile
  5297  042F                     l4023:	
  5298                           
  5299                           ;main.c: 516: }
  5300                           ;main.c: 518: if(Pin==0)
  5301  042F  084B               	movf	SetIOConfig@Pin,w
  5302  0430  1D03               	btfss	3,2
  5303  0431  2C36               	goto	l4029
  5304                           
  5305                           ;main.c: 519: {
  5306                           ;main.c: 520: CCP1CON=0;
  5307  0432  0025               	movlb	5	; select bank5
  5308  0433  0193               	clrf	19	;volatile
  5309                           
  5310                           ;main.c: 521: CCP1IE=0;
  5311  0434  0021               	movlb	1	; select bank1
  5312  0435  1111               	bcf	17,2	;volatile
  5313  0436                     l4029:	
  5314                           
  5315                           ;main.c: 522: }
  5316                           ;main.c: 523: if(Pin==3)
  5317  0436  3003               	movlw	3
  5318  0437  0020               	movlb	0	; select bank0
  5319  0438  064B               	xorwf	SetIOConfig@Pin,w
  5320  0439  1D03               	btfss	3,2
  5321  043A  2C3F               	goto	l4035
  5322                           
  5323                           ;main.c: 524: {
  5324                           ;main.c: 525: CCP2CON=0;
  5325  043B  0025               	movlb	5	; select bank5
  5326  043C  019A               	clrf	26	;volatile
  5327                           
  5328                           ;main.c: 526: CCP2IE=0;
  5329  043D  0021               	movlb	1	; select bank1
  5330  043E  1012               	bcf	18,0	;volatile
  5331  043F                     l4035:	
  5332                           
  5333                           ;main.c: 527: }
  5334                           ;main.c: 528: if(Pin==8)
  5335  043F  3008               	movlw	8
  5336  0440  0020               	movlb	0	; select bank0
  5337  0441  064B               	xorwf	SetIOConfig@Pin,w
  5338  0442  1D03               	btfss	3,2
  5339  0443  2C48               	goto	l4041
  5340                           
  5341                           ;main.c: 529: {
  5342                           ;main.c: 530: CCP3CON=0;
  5343  0444  0026               	movlb	6	; select bank6
  5344  0445  0193               	clrf	19	;volatile
  5345                           
  5346                           ;main.c: 531: CCP3IE=0;
  5347  0446  0021               	movlb	1	; select bank1
  5348  0447  1213               	bcf	19,4	;volatile
  5349  0448                     l4041:	
  5350                           
  5351                           ;main.c: 532: }
  5352                           ;main.c: 533: if(Pin==9)
  5353  0448  3009               	movlw	9
  5354  0449  0020               	movlb	0	; select bank0
  5355  044A  064B               	xorwf	SetIOConfig@Pin,w
  5356  044B  1D03               	btfss	3,2
  5357  044C  2C51               	goto	l4047
  5358                           
  5359                           ;main.c: 534: {
  5360                           ;main.c: 535: CCP4CON=0;
  5361  044D  0026               	movlb	6	; select bank6
  5362  044E  019A               	clrf	26	;volatile
  5363                           
  5364                           ;main.c: 536: CCP4IE=0;
  5365  044F  0021               	movlb	1	; select bank1
  5366  0450  1293               	bcf	19,5	;volatile
  5367  0451                     l4047:	
  5368                           
  5369                           ;main.c: 537: }
  5370                           ;main.c: 539: if(Pin<5)
  5371  0451  3005               	movlw	5
  5372  0452  0020               	movlb	0	; select bank0
  5373  0453  024B               	subwf	SetIOConfig@Pin,w
  5374  0454  1803               	skipnc
  5375  0455  2C62               	goto	l4051
  5376                           
  5377                           ;main.c: 540: {
  5378                           ;main.c: 541: SetPullUp(Pin,1);
  5379  0456  01F2               	clrf	SetPullUp@PullUp
  5380  0457  0AF2               	incf	SetPullUp@PullUp,f
  5381  0458  084B               	movf	SetIOConfig@Pin,w
  5382  0459  318D  25D2  3183   	fcall	_SetPullUp
  5383                           
  5384                           ;main.c: 542: SetIOChange(Pin,0);
  5385  045C  01F2               	clrf	SetIOChange@value
  5386  045D  0020               	movlb	0	; select bank0
  5387  045E  084B               	movf	SetIOConfig@Pin,w
  5388  045F  318E  2670  3183   	fcall	_SetIOChange
  5389  0462                     l4051:	
  5390                           
  5391                           ;main.c: 543: }
  5392                           ;main.c: 545: if(ioconfig.Config<4)
  5393  0462  3004               	movlw	4
  5394  0463  0020               	movlb	0	; select bank0
  5395  0464  024A               	subwf	SetIOConfig@ioconfig,w
  5396  0465  1803               	skipnc
  5397  0466  2C75               	goto	l4059
  5398                           
  5399                           ;main.c: 546: {
  5400                           ;main.c: 547: if(Pin<5)
  5401  0467  3005               	movlw	5
  5402  0468  024B               	subwf	SetIOConfig@Pin,w
  5403  0469  1803               	skipnc
  5404  046A  2C70               	goto	l4057
  5405                           
  5406                           ;main.c: 548: SetPullUp(Pin,0);
  5407  046B  01F2               	clrf	SetPullUp@PullUp
  5408  046C  084B               	movf	SetIOConfig@Pin,w
  5409  046D  318D  25D2  3183   	fcall	_SetPullUp
  5410  0470                     l4057:	
  5411                           
  5412                           ;main.c: 549: SetAnalogConfig(Pin);
  5413  0470  0020               	movlb	0	; select bank0
  5414  0471  084B               	movf	SetIOConfig@Pin,w
  5415  0472  3187  273A         	fcall	_SetAnalogConfig
  5416                           
  5417                           ;main.c: 550: }
  5418  0474  0008               	return
  5419  0475                     l4059:	
  5420                           
  5421                           ;main.c: 551: else if(ioconfig.Config==6)
  5422  0475  3006               	movlw	6
  5423  0476  0020               	movlb	0	; select bank0
  5424  0477  064A               	xorwf	SetIOConfig@ioconfig,w
  5425  0478  1D03               	btfss	3,2
  5426  0479  2C7E               	goto	l4063
  5427                           
  5428                           ;main.c: 552: {
  5429                           ;main.c: 553: SetOutputConfig(Pin);
  5430  047A  084B               	movf	SetIOConfig@Pin,w
  5431  047B  318E  269A         	fcall	_SetOutputConfig
  5432                           
  5433                           ;main.c: 554: }
  5434  047D  0008               	return
  5435  047E                     l4063:	
  5436                           
  5437                           ;main.c: 555: else if(ioconfig.Config == 12)
  5438  047E  300C               	movlw	12
  5439  047F  0020               	movlb	0	; select bank0
  5440  0480  064A               	xorwf	SetIOConfig@ioconfig,w
  5441  0481  1D03               	btfss	3,2
  5442  0482  2CA6               	goto	l4077
  5443                           
  5444                           ;main.c: 556: {
  5445                           ;main.c: 557: if(ValidCCP[Pin] ==0)
  5446  0483  084B               	movf	SetIOConfig@Pin,w
  5447  0484  3E16               	addlw	low (SetIOConfig@ValidCCP| (0+32768))
  5448  0485  0084               	movwf	4
  5449  0486  3088               	movlw	high (SetIOConfig@ValidCCP| (0+32768))
  5450  0487  1803               	skipnc
  5451  0488  3E01               	addlw	1
  5452  0489  0085               	movwf	5
  5453  048A  0012               	moviw fsr0++
  5454  048B  1D03               	btfss	3,2
  5455  048C  2C90               	goto	l4069
  5456                           
  5457                           ;main.c: 558: {
  5458                           ;main.c: 559: BadIO=1;
  5459  048D  01BE               	clrf	_BadIO
  5460  048E  0ABE               	incf	_BadIO,f
  5461                           
  5462                           ;main.c: 560: return;
  5463  048F  0008               	return
  5464  0490                     l4069:	
  5465                           
  5466                           ;main.c: 561: }
  5467                           ;main.c: 562: SetInputConfig(Pin);
  5468  0490  084B               	movf	SetIOConfig@Pin,w
  5469  0491  318E  26F6  3183   	fcall	_SetInputConfig
  5470                           
  5471                           ;main.c: 563: if(Pin<5)
  5472  0494  3005               	movlw	5
  5473  0495  0020               	movlb	0	; select bank0
  5474  0496  024B               	subwf	SetIOConfig@Pin,w
  5475  0497  1803               	skipnc
  5476  0498  2C9E               	goto	l4075
  5477                           
  5478                           ;main.c: 564: SetPullUp(Pin,0);
  5479  0499  01F2               	clrf	SetPullUp@PullUp
  5480  049A  084B               	movf	SetIOConfig@Pin,w
  5481  049B  318D  25D2  3183   	fcall	_SetPullUp
  5482  049E                     l4075:	
  5483                           
  5484                           ;main.c: 565: SetTimeCaptureConfig(Pin,0);
  5485  049E  3000               	movlw	0
  5486  049F  00F2               	movwf	SetTimeCaptureConfig@detection
  5487  04A0  00F3               	movwf	SetTimeCaptureConfig@detection+1
  5488  04A1  0020               	movlb	0	; select bank0
  5489  04A2  084B               	movf	SetIOConfig@Pin,w
  5490  04A3  3185  25D7         	fcall	_SetTimeCaptureConfig
  5491                           
  5492                           ;main.c: 567: }
  5493  04A5  0008               	return
  5494  04A6                     l4077:	
  5495                           
  5496                           ;main.c: 568: else if(ioconfig.Config == 13)
  5497  04A6  300D               	movlw	13
  5498  04A7  0020               	movlb	0	; select bank0
  5499  04A8  064A               	xorwf	SetIOConfig@ioconfig,w
  5500  04A9  1D03               	btfss	3,2
  5501  04AA  2CCF               	goto	l4091
  5502                           
  5503                           ;main.c: 569: {
  5504                           ;main.c: 570: if(ValidCCP[Pin] ==0)
  5505  04AB  084B               	movf	SetIOConfig@Pin,w
  5506  04AC  3E16               	addlw	low (SetIOConfig@ValidCCP| (0+32768))
  5507  04AD  0084               	movwf	4
  5508  04AE  3088               	movlw	high (SetIOConfig@ValidCCP| (0+32768))
  5509  04AF  1803               	skipnc
  5510  04B0  3E01               	addlw	1
  5511  04B1  0085               	movwf	5
  5512  04B2  0012               	moviw fsr0++
  5513  04B3  1D03               	btfss	3,2
  5514  04B4  2CB8               	goto	l4083
  5515                           
  5516                           ;main.c: 571: {
  5517                           ;main.c: 572: BadIO=1;
  5518  04B5  01BE               	clrf	_BadIO
  5519  04B6  0ABE               	incf	_BadIO,f
  5520                           
  5521                           ;main.c: 573: return;
  5522  04B7  0008               	return
  5523  04B8                     l4083:	
  5524                           
  5525                           ;main.c: 574: }
  5526                           ;main.c: 575: SetInputConfig(Pin);
  5527  04B8  084B               	movf	SetIOConfig@Pin,w
  5528  04B9  318E  26F6  3183   	fcall	_SetInputConfig
  5529                           
  5530                           ;main.c: 576: if(Pin < 5)
  5531  04BC  3005               	movlw	5
  5532  04BD  0020               	movlb	0	; select bank0
  5533  04BE  024B               	subwf	SetIOConfig@Pin,w
  5534  04BF  1803               	skipnc
  5535  04C0  2CC6               	goto	l4089
  5536                           
  5537                           ;main.c: 577: SetPullUp(Pin,0);
  5538  04C1  01F2               	clrf	SetPullUp@PullUp
  5539  04C2  084B               	movf	SetIOConfig@Pin,w
  5540  04C3  318D  25D2  3183   	fcall	_SetPullUp
  5541  04C6                     l4089:	
  5542                           
  5543                           ;main.c: 578: SetTimeCaptureConfig(Pin,1);
  5544  04C6  3001               	movlw	1
  5545  04C7  00F2               	movwf	SetTimeCaptureConfig@detection
  5546  04C8  3000               	movlw	0
  5547  04C9  00F3               	movwf	SetTimeCaptureConfig@detection+1
  5548  04CA  0020               	movlb	0	; select bank0
  5549  04CB  084B               	movf	SetIOConfig@Pin,w
  5550  04CC  3185  25D7         	fcall	_SetTimeCaptureConfig
  5551                           
  5552                           ;main.c: 579: }
  5553  04CE  0008               	return
  5554  04CF                     l4091:	
  5555                           
  5556                           ;main.c: 580: else if(ioconfig.Config == 4)
  5557  04CF  3004               	movlw	4
  5558  04D0  0020               	movlb	0	; select bank0
  5559  04D1  064A               	xorwf	SetIOConfig@ioconfig,w
  5560  04D2  1D03               	btfss	3,2
  5561  04D3  2CE2               	goto	l4097
  5562                           
  5563                           ;main.c: 581: {
  5564                           ;main.c: 582: if(Pin<5)
  5565  04D4  3005               	movlw	5
  5566  04D5  024B               	subwf	SetIOConfig@Pin,w
  5567  04D6  1803               	skipnc
  5568  04D7  2CDD               	goto	l451
  5569                           
  5570                           ;main.c: 583: SetPullUp(Pin,0);
  5571  04D8  01F2               	clrf	SetPullUp@PullUp
  5572  04D9  084B               	movf	SetIOConfig@Pin,w
  5573  04DA  318D  25D2  3183   	fcall	_SetPullUp
  5574  04DD                     l451:	
  5575                           
  5576                           ;main.c: 584: SetInputConfig(Pin);
  5577  04DD  0020               	movlb	0	; select bank0
  5578  04DE  084B               	movf	SetIOConfig@Pin,w
  5579  04DF  318E  26F6         	fcall	_SetInputConfig
  5580                           
  5581                           ;main.c: 585: }
  5582  04E1  0008               	return
  5583  04E2                     l4097:	
  5584                           
  5585                           ;main.c: 610: else
  5586                           ;main.c: 611: SetInputConfig(Pin);
  5587  04E2  0020               	movlb	0	; select bank0
  5588  04E3  084B               	movf	SetIOConfig@Pin,w
  5589  04E4  318E  26F6         	fcall	_SetInputConfig
  5590  04E6  0008               	return
  5591  04E7                     __end_of_SetIOConfig:	
  5592                           
  5593                           	psect	text26
  5594  05D7                     __ptext26:	
  5595 ;; *************** function _SetTimeCaptureConfig *****************
  5596 ;; Defined at:
  5597 ;;		line 79 in file "TimeCapture.c"
  5598 ;; Parameters:    Size  Location     Type
  5599 ;;  Pin             1    wreg     unsigned char 
  5600 ;;  detection       2    2[COMMON] unsigned int 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  Pin             1    4[COMMON] unsigned char 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;                  1    wreg      void 
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5612 ;;      Params:         2       0       0       0       0       0       0
  5613 ;;      Locals:         1       0       0       0       0       0       0
  5614 ;;      Temps:          0       0       0       0       0       0       0
  5615 ;;      Totals:         3       0       0       0       0       0       0
  5616 ;;Total ram usage:        3 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:    1
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_SetIOConfig
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           
  5627                           ;psect for function _SetTimeCaptureConfig
  5628  05D7                     _SetTimeCaptureConfig:	
  5629                           
  5630                           ;incstack = 0
  5631                           ; Regs used in _SetTimeCaptureConfig: [wreg+status,2+status,0]
  5632                           ;SetTimeCaptureConfig@Pin stored from wreg
  5633  05D7  00F4               	movwf	SetTimeCaptureConfig@Pin
  5634                           
  5635                           ;TimeCapture.c: 81: if(Pin == 0)
  5636  05D8  0874               	movf	SetTimeCaptureConfig@Pin,w
  5637  05D9  1D03               	btfss	3,2
  5638  05DA  2DEB               	goto	l3913
  5639                           
  5640                           ;TimeCapture.c: 82: {
  5641                           ;TimeCapture.c: 83: if(detection)
  5642  05DB  0872               	movf	SetTimeCaptureConfig@detection,w
  5643  05DC  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5644  05DD  1903               	btfsc	3,2
  5645  05DE  2DE1               	goto	l3905
  5646                           
  5647                           ;TimeCapture.c: 84: CCP1CON = 0b00000101;
  5648  05DF  3005               	movlw	5
  5649  05E0  2DE2               	goto	L14
  5650  05E1                     l3905:	
  5651                           
  5652                           ;TimeCapture.c: 85: else
  5653                           ;TimeCapture.c: 86: CCP1CON = 0b00000100;
  5654  05E1  3004               	movlw	4
  5655  05E2                     L14:	
  5656  05E2  0025               	movlb	5	; select bank5
  5657  05E3  0093               	movwf	19	;volatile
  5658                           
  5659                           ;TimeCapture.c: 88: TimeCapture1Count=0;
  5660  05E4  0020               	movlb	0	; select bank0
  5661  05E5  01AE               	clrf	_TimeCapture1Count	;volatile
  5662  05E6  01AF               	clrf	_TimeCapture1Count+1	;volatile
  5663                           
  5664                           ;TimeCapture.c: 89: CCP1IF = 0;
  5665  05E7  1111               	bcf	17,2	;volatile
  5666                           
  5667                           ;TimeCapture.c: 90: CCP1IE =1;
  5668  05E8  0021               	movlb	1	; select bank1
  5669  05E9  1511               	bsf	17,2	;volatile
  5670                           
  5671                           ;TimeCapture.c: 92: }
  5672  05EA  0008               	return
  5673  05EB                     l3913:	
  5674                           
  5675                           ;TimeCapture.c: 93: else if(Pin == 3)
  5676  05EB  3003               	movlw	3
  5677  05EC  0674               	xorwf	SetTimeCaptureConfig@Pin,w
  5678  05ED  1D03               	btfss	3,2
  5679  05EE  2DFF               	goto	l3927
  5680                           
  5681                           ;TimeCapture.c: 94: {
  5682                           ;TimeCapture.c: 95: if(detection)
  5683  05EF  0872               	movf	SetTimeCaptureConfig@detection,w
  5684  05F0  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5685  05F1  1903               	btfsc	3,2
  5686  05F2  2DF5               	goto	l3919
  5687                           
  5688                           ;TimeCapture.c: 96: CCP2CON = 0b00000101;
  5689  05F3  3005               	movlw	5
  5690  05F4  2DF6               	goto	L15
  5691  05F5                     l3919:	
  5692                           
  5693                           ;TimeCapture.c: 97: else
  5694                           ;TimeCapture.c: 98: CCP2CON = 0b00000100;
  5695  05F5  3004               	movlw	4
  5696  05F6                     L15:	
  5697  05F6  0025               	movlb	5	; select bank5
  5698  05F7  009A               	movwf	26	;volatile
  5699                           
  5700                           ;TimeCapture.c: 100: TimeCapture2Count=0;
  5701  05F8  0020               	movlb	0	; select bank0
  5702  05F9  01AC               	clrf	_TimeCapture2Count	;volatile
  5703  05FA  01AD               	clrf	_TimeCapture2Count+1	;volatile
  5704                           
  5705                           ;TimeCapture.c: 101: CCP2IF = 0;
  5706  05FB  1012               	bcf	18,0	;volatile
  5707                           
  5708                           ;TimeCapture.c: 102: CCP2IE =1;
  5709  05FC  0021               	movlb	1	; select bank1
  5710  05FD  1412               	bsf	18,0	;volatile
  5711                           
  5712                           ;TimeCapture.c: 104: }
  5713  05FE  0008               	return
  5714  05FF                     l3927:	
  5715                           
  5716                           ;TimeCapture.c: 105: else if(Pin == 8)
  5717  05FF  3008               	movlw	8
  5718  0600  0674               	xorwf	SetTimeCaptureConfig@Pin,w
  5719  0601  1D03               	btfss	3,2
  5720  0602  2E13               	goto	l3941
  5721                           
  5722                           ;TimeCapture.c: 106: {
  5723                           ;TimeCapture.c: 107: if(detection)
  5724  0603  0872               	movf	SetTimeCaptureConfig@detection,w
  5725  0604  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5726  0605  1903               	btfsc	3,2
  5727  0606  2E09               	goto	l3933
  5728                           
  5729                           ;TimeCapture.c: 108: CCP3CON = 0b00000101;
  5730  0607  3005               	movlw	5
  5731  0608  2E0A               	goto	L16
  5732  0609                     l3933:	
  5733                           
  5734                           ;TimeCapture.c: 109: else
  5735                           ;TimeCapture.c: 110: CCP3CON = 0b00000100;
  5736  0609  3004               	movlw	4
  5737  060A                     L16:	
  5738  060A  0026               	movlb	6	; select bank6
  5739  060B  0093               	movwf	19	;volatile
  5740                           
  5741                           ;TimeCapture.c: 112: TimeCapture3Count=0;
  5742  060C  0020               	movlb	0	; select bank0
  5743  060D  01AA               	clrf	_TimeCapture3Count	;volatile
  5744  060E  01AB               	clrf	_TimeCapture3Count+1	;volatile
  5745                           
  5746                           ;TimeCapture.c: 113: CCP3IF = 0;
  5747  060F  1213               	bcf	19,4	;volatile
  5748                           
  5749                           ;TimeCapture.c: 114: CCP3IE =1;
  5750  0610  0021               	movlb	1	; select bank1
  5751  0611  1613               	bsf	19,4	;volatile
  5752                           
  5753                           ;TimeCapture.c: 117: }
  5754  0612  0008               	return
  5755  0613                     l3941:	
  5756                           
  5757                           ;TimeCapture.c: 118: else if(Pin ==9)
  5758  0613  3009               	movlw	9
  5759  0614  0674               	xorwf	SetTimeCaptureConfig@Pin,w
  5760  0615  1D03               	btfss	3,2
  5761  0616  0008               	return
  5762                           
  5763                           ;TimeCapture.c: 119: {
  5764                           ;TimeCapture.c: 120: if(detection)
  5765  0617  0872               	movf	SetTimeCaptureConfig@detection,w
  5766  0618  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5767  0619  1903               	btfsc	3,2
  5768  061A  2E1D               	goto	l3947
  5769                           
  5770                           ;TimeCapture.c: 121: CCP4CON = 0b00000101;
  5771  061B  3005               	movlw	5
  5772  061C  2E1E               	goto	L17
  5773  061D                     l3947:	
  5774                           
  5775                           ;TimeCapture.c: 122: else
  5776                           ;TimeCapture.c: 123: CCP4CON = 0b00000100;
  5777  061D  3004               	movlw	4
  5778  061E                     L17:	
  5779  061E  0026               	movlb	6	; select bank6
  5780  061F  009A               	movwf	26	;volatile
  5781                           
  5782                           ;TimeCapture.c: 125: TimeCapture4Count=0;
  5783  0620  0020               	movlb	0	; select bank0
  5784  0621  01A8               	clrf	_TimeCapture4Count	;volatile
  5785  0622  01A9               	clrf	_TimeCapture4Count+1	;volatile
  5786                           
  5787                           ;TimeCapture.c: 126: CCP4IF = 0;
  5788  0623  1293               	bcf	19,5	;volatile
  5789                           
  5790                           ;TimeCapture.c: 127: CCP4IE =1;
  5791  0624  0021               	movlb	1	; select bank1
  5792  0625  1693               	bsf	19,5	;volatile
  5793  0626  0008               	return
  5794  0627                     __end_of_SetTimeCaptureConfig:	
  5795                           ;TimeCapture.c: 130: }
  5796                           ;TimeCapture.c: 131: return;
  5797                           
  5798                           
  5799                           	psect	text27
  5800  0DD2                     __ptext27:	
  5801 ;; *************** function _SetPullUp *****************
  5802 ;; Defined at:
  5803 ;;		line 466 in file "main.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  Pin             1    wreg     unsigned char 
  5806 ;;  PullUp          1    2[COMMON] unsigned char 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  Pin             1    4[COMMON] unsigned char 
  5809 ;; Return value:  Size  Location     Type
  5810 ;;                  1    wreg      void 
  5811 ;; Registers used:
  5812 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5813 ;; Tracked objects:
  5814 ;;		On entry : 0/0
  5815 ;;		On exit  : 0/0
  5816 ;;		Unchanged: 0/0
  5817 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5818 ;;      Params:         1       0       0       0       0       0       0
  5819 ;;      Locals:         1       0       0       0       0       0       0
  5820 ;;      Temps:          1       0       0       0       0       0       0
  5821 ;;      Totals:         3       0       0       0       0       0       0
  5822 ;;Total ram usage:        3 bytes
  5823 ;; Hardware stack levels used:    1
  5824 ;; Hardware stack levels required when called:    1
  5825 ;; This function calls:
  5826 ;;		Nothing
  5827 ;; This function is called by:
  5828 ;;		_SetIOConfig
  5829 ;; This function uses a non-reentrant model
  5830 ;;
  5831                           
  5832                           
  5833                           ;psect for function _SetPullUp
  5834  0DD2                     _SetPullUp:	
  5835                           
  5836                           ;incstack = 0
  5837                           ; Regs used in _SetPullUp: [wreg-fsr0h+status,2+status,0+pclath]
  5838                           ;SetPullUp@Pin stored from wreg
  5839  0DD2  00F4               	movwf	SetPullUp@Pin
  5840                           
  5841                           ;main.c: 468: if(Pin<5)
  5842  0DD3  3005               	movlw	5
  5843  0DD4  0274               	subwf	SetPullUp@Pin,w
  5844  0DD5  1803               	skipnc
  5845  0DD6  2DF4               	goto	l416
  5846                           
  5847                           ;main.c: 469: {
  5848                           ;main.c: 470: if(PullUp)
  5849  0DD7  0872               	movf	SetPullUp@PullUp,w
  5850  0DD8  1903               	btfsc	3,2
  5851  0DD9  2DE7               	goto	l3889
  5852                           
  5853                           ;main.c: 471: WPUB |= IOMASK[Pin];
  5854  0DDA  0874               	movf	SetPullUp@Pin,w
  5855  0DDB  3E0B               	addlw	low (_IOMASK| (0+32768))
  5856  0DDC  0084               	movwf	4
  5857  0DDD  3088               	movlw	high (_IOMASK| (0+32768))
  5858  0DDE  1803               	skipnc
  5859  0DDF  3E01               	addlw	1
  5860  0DE0  0085               	movwf	5
  5861  0DE1  0800               	movf	0,w	;code access
  5862  0DE2  00F3               	movwf	??_SetPullUp
  5863  0DE3  0873               	movf	??_SetPullUp,w
  5864  0DE4  0024               	movlb	4	; select bank4
  5865  0DE5  048D               	iorwf	13,f	;volatile
  5866  0DE6  0008               	return
  5867  0DE7                     l3889:	
  5868                           
  5869                           ;main.c: 472: else
  5870                           ;main.c: 473: WPUB &= NOT_IOMASK[Pin];
  5871  0DE7  0874               	movf	SetPullUp@Pin,w
  5872  0DE8  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5873  0DE9  0084               	movwf	4
  5874  0DEA  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5875  0DEB  1803               	skipnc
  5876  0DEC  3E01               	addlw	1
  5877  0DED  0085               	movwf	5
  5878  0DEE  0800               	movf	0,w	;code access
  5879  0DEF  00F3               	movwf	??_SetPullUp
  5880  0DF0  0873               	movf	??_SetPullUp,w
  5881  0DF1  0024               	movlb	4	; select bank4
  5882  0DF2  058D               	andwf	13,f	;volatile
  5883                           
  5884                           ;main.c: 474: }
  5885  0DF3  0008               	return
  5886  0DF4                     l416:	
  5887                           
  5888                           ;main.c: 475: else BadIO=1;
  5889  0DF4  0020               	movlb	0	; select bank0
  5890  0DF5  01BE               	clrf	_BadIO
  5891  0DF6  0ABE               	incf	_BadIO,f
  5892  0DF7  0008               	return
  5893  0DF8                     __end_of_SetPullUp:	
  5894                           
  5895                           	psect	text28
  5896  0E9A                     __ptext28:	
  5897 ;; *************** function _SetOutputConfig *****************
  5898 ;; Defined at:
  5899 ;;		line 396 in file "main.c"
  5900 ;; Parameters:    Size  Location     Type
  5901 ;;  Pin             1    wreg     unsigned char 
  5902 ;; Auto vars:     Size  Location     Type
  5903 ;;  Pin             1    5[COMMON] unsigned char 
  5904 ;;  _tmp            1    4[COMMON] unsigned char 
  5905 ;;  ioconfig        1    3[COMMON] unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5915 ;;      Params:         0       0       0       0       0       0       0
  5916 ;;      Locals:         3       0       0       0       0       0       0
  5917 ;;      Temps:          1       0       0       0       0       0       0
  5918 ;;      Totals:         4       0       0       0       0       0       0
  5919 ;;Total ram usage:        4 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    1
  5922 ;; This function calls:
  5923 ;;		Nothing
  5924 ;; This function is called by:
  5925 ;;		_SetIOConfig
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function _SetOutputConfig
  5931  0E9A                     _SetOutputConfig:	
  5932                           
  5933                           ;incstack = 0
  5934                           ; Regs used in _SetOutputConfig: [wreg-fsr1h+status,2+status,0+pclath]
  5935                           ;SetOutputConfig@Pin stored from wreg
  5936  0E9A  00F5               	movwf	SetOutputConfig@Pin
  5937                           
  5938                           ;main.c: 399: unsigned char ioconfig = Setting.IOConfig[Pin];
  5939  0E9B  0875               	movf	SetOutputConfig@Pin,w
  5940  0E9C  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  5941  0E9D  0086               	movwf	6
  5942  0E9E  0187               	clrf	7
  5943  0E9F  0801               	movf	1,w
  5944  0EA0  00F2               	movwf	??_SetOutputConfig
  5945  0EA1  0872               	movf	??_SetOutputConfig,w
  5946  0EA2  00F3               	movwf	SetOutputConfig@ioconfig
  5947                           
  5948                           ;main.c: 400: unsigned char _tmp= NOT_IOMASK[Pin];
  5949  0EA3  0875               	movf	SetOutputConfig@Pin,w
  5950  0EA4  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5951  0EA5  0084               	movwf	4
  5952  0EA6  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5953  0EA7  1803               	skipnc
  5954  0EA8  3E01               	addlw	1
  5955  0EA9  0085               	movwf	5
  5956  0EAA  0800               	movf	0,w	;code access
  5957  0EAB  00F2               	movwf	??_SetOutputConfig
  5958  0EAC  0872               	movf	??_SetOutputConfig,w
  5959  0EAD  00F4               	movwf	SetOutputConfig@_tmp
  5960                           
  5961                           ;main.c: 401: if(Pin<5)
  5962  0EAE  3005               	movlw	5
  5963  0EAF  0275               	subwf	SetOutputConfig@Pin,w
  5964  0EB0  1803               	skipnc
  5965  0EB1  2EBC               	goto	l411
  5966  0EB2  0874               	movf	SetOutputConfig@_tmp,w	;# 
  5967  0EB3  00F2               	movwf	??_SetOutputConfig	;# 
  5968  0EB4  0872               	movf	??_SetOutputConfig,w	;# 
  5969  0EB5  0020               	movlb	0	;# 
  5970  0EB6  058D               	andwf	13,f	;# 
  5971  0EB7  0021               	movlb	1	;# 
  5972  0EB8  058D               	andwf	13,f	;# 
  5973  0EB9  0023               	movlb	3	;# 
  5974  0EBA  058D               	andwf	13,f	;# 
  5975                           
  5976                           ;main.c: 417: }
  5977  0EBB  0008               	return
  5978  0EBC                     l411:	
  5979  0EBC  0874               	movf	SetOutputConfig@_tmp,w	;# 
  5980  0EBD  00F2               	movwf	??_SetOutputConfig	;# 
  5981  0EBE  0872               	movf	??_SetOutputConfig,w	;# 
  5982  0EBF  0020               	movlb	0	;# 
  5983  0EC0  058C               	andwf	12,f	;# 
  5984  0EC1  0021               	movlb	1	;# 
  5985  0EC2  058C               	andwf	12,f	;# 
  5986  0EC3  0023               	movlb	3	;# 
  5987  0EC4  058C               	andwf	12,f	;# 
  5988  0EC5  0008               	return
  5989  0EC6                     __end_of_SetOutputConfig:	
  5990                           
  5991                           	psect	text29
  5992  0EF6                     __ptext29:	
  5993 ;; *************** function _SetInputConfig *****************
  5994 ;; Defined at:
  5995 ;;		line 479 in file "main.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;  Pin             1    wreg     unsigned char 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  Pin             1    5[COMMON] unsigned char 
  6000 ;;  _ntmp           1    4[COMMON] unsigned char 
  6001 ;;  _tmp            1    3[COMMON] unsigned char 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  1    wreg      void 
  6004 ;; Registers used:
  6005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6011 ;;      Params:         0       0       0       0       0       0       0
  6012 ;;      Locals:         3       0       0       0       0       0       0
  6013 ;;      Temps:          1       0       0       0       0       0       0
  6014 ;;      Totals:         4       0       0       0       0       0       0
  6015 ;;Total ram usage:        4 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    1
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_SetIOConfig
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           
  6026                           ;psect for function _SetInputConfig
  6027  0EF6                     _SetInputConfig:	
  6028                           
  6029                           ;incstack = 0
  6030                           ; Regs used in _SetInputConfig: [wreg-fsr0h+status,2+status,0+pclath]
  6031                           ;SetInputConfig@Pin stored from wreg
  6032  0EF6  00F5               	movwf	SetInputConfig@Pin
  6033                           
  6034                           ;main.c: 481: unsigned char _tmp = IOMASK[Pin];
  6035  0EF7  0875               	movf	SetInputConfig@Pin,w
  6036  0EF8  3E0B               	addlw	low (_IOMASK| (0+32768))
  6037  0EF9  0084               	movwf	4
  6038  0EFA  3088               	movlw	high (_IOMASK| (0+32768))
  6039  0EFB  1803               	skipnc
  6040  0EFC  3E01               	addlw	1
  6041  0EFD  0085               	movwf	5
  6042  0EFE  0800               	movf	0,w	;code access
  6043  0EFF  00F2               	movwf	??_SetInputConfig
  6044  0F00  0872               	movf	??_SetInputConfig,w
  6045  0F01  00F3               	movwf	SetInputConfig@_tmp
  6046                           
  6047                           ;main.c: 482: unsigned char _ntmp= NOT_IOMASK[Pin];
  6048  0F02  0875               	movf	SetInputConfig@Pin,w
  6049  0F03  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  6050  0F04  0084               	movwf	4
  6051  0F05  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  6052  0F06  1803               	skipnc
  6053  0F07  3E01               	addlw	1
  6054  0F08  0085               	movwf	5
  6055  0F09  0800               	movf	0,w	;code access
  6056  0F0A  00F2               	movwf	??_SetInputConfig
  6057  0F0B  0872               	movf	??_SetInputConfig,w
  6058  0F0C  00F4               	movwf	SetInputConfig@_ntmp
  6059                           
  6060                           ;main.c: 483: if(Pin<5)
  6061  0F0D  3005               	movlw	5
  6062  0F0E  0275               	subwf	SetInputConfig@Pin,w
  6063  0F0F  1803               	skipnc
  6064  0F10  2F1C               	goto	l3897
  6065                           
  6066                           ;main.c: 484: {
  6067                           ;main.c: 485: TRISB |= _tmp;
  6068  0F11  0873               	movf	SetInputConfig@_tmp,w
  6069  0F12  00F2               	movwf	??_SetInputConfig
  6070  0F13  0872               	movf	??_SetInputConfig,w
  6071  0F14  0021               	movlb	1	; select bank1
  6072  0F15  048D               	iorwf	13,f	;volatile
  6073                           
  6074                           ;main.c: 486: ANSELB &= _ntmp;
  6075  0F16  0874               	movf	SetInputConfig@_ntmp,w
  6076  0F17  00F2               	movwf	??_SetInputConfig
  6077  0F18  0872               	movf	??_SetInputConfig,w
  6078  0F19  0023               	movlb	3	; select bank3
  6079  0F1A  058D               	andwf	13,f	;volatile
  6080                           
  6081                           ;main.c: 487: }
  6082  0F1B  0008               	return
  6083  0F1C                     l3897:	
  6084                           
  6085                           ;main.c: 488: else
  6086                           ;main.c: 489: {
  6087                           ;main.c: 490: TRISA |= _tmp;
  6088  0F1C  0873               	movf	SetInputConfig@_tmp,w
  6089  0F1D  00F2               	movwf	??_SetInputConfig
  6090  0F1E  0872               	movf	??_SetInputConfig,w
  6091  0F1F  0021               	movlb	1	; select bank1
  6092  0F20  048C               	iorwf	12,f	;volatile
  6093                           
  6094                           ;main.c: 491: ANSELA &= _ntmp;
  6095  0F21  0874               	movf	SetInputConfig@_ntmp,w
  6096  0F22  00F2               	movwf	??_SetInputConfig
  6097  0F23  0872               	movf	??_SetInputConfig,w
  6098  0F24  0023               	movlb	3	; select bank3
  6099  0F25  058C               	andwf	12,f	;volatile
  6100  0F26  0008               	return
  6101  0F27                     __end_of_SetInputConfig:	
  6102                           
  6103                           	psect	text30
  6104  0E70                     __ptext30:	
  6105 ;; *************** function _SetIOChange *****************
  6106 ;; Defined at:
  6107 ;;		line 193 in file "IOCycle.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  Pin             1    wreg     unsigned char 
  6110 ;;  value           1    2[COMMON] unsigned char 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  Pin             1    5[COMMON] unsigned char 
  6113 ;;  _temp           1    4[COMMON] unsigned char 
  6114 ;; Return value:  Size  Location     Type
  6115 ;;                  1    wreg      void 
  6116 ;; Registers used:
  6117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6118 ;; Tracked objects:
  6119 ;;		On entry : 0/0
  6120 ;;		On exit  : 0/0
  6121 ;;		Unchanged: 0/0
  6122 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6123 ;;      Params:         1       0       0       0       0       0       0
  6124 ;;      Locals:         2       0       0       0       0       0       0
  6125 ;;      Temps:          1       0       0       0       0       0       0
  6126 ;;      Totals:         4       0       0       0       0       0       0
  6127 ;;Total ram usage:        4 bytes
  6128 ;; Hardware stack levels used:    1
  6129 ;; Hardware stack levels required when called:    1
  6130 ;; This function calls:
  6131 ;;		Nothing
  6132 ;; This function is called by:
  6133 ;;		_SetIOConfig
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           
  6138                           ;psect for function _SetIOChange
  6139  0E70                     _SetIOChange:	
  6140                           
  6141                           ;incstack = 0
  6142                           ; Regs used in _SetIOChange: [wreg-fsr0h+status,2+status,0+pclath]
  6143                           ;SetIOChange@Pin stored from wreg
  6144  0E70  00F5               	movwf	SetIOChange@Pin
  6145                           
  6146                           ;IOCycle.c: 195: unsigned char _temp;
  6147                           ;IOCycle.c: 196: if(Pin<5)
  6148  0E71  3005               	movlw	5
  6149  0E72  0275               	subwf	SetIOChange@Pin,w
  6150  0E73  1803               	skipnc
  6151  0E74  0008               	return
  6152                           
  6153                           ;IOCycle.c: 197: if(value==0)
  6154  0E75  0872               	movf	SetIOChange@value,w
  6155  0E76  1D03               	btfss	3,2
  6156  0E77  2E89               	goto	l3855
  6157                           
  6158                           ;IOCycle.c: 198: {
  6159                           ;IOCycle.c: 199: _temp = NOT_IOMASK[Pin];
  6160  0E78  0875               	movf	SetIOChange@Pin,w
  6161  0E79  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  6162  0E7A  0084               	movwf	4
  6163  0E7B  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  6164  0E7C  1803               	skipnc
  6165  0E7D  3E01               	addlw	1
  6166  0E7E  0085               	movwf	5
  6167  0E7F  0800               	movf	0,w	;code access
  6168  0E80  00F3               	movwf	??_SetIOChange
  6169  0E81  0873               	movf	??_SetIOChange,w
  6170  0E82  00F4               	movwf	SetIOChange@_temp
  6171                           
  6172                           ;IOCycle.c: 200: (GIE = 0);
  6173  0E83  138B               	bcf	11,7	;volatile
  6174  0E84  0874               	movf	SetIOChange@_temp,w	;# 
  6175  0E85  0027               	movlb	7	;# 
  6176  0E86  0595               	andwf	21,f	;# 
  6177                           
  6178                           ;IOCycle.c: 207: (GIE = 1);
  6179  0E87  178B               	bsf	11,7	;volatile
  6180                           
  6181                           ;IOCycle.c: 208: }
  6182  0E88  0008               	return
  6183  0E89                     l3855:	
  6184                           
  6185                           ;IOCycle.c: 209: else
  6186                           ;IOCycle.c: 210: {
  6187                           ;IOCycle.c: 211: _temp= IOMASK[Pin];
  6188  0E89  0875               	movf	SetIOChange@Pin,w
  6189  0E8A  3E0B               	addlw	low (_IOMASK| (0+32768))
  6190  0E8B  0084               	movwf	4
  6191  0E8C  3088               	movlw	high (_IOMASK| (0+32768))
  6192  0E8D  1803               	skipnc
  6193  0E8E  3E01               	addlw	1
  6194  0E8F  0085               	movwf	5
  6195  0E90  0800               	movf	0,w	;code access
  6196  0E91  00F3               	movwf	??_SetIOChange
  6197  0E92  0873               	movf	??_SetIOChange,w
  6198  0E93  00F4               	movwf	SetIOChange@_temp
  6199                           
  6200                           ;IOCycle.c: 212: (GIE = 0);
  6201  0E94  138B               	bcf	11,7	;volatile
  6202  0E95  0874               	movf	SetIOChange@_temp,w	;# 
  6203  0E96  0027               	movlb	7	;# 
  6204  0E97  0495               	iorwf	21,f	;# 
  6205                           
  6206                           ;IOCycle.c: 219: (GIE = 1);
  6207  0E98  178B               	bsf	11,7	;volatile
  6208  0E99  0008               	return
  6209  0E9A                     __end_of_SetIOChange:	
  6210                           
  6211                           	psect	text31
  6212  073A                     __ptext31:	
  6213 ;; *************** function _SetAnalogConfig *****************
  6214 ;; Defined at:
  6215 ;;		line 364 in file "main.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  Pin             1    wreg     unsigned char 
  6218 ;; Auto vars:     Size  Location     Type
  6219 ;;  Pin             1    4[COMMON] unsigned char 
  6220 ;;  _tmp            1    5[COMMON] unsigned char 
  6221 ;;  ioconfig        1    3[COMMON] unsigned char 
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      void 
  6224 ;; Registers used:
  6225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6231 ;;      Params:         0       0       0       0       0       0       0
  6232 ;;      Locals:         3       0       0       0       0       0       0
  6233 ;;      Temps:          1       0       0       0       0       0       0
  6234 ;;      Totals:         4       0       0       0       0       0       0
  6235 ;;Total ram usage:        4 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    1
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_SetIOConfig
  6242 ;;		_ReadIO
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           
  6247                           ;psect for function _SetAnalogConfig
  6248  073A                     _SetAnalogConfig:	
  6249                           
  6250                           ;incstack = 0
  6251                           ; Regs used in _SetAnalogConfig: [wreg-fsr1h+status,2+status,0+pclath]
  6252                           ;SetAnalogConfig@Pin stored from wreg
  6253  073A  00F4               	movwf	SetAnalogConfig@Pin
  6254                           
  6255                           ;main.c: 368: unsigned char ioconfig = Setting.IOConfig[Pin];
  6256  073B  0874               	movf	SetAnalogConfig@Pin,w
  6257  073C  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  6258  073D  0086               	movwf	6
  6259  073E  0187               	clrf	7
  6260  073F  0801               	movf	1,w
  6261  0740  00F2               	movwf	??_SetAnalogConfig
  6262  0741  0872               	movf	??_SetAnalogConfig,w
  6263  0742  00F3               	movwf	SetAnalogConfig@ioconfig
  6264                           
  6265                           ;main.c: 369: unsigned char _tmp= IOMASK[Pin];
  6266  0743  0874               	movf	SetAnalogConfig@Pin,w
  6267  0744  3E0B               	addlw	low (_IOMASK| (0+32768))
  6268  0745  0084               	movwf	4
  6269  0746  3088               	movlw	high (_IOMASK| (0+32768))
  6270  0747  1803               	skipnc
  6271  0748  3E01               	addlw	1
  6272  0749  0085               	movwf	5
  6273  074A  0800               	movf	0,w	;code access
  6274  074B  00F2               	movwf	??_SetAnalogConfig
  6275  074C  0872               	movf	??_SetAnalogConfig,w
  6276  074D  00F5               	movwf	SetAnalogConfig@_tmp
  6277                           
  6278                           ;main.c: 370: if(Pin<5)
  6279  074E  3005               	movlw	5
  6280  074F  0274               	subwf	SetAnalogConfig@Pin,w
  6281  0750  1803               	skipnc
  6282  0751  2F5D               	goto	l3869
  6283                           
  6284                           ;main.c: 371: {
  6285                           ;main.c: 372: TRISB |= _tmp;
  6286  0752  0875               	movf	SetAnalogConfig@_tmp,w
  6287  0753  00F2               	movwf	??_SetAnalogConfig
  6288  0754  0872               	movf	??_SetAnalogConfig,w
  6289  0755  0021               	movlb	1	; select bank1
  6290  0756  048D               	iorwf	13,f	;volatile
  6291                           
  6292                           ;main.c: 373: ANSELB |= _tmp;
  6293  0757  0875               	movf	SetAnalogConfig@_tmp,w
  6294  0758  00F2               	movwf	??_SetAnalogConfig
  6295  0759  0872               	movf	??_SetAnalogConfig,w
  6296  075A  0023               	movlb	3	; select bank3
  6297  075B  048D               	iorwf	13,f	;volatile
  6298                           
  6299                           ;main.c: 374: }
  6300  075C  2F67               	goto	l405
  6301  075D                     l3869:	
  6302                           
  6303                           ;main.c: 375: else
  6304                           ;main.c: 376: {
  6305                           ;main.c: 377: TRISA |= _tmp;
  6306  075D  0875               	movf	SetAnalogConfig@_tmp,w
  6307  075E  00F2               	movwf	??_SetAnalogConfig
  6308  075F  0872               	movf	??_SetAnalogConfig,w
  6309  0760  0021               	movlb	1	; select bank1
  6310  0761  048C               	iorwf	12,f	;volatile
  6311                           
  6312                           ;main.c: 378: ANSELA |= _tmp;
  6313  0762  0875               	movf	SetAnalogConfig@_tmp,w
  6314  0763  00F2               	movwf	??_SetAnalogConfig
  6315  0764  0872               	movf	??_SetAnalogConfig,w
  6316  0765  0023               	movlb	3	; select bank3
  6317  0766  048C               	iorwf	12,f	;volatile
  6318  0767                     l405:	
  6319                           
  6320                           ;main.c: 379: }
  6321                           ;main.c: 383: FVRCONbits.ADFVR = ioconfig;
  6322  0767  0022               	movlb	2	; select bank2
  6323  0768  0817               	movf	23,w	;volatile
  6324  0769  0673               	xorwf	SetAnalogConfig@ioconfig,w
  6325  076A  39FC               	andlw	-4
  6326  076B  0673               	xorwf	SetAnalogConfig@ioconfig,w
  6327  076C  0097               	movwf	23	;volatile
  6328                           
  6329                           ;main.c: 386: if(ioconfig== 0)
  6330  076D  0873               	movf	SetAnalogConfig@ioconfig,w
  6331  076E  1D03               	btfss	3,2
  6332  076F  2F74               	goto	l3873
  6333                           
  6334                           ;main.c: 387: ADCON1bits.ADPREF=0;
  6335  0770  30FC               	movlw	-4
  6336  0771  0021               	movlb	1	; select bank1
  6337  0772  059E               	andwf	30,f	;volatile
  6338  0773  0008               	return
  6339  0774                     l3873:	
  6340                           
  6341                           ;main.c: 388: else
  6342                           ;main.c: 389: ADCON1bits.ADPREF=3;
  6343  0774  3003               	movlw	3
  6344  0775  0021               	movlb	1	; select bank1
  6345  0776  049E               	iorwf	30,f	;volatile
  6346  0777  0008               	return
  6347  0778                     __end_of_SetAnalogConfig:	
  6348                           
  6349                           	psect	text32
  6350  0C53                     __ptext32:	
  6351 ;; *************** function _ResetIOCycle *****************
  6352 ;; Defined at:
  6353 ;;		line 123 in file "IOCycle.c"
  6354 ;; Parameters:    Size  Location     Type
  6355 ;;		None
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  loop            1    3[COMMON] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  1    wreg      void 
  6360 ;; Registers used:
  6361 ;;		wreg, status,2, status,0
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : 0/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6367 ;;      Params:         0       0       0       0       0       0       0
  6368 ;;      Locals:         1       0       0       0       0       0       0
  6369 ;;      Temps:          1       0       0       0       0       0       0
  6370 ;;      Totals:         2       0       0       0       0       0       0
  6371 ;;Total ram usage:        2 bytes
  6372 ;; Hardware stack levels used:    1
  6373 ;; Hardware stack levels required when called:    1
  6374 ;; This function calls:
  6375 ;;		Nothing
  6376 ;; This function is called by:
  6377 ;;		_SetIOConfig
  6378 ;;		_main
  6379 ;; This function uses a non-reentrant model
  6380 ;;
  6381                           
  6382                           
  6383                           ;psect for function _ResetIOCycle
  6384  0C53                     _ResetIOCycle:	
  6385                           
  6386                           ;IOCycle.c: 125: unsigned char loop;
  6387                           ;IOCycle.c: 127: for(loop=0;loop<10;loop++)
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _ResetIOCycle: [wreg+status,2+status,0]
  6391  0C53  01F3               	clrf	ResetIOCycle@loop
  6392  0C54                     L18:	
  6393  0C54  300A               	movlw	10
  6394  0C55  0273               	subwf	ResetIOCycle@loop,w
  6395  0C56  1803               	btfsc	3,0
  6396  0C57  0008               	return
  6397                           
  6398                           ;IOCycle.c: 128: {
  6399                           ;IOCycle.c: 130: CurrentIOCycle= 0;
  6400  0C58  0020               	movlb	0	; select bank0
  6401  0C59  01C6               	clrf	_CurrentIOCycle
  6402                           
  6403                           ;IOCycle.c: 131: CurrentIOSensor.Config = Setting.IOConfig[0];
  6404  0C5A  0021               	movlb	1	; select bank1
  6405  0C5B  0858               	movf	_Setting^(0+128),w
  6406  0C5C  00F2               	movwf	??_ResetIOCycle
  6407  0C5D  0872               	movf	??_ResetIOCycle,w
  6408  0C5E  0020               	movlb	0	; select bank0
  6409  0C5F  00C8               	movwf	_CurrentIOSensor
  6410                           
  6411                           ;IOCycle.c: 132: CurrentIOPin=0;
  6412  0C60  01C7               	clrf	_CurrentIOPin
  6413  0C61  3001               	movlw	1
  6414  0C62  00F2               	movwf	??_ResetIOCycle
  6415  0C63  0872               	movf	??_ResetIOCycle,w
  6416  0C64  07F3               	addwf	ResetIOCycle@loop,f
  6417  0C65  2C54               	goto	L18
  6418  0C66                     __end_of_ResetIOCycle:	
  6419                           
  6420                           	psect	text33
  6421  0D09                     __ptext33:	
  6422 ;; *************** function _SaveSetting *****************
  6423 ;; Defined at:
  6424 ;;		line 348 in file "main.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;		None
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  idx             1    1[BANK0 ] unsigned char 
  6429 ;;  pointer         1    0[BANK0 ] PTR unsigned char 
  6430 ;;		 -> Setting(12), 
  6431 ;; Return value:  Size  Location     Type
  6432 ;;                  1    wreg      void 
  6433 ;; Registers used:
  6434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6435 ;; Tracked objects:
  6436 ;;		On entry : 0/0
  6437 ;;		On exit  : 0/0
  6438 ;;		Unchanged: 0/0
  6439 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6440 ;;      Params:         0       0       0       0       0       0       0
  6441 ;;      Locals:         0       2       0       0       0       0       0
  6442 ;;      Temps:          1       0       0       0       0       0       0
  6443 ;;      Totals:         1       2       0       0       0       0       0
  6444 ;;Total ram usage:        3 bytes
  6445 ;; Hardware stack levels used:    1
  6446 ;; Hardware stack levels required when called:    2
  6447 ;; This function calls:
  6448 ;;		_eeprom_write
  6449 ;; This function is called by:
  6450 ;;		_PresetSingleRegister
  6451 ;; This function uses a non-reentrant model
  6452 ;;
  6453                           
  6454                           
  6455                           ;psect for function _SaveSetting
  6456  0D09                     _SaveSetting:	
  6457                           
  6458                           ;main.c: 350: unsigned char idx;
  6459                           ;main.c: 351: unsigned char * pointer = (unsigned char *) &Setting;
  6460                           
  6461                           ;incstack = 0
  6462                           ; Regs used in _SaveSetting: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6463  0D09  30D8               	movlw	(low (_Setting| 0))& (0+255)
  6464  0D0A  00F6               	movwf	??_SaveSetting
  6465  0D0B  0876               	movf	??_SaveSetting,w
  6466  0D0C  0020               	movlb	0	; select bank0
  6467  0D0D  00CA               	movwf	SaveSetting@pointer
  6468                           
  6469                           ;main.c: 353: for(idx=0; idx < sizeof(Setting);idx++)
  6470  0D0E  01CB               	clrf	SaveSetting@idx
  6471  0D0F                     L19:	
  6472  0D0F  300C               	movlw	12
  6473  0D10  024B               	subwf	SaveSetting@idx,w
  6474  0D11  1803               	btfsc	3,0
  6475  0D12  0008               	return
  6476                           
  6477                           ;main.c: 354: eeprom_write(idx, *(pointer++));
  6478  0D13  084A               	movf	SaveSetting@pointer,w
  6479  0D14  0086               	movwf	6
  6480  0D15  0187               	clrf	7
  6481  0D16  0801               	movf	1,w
  6482  0D17  00F6               	movwf	??_SaveSetting
  6483  0D18  0876               	movf	??_SaveSetting,w
  6484  0D19  00F2               	movwf	eeprom_write@value
  6485  0D1A  084B               	movf	SaveSetting@idx,w
  6486  0D1B  318D  2567  318D   	fcall	_eeprom_write
  6487  0D1E  3001               	movlw	1
  6488  0D1F  00F6               	movwf	??_SaveSetting
  6489  0D20  0876               	movf	??_SaveSetting,w
  6490  0D21  0020               	movlb	0	; select bank0
  6491  0D22  07CA               	addwf	SaveSetting@pointer,f
  6492  0D23  3001               	movlw	1
  6493  0D24  00F6               	movwf	??_SaveSetting
  6494  0D25  0876               	movf	??_SaveSetting,w
  6495  0D26  07CB               	addwf	SaveSetting@idx,f
  6496  0D27  2D0F               	goto	L19
  6497  0D28                     __end_of_SaveSetting:	
  6498                           
  6499                           	psect	text34
  6500  0D67                     __ptext34:	
  6501 ;; *************** function _eeprom_write *****************
  6502 ;; Defined at:
  6503 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eewrite.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  addr            1    wreg     unsigned char 
  6506 ;;  value           1    2[COMMON] unsigned char 
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;  addr            1    5[COMMON] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      void 
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6518 ;;      Params:         1       0       0       0       0       0       0
  6519 ;;      Locals:         1       0       0       0       0       0       0
  6520 ;;      Temps:          2       0       0       0       0       0       0
  6521 ;;      Totals:         4       0       0       0       0       0       0
  6522 ;;Total ram usage:        4 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    1
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_SaveSetting
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _eeprom_write
  6534  0D67                     _eeprom_write:	
  6535                           
  6536                           ;incstack = 0
  6537                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  6538                           ;eeprom_write@addr stored from wreg
  6539  0D67  00F5               	movwf	eeprom_write@addr
  6540  0D68                     l837:	
  6541  0D68  0023               	movlb	3	; select bank3
  6542  0D69  1895               	btfsc	21,1	;volsfr
  6543  0D6A  2D68               	goto	l837
  6544  0D6B  0875               	movf	eeprom_write@addr,w
  6545  0D6C  00F3               	movwf	??_eeprom_write
  6546  0D6D  01F4               	clrf	??_eeprom_write+1
  6547  0D6E  0873               	movf	??_eeprom_write,w
  6548  0D6F  0091               	movwf	17	;volatile
  6549  0D70  0874               	movf	??_eeprom_write+1,w
  6550  0D71  0092               	movwf	18	;volatile
  6551  0D72  0872               	movf	eeprom_write@value,w
  6552  0D73  0093               	movwf	19	;volatile
  6553  0D74  303F               	movlw	63
  6554  0D75  00F3               	movwf	??_eeprom_write
  6555  0D76  0873               	movf	??_eeprom_write,w
  6556  0D77  0595               	andwf	21,f	;volsfr
  6557  0D78  0020               	movlb	0	; select bank0
  6558  0D79  1003               	bcf	3,0	;volatile
  6559  0D7A  1B8B               	btfsc	11,7	;volatile
  6560  0D7B  1403               	bsf	3,0	;volatile
  6561  0D7C  138B               	bcf	11,7	;volatile
  6562  0D7D  0023               	movlb	3	; select bank3
  6563  0D7E  1515               	bsf	21,2	;volsfr
  6564  0D7F  3055               	movlw	85
  6565  0D80  0096               	movwf	22	;volsfr
  6566  0D81  30AA               	movlw	170
  6567  0D82  0096               	movwf	22	;volsfr
  6568  0D83  1495               	bsf	21,1	;volsfr
  6569  0D84  1115               	bcf	21,2	;volsfr
  6570  0D85  0020               	movlb	0	; select bank0
  6571  0D86  1C03               	btfss	3,0	;volatile
  6572  0D87  0008               	return
  6573  0D88  178B               	bsf	11,7	;volatile
  6574  0D89  0008               	return
  6575  0D8A                     __end_of_eeprom_write:	
  6576                           
  6577                           	psect	text35
  6578  0CEC                     __ptext35:	
  6579 ;; *************** function _ForceSingleCoil *****************
  6580 ;; Defined at:
  6581 ;;		line 1515 in file "main.c"
  6582 ;; Parameters:    Size  Location     Type
  6583 ;;		None
  6584 ;; Auto vars:     Size  Location     Type
  6585 ;;		None
  6586 ;; Return value:  Size  Location     Type
  6587 ;;                  1    wreg      void 
  6588 ;; Registers used:
  6589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6590 ;; Tracked objects:
  6591 ;;		On entry : 0/0
  6592 ;;		On exit  : 0/0
  6593 ;;		Unchanged: 0/0
  6594 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6595 ;;      Params:         0       0       0       0       0       0       0
  6596 ;;      Locals:         0       0       0       0       0       0       0
  6597 ;;      Temps:          0       1       0       0       0       0       0
  6598 ;;      Totals:         0       1       0       0       0       0       0
  6599 ;;Total ram usage:        1 bytes
  6600 ;; Hardware stack levels used:    1
  6601 ;; Hardware stack levels required when called:    4
  6602 ;; This function calls:
  6603 ;;		_SendFrameError
  6604 ;;		_SendPresetFrame
  6605 ;;		_SetSingleCoil
  6606 ;; This function is called by:
  6607 ;;		_ExecuteCommand
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function _ForceSingleCoil
  6613  0CEC                     _ForceSingleCoil:	
  6614                           
  6615                           ;main.c: 1517: if(ModbusAddress < 10)
  6616                           
  6617                           ;incstack = 0
  6618                           ; Regs used in _ForceSingleCoil: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6619  0CEC  3000               	movlw	0
  6620  0CED  0020               	movlb	0	; select bank0
  6621  0CEE  0225               	subwf	_ModbusAddress+1,w
  6622  0CEF  300A               	movlw	10
  6623  0CF0  1903               	skipnz
  6624  0CF1  0224               	subwf	_ModbusAddress,w
  6625  0CF2  1803               	skipnc
  6626  0CF3  2D05               	goto	l4311
  6627                           
  6628                           ;main.c: 1518: {
  6629                           ;main.c: 1520: SetSingleCoil(ModbusAddress, (unsigned char) ( ModbusData ==0 ? 0 : 1));
  6630  0CF4  0822               	movf	_ModbusData,w
  6631  0CF5  0423               	iorwf	_ModbusData+1,w
  6632  0CF6  1903               	btfsc	3,2
  6633  0CF7  2CFA               	goto	u4330
  6634  0CF8  3001               	movlw	1
  6635  0CF9  2CFB               	goto	u4340
  6636  0CFA                     u4330:	
  6637  0CFA  3000               	movlw	0
  6638  0CFB                     u4340:	
  6639  0CFB  00D4               	movwf	??_ForceSingleCoil
  6640  0CFC  0854               	movf	??_ForceSingleCoil,w
  6641  0CFD  00CA               	movwf	SetSingleCoil@value
  6642  0CFE  0824               	movf	_ModbusAddress,w
  6643  0CFF  3187  27EE  318C   	fcall	_SetSingleCoil
  6644                           
  6645                           ;main.c: 1521: SendPresetFrame();
  6646  0D02  318C  24A3         	fcall	_SendPresetFrame
  6647                           
  6648                           ;main.c: 1523: }
  6649  0D04  0008               	return
  6650  0D05                     l4311:	
  6651                           
  6652                           ;main.c: 1524: else
  6653                           ;main.c: 1525: SendFrameError( 2);
  6654  0D05  3002               	movlw	2
  6655  0D06  318C  248D         	fcall	_SendFrameError
  6656  0D08  0008               	return
  6657  0D09                     __end_of_ForceSingleCoil:	
  6658                           
  6659                           	psect	text36
  6660  07EE                     __ptext36:	
  6661 ;; *************** function _SetSingleCoil *****************
  6662 ;; Defined at:
  6663 ;;		line 1493 in file "main.c"
  6664 ;; Parameters:    Size  Location     Type
  6665 ;;  thePin          1    wreg     unsigned char 
  6666 ;;  value           1    0[BANK0 ] unsigned char 
  6667 ;; Auto vars:     Size  Location     Type
  6668 ;;  thePin          1    2[BANK0 ] unsigned char 
  6669 ;; Return value:  Size  Location     Type
  6670 ;;                  1    wreg      void 
  6671 ;; Registers used:
  6672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6673 ;; Tracked objects:
  6674 ;;		On entry : 0/0
  6675 ;;		On exit  : 0/0
  6676 ;;		Unchanged: 0/0
  6677 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6678 ;;      Params:         0       1       0       0       0       0       0
  6679 ;;      Locals:         0       1       0       0       0       0       0
  6680 ;;      Temps:          0       1       0       0       0       0       0
  6681 ;;      Totals:         0       3       0       0       0       0       0
  6682 ;;Total ram usage:        3 bytes
  6683 ;; Hardware stack levels used:    1
  6684 ;; Hardware stack levels required when called:    2
  6685 ;; This function calls:
  6686 ;;		_WriteIO
  6687 ;; This function is called by:
  6688 ;;		_WriteAllCoils
  6689 ;;		_ForceSingleCoil
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           
  6694                           ;psect for function _SetSingleCoil
  6695  07EE                     _SetSingleCoil:	
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _SetSingleCoil: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6699                           ;SetSingleCoil@thePin stored from wreg
  6700  07EE  0020               	movlb	0	; select bank0
  6701  07EF  00CC               	movwf	SetSingleCoil@thePin
  6702                           
  6703                           ;main.c: 1496: if(Setting.IOConfig[thePin] != 6)
  6704  07F0  084C               	movf	SetSingleCoil@thePin,w
  6705  07F1  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  6706  07F2  0086               	movwf	6
  6707  07F3  0187               	clrf	7
  6708  07F4  3006               	movlw	6
  6709  07F5  0601               	xorwf	1,w
  6710  07F6  1D03               	btfss	3,2
  6711  07F7  0008               	return
  6712                           
  6713                           ;main.c: 1498: WriteIO(thePin,value);
  6714                           
  6715                           ;main.c: 1497: return;
  6716  07F8  084A               	movf	SetSingleCoil@value,w
  6717  07F9  00CB               	movwf	??_SetSingleCoil
  6718  07FA  084B               	movf	??_SetSingleCoil,w
  6719  07FB  00F2               	movwf	WriteIO@value
  6720  07FC  084C               	movf	SetSingleCoil@thePin,w
  6721  07FD  3186  26F9         	fcall	_WriteIO
  6722  07FF  0008               	return
  6723  0800                     __end_of_SetSingleCoil:	
  6724                           
  6725                           	psect	text37
  6726  06F9                     __ptext37:	
  6727 ;; *************** function _WriteIO *****************
  6728 ;; Defined at:
  6729 ;;		line 150 in file "IOCycle.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;  Pin             1    wreg     unsigned char 
  6732 ;;  value           1    2[COMMON] unsigned char 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;  Pin             1    6[COMMON] unsigned char 
  6735 ;;  nmask           1    5[COMMON] unsigned char 
  6736 ;;  mask            1    4[COMMON] unsigned char 
  6737 ;; Return value:  Size  Location     Type
  6738 ;;                  1    wreg      void 
  6739 ;; Registers used:
  6740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6741 ;; Tracked objects:
  6742 ;;		On entry : 0/0
  6743 ;;		On exit  : 0/0
  6744 ;;		Unchanged: 0/0
  6745 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6746 ;;      Params:         1       0       0       0       0       0       0
  6747 ;;      Locals:         3       0       0       0       0       0       0
  6748 ;;      Temps:          1       0       0       0       0       0       0
  6749 ;;      Totals:         5       0       0       0       0       0       0
  6750 ;;Total ram usage:        5 bytes
  6751 ;; Hardware stack levels used:    1
  6752 ;; Hardware stack levels required when called:    1
  6753 ;; This function calls:
  6754 ;;		Nothing
  6755 ;; This function is called by:
  6756 ;;		_SetSingleCoil
  6757 ;; This function uses a non-reentrant model
  6758 ;;
  6759                           
  6760                           
  6761                           ;psect for function _WriteIO
  6762  06F9                     _WriteIO:	
  6763                           
  6764                           ;incstack = 0
  6765                           ; Regs used in _WriteIO: [wreg-fsr0h+status,2+status,0+pclath]
  6766                           ;WriteIO@Pin stored from wreg
  6767  06F9  00F6               	movwf	WriteIO@Pin
  6768                           
  6769                           ;IOCycle.c: 153: unsigned char mask = IOMASK[Pin];
  6770  06FA  0876               	movf	WriteIO@Pin,w
  6771  06FB  3E0B               	addlw	low (_IOMASK| (0+32768))
  6772  06FC  0084               	movwf	4
  6773  06FD  3088               	movlw	high (_IOMASK| (0+32768))
  6774  06FE  1803               	skipnc
  6775  06FF  3E01               	addlw	1
  6776  0700  0085               	movwf	5
  6777  0701  0800               	movf	0,w	;code access
  6778  0702  00F3               	movwf	??_WriteIO
  6779  0703  0873               	movf	??_WriteIO,w
  6780  0704  00F4               	movwf	WriteIO@mask
  6781                           
  6782                           ;IOCycle.c: 154: unsigned char nmask = NOT_IOMASK[Pin];
  6783  0705  0876               	movf	WriteIO@Pin,w
  6784  0706  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  6785  0707  0084               	movwf	4
  6786  0708  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  6787  0709  1803               	skipnc
  6788  070A  3E01               	addlw	1
  6789  070B  0085               	movwf	5
  6790  070C  0800               	movf	0,w	;code access
  6791  070D  00F3               	movwf	??_WriteIO
  6792  070E  0873               	movf	??_WriteIO,w
  6793  070F  00F5               	movwf	WriteIO@nmask
  6794                           
  6795                           ;IOCycle.c: 156: if(Pin <5)
  6796  0710  3005               	movlw	5
  6797  0711  0276               	subwf	WriteIO@Pin,w
  6798  0712  1803               	skipnc
  6799  0713  2F27               	goto	l2583
  6800                           
  6801                           ;IOCycle.c: 157: {
  6802                           ;IOCycle.c: 158: if(value==0)
  6803  0714  0872               	movf	WriteIO@value,w
  6804  0715  1D03               	btfss	3,2
  6805  0716  2F1F               	goto	l95
  6806                           
  6807                           ;IOCycle.c: 159: {
  6808                           ;IOCycle.c: 160: (GIE = 0);
  6809  0717  138B               	bcf	11,7	;volatile
  6810                           
  6811                           ;IOCycle.c: 161: PORTB &= nmask;
  6812  0718  0875               	movf	WriteIO@nmask,w
  6813  0719  00F3               	movwf	??_WriteIO
  6814  071A  0873               	movf	??_WriteIO,w
  6815  071B  0020               	movlb	0	; select bank0
  6816  071C  058D               	andwf	13,f	;volatile
  6817                           
  6818                           ;IOCycle.c: 162: (GIE = 1);
  6819  071D  178B               	bsf	11,7	;volatile
  6820                           
  6821                           ;IOCycle.c: 163: }
  6822  071E  0008               	return
  6823  071F                     l95:	
  6824                           
  6825                           ;IOCycle.c: 164: else
  6826                           ;IOCycle.c: 165: {
  6827                           ;IOCycle.c: 166: (GIE = 0);
  6828  071F  138B               	bcf	11,7	;volatile
  6829                           
  6830                           ;IOCycle.c: 167: PORTB |= mask;
  6831  0720  0874               	movf	WriteIO@mask,w
  6832  0721  00F3               	movwf	??_WriteIO
  6833  0722  0873               	movf	??_WriteIO,w
  6834  0723  0020               	movlb	0	; select bank0
  6835  0724  048D               	iorwf	13,f	;volatile
  6836                           
  6837                           ;IOCycle.c: 168: (GIE = 1);
  6838  0725  178B               	bsf	11,7	;volatile
  6839                           
  6840                           ;IOCycle.c: 169: }
  6841                           ;IOCycle.c: 171: }
  6842  0726  0008               	return
  6843  0727                     l2583:	
  6844                           
  6845                           ;IOCycle.c: 172: else
  6846                           ;IOCycle.c: 173: {
  6847                           ;IOCycle.c: 174: if(value==0)
  6848  0727  0872               	movf	WriteIO@value,w
  6849  0728  1D03               	btfss	3,2
  6850  0729  2F32               	goto	l98
  6851                           
  6852                           ;IOCycle.c: 175: {
  6853                           ;IOCycle.c: 176: (GIE = 0);
  6854  072A  138B               	bcf	11,7	;volatile
  6855                           
  6856                           ;IOCycle.c: 177: PORTA &= nmask;
  6857  072B  0875               	movf	WriteIO@nmask,w
  6858  072C  00F3               	movwf	??_WriteIO
  6859  072D  0873               	movf	??_WriteIO,w
  6860  072E  0020               	movlb	0	; select bank0
  6861  072F  058C               	andwf	12,f	;volatile
  6862                           
  6863                           ;IOCycle.c: 178: (GIE = 1);
  6864  0730  178B               	bsf	11,7	;volatile
  6865                           
  6866                           ;IOCycle.c: 179: }
  6867  0731  0008               	return
  6868  0732                     l98:	
  6869                           
  6870                           ;IOCycle.c: 180: else
  6871                           ;IOCycle.c: 181: {
  6872                           ;IOCycle.c: 182: (GIE = 0);
  6873  0732  138B               	bcf	11,7	;volatile
  6874                           
  6875                           ;IOCycle.c: 183: PORTA |= mask;
  6876  0733  0874               	movf	WriteIO@mask,w
  6877  0734  00F3               	movwf	??_WriteIO
  6878  0735  0873               	movf	??_WriteIO,w
  6879  0736  0020               	movlb	0	; select bank0
  6880  0737  048C               	iorwf	12,f	;volatile
  6881                           
  6882                           ;IOCycle.c: 184: (GIE = 1);
  6883  0738  178B               	bsf	11,7	;volatile
  6884  0739  0008               	return
  6885  073A                     __end_of_WriteIO:	
  6886                           
  6887                           	psect	text38
  6888  0CA3                     __ptext38:	
  6889 ;; *************** function _SendPresetFrame *****************
  6890 ;; Defined at:
  6891 ;;		line 1120 in file "main.c"
  6892 ;; Parameters:    Size  Location     Type
  6893 ;;		None
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  1    wreg      void 
  6898 ;; Registers used:
  6899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6905 ;;      Params:         0       0       0       0       0       0       0
  6906 ;;      Locals:         0       0       0       0       0       0       0
  6907 ;;      Temps:          0       0       0       0       0       0       0
  6908 ;;      Totals:         0       0       0       0       0       0       0
  6909 ;;Total ram usage:        0 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    3
  6912 ;; This function calls:
  6913 ;;		_InitModbusPacket
  6914 ;;		_SendModbusPacket
  6915 ;; This function is called by:
  6916 ;;		_WriteAllCoils
  6917 ;;		_ForceSingleCoil
  6918 ;;		_PresetSingleRegister
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function _SendPresetFrame
  6924  0CA3                     _SendPresetFrame:	
  6925                           
  6926                           ;main.c: 1122: InitModbusPacket();
  6927                           
  6928                           ;incstack = 0
  6929                           ; Regs used in _SendPresetFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6930  0CA3  318B  23F6  318C   	fcall	_InitModbusPacket
  6931  0CA6  0020               	banksel	_ModbusAddress	;# 
  6932  0CA7  0825               	movf	_ModbusAddress+1,w	;# 
  6933  0CA8  0021               	banksel	_ModbusPacketBuffer	;# 
  6934  0CA9  00BA               	movwf	(_ModbusPacketBuffer& (0+127)+2)	;# 
  6935  0CAA  0020               	banksel	_ModbusAddress	;# 
  6936  0CAB  0824               	movf	_ModbusAddress,w	;# 
  6937  0CAC  0021               	banksel	_ModbusPacketBuffer	;# 
  6938  0CAD  00BB               	movwf	(_ModbusPacketBuffer& (0+127)+3)	;# 
  6939  0CAE  0020               	banksel	_ModbusData	;# 
  6940  0CAF  0823               	movf	_ModbusData+1,w	;# 
  6941  0CB0  0021               	banksel	_ModbusPacketBuffer	;# 
  6942  0CB1  00BC               	movwf	(_ModbusPacketBuffer& (0+127)+4)	;# 
  6943  0CB2  0020               	banksel	_ModbusData	;# 
  6944  0CB3  0822               	movf	_ModbusData,w	;# 
  6945  0CB4  0021               	banksel	_ModbusPacketBuffer	;# 
  6946  0CB5  00BD               	movwf	(_ModbusPacketBuffer& (0+127)+5)	;# 
  6947                           
  6948                           ;main.c: 1155: SendModbusPacket(6);
  6949  0CB6  3006               	movlw	6
  6950  0CB7  318E  26C6         	fcall	_SendModbusPacket
  6951  0CB9  0008               	return
  6952  0CBA                     __end_of_SendPresetFrame:	
  6953                           
  6954                           	psect	text39
  6955  0C8D                     __ptext39:	
  6956 ;; *************** function _SendFrameError *****************
  6957 ;; Defined at:
  6958 ;;		line 922 in file "main.c"
  6959 ;; Parameters:    Size  Location     Type
  6960 ;;  ErrorCode       1    wreg     unsigned char 
  6961 ;; Auto vars:     Size  Location     Type
  6962 ;;  ErrorCode       1    9[BANK0 ] unsigned char 
  6963 ;; Return value:  Size  Location     Type
  6964 ;;                  1    wreg      void 
  6965 ;; Registers used:
  6966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6967 ;; Tracked objects:
  6968 ;;		On entry : 0/0
  6969 ;;		On exit  : 0/0
  6970 ;;		Unchanged: 0/0
  6971 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6972 ;;      Params:         0       0       0       0       0       0       0
  6973 ;;      Locals:         0       1       0       0       0       0       0
  6974 ;;      Temps:          0       1       0       0       0       0       0
  6975 ;;      Totals:         0       2       0       0       0       0       0
  6976 ;;Total ram usage:        2 bytes
  6977 ;; Hardware stack levels used:    1
  6978 ;; Hardware stack levels required when called:    3
  6979 ;; This function calls:
  6980 ;;		_InitModbusPacket
  6981 ;;		_SendModbusPacket
  6982 ;; This function is called by:
  6983 ;;		_SendBytesFrame
  6984 ;;		_ReadHoldingRegister
  6985 ;;		_ReadCurrentRegister
  6986 ;;		_ReadInputStatus
  6987 ;;		_ForceSingleCoil
  6988 ;;		_PresetSingleRegister
  6989 ;;		_ExecuteCommand
  6990 ;; This function uses a non-reentrant model
  6991 ;;
  6992                           
  6993                           
  6994                           ;psect for function _SendFrameError
  6995  0C8D                     _SendFrameError:	
  6996                           
  6997                           ;incstack = 0
  6998                           ; Regs used in _SendFrameError: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6999                           ;SendFrameError@ErrorCode stored from wreg
  7000  0C8D  0020               	movlb	0	; select bank0
  7001  0C8E  00D3               	movwf	SendFrameError@ErrorCode
  7002                           
  7003                           ;main.c: 924: InitModbusPacket();
  7004  0C8F  318B  23F6  318C   	fcall	_InitModbusPacket
  7005                           
  7006                           ;main.c: 925: ModbusPacketBuffer[1]= (unsigned char) (ModbusFunction | 0x80);
  7007  0C92  0020               	movlb	0	; select bank0
  7008  0C93  0837               	movf	_ModbusFunction,w
  7009  0C94  3880               	iorlw	128
  7010  0C95  00D2               	movwf	??_SendFrameError
  7011  0C96  0852               	movf	??_SendFrameError,w
  7012  0C97  0021               	movlb	1	; select bank1
  7013  0C98  00B9               	movwf	(_ModbusPacketBuffer^(0+128)+1)
  7014                           
  7015                           ;main.c: 926: ModbusPacketBuffer[2]= ErrorCode;
  7016  0C99  0020               	movlb	0	; select bank0
  7017  0C9A  0853               	movf	SendFrameError@ErrorCode,w
  7018  0C9B  00D2               	movwf	??_SendFrameError
  7019  0C9C  0852               	movf	??_SendFrameError,w
  7020  0C9D  0021               	movlb	1	; select bank1
  7021  0C9E  00BA               	movwf	(_ModbusPacketBuffer^(0+128)+2)
  7022                           
  7023                           ;main.c: 927: SendModbusPacket(3);
  7024  0C9F  3003               	movlw	3
  7025  0CA0  318E  26C6         	fcall	_SendModbusPacket
  7026  0CA2  0008               	return
  7027  0CA3                     __end_of_SendFrameError:	
  7028                           
  7029                           	psect	text40
  7030  0EC6                     __ptext40:	
  7031 ;; *************** function _SendModbusPacket *****************
  7032 ;; Defined at:
  7033 ;;		line 894 in file "main.c"
  7034 ;; Parameters:    Size  Location     Type
  7035 ;;  BufferSize      1    wreg     unsigned char 
  7036 ;; Auto vars:     Size  Location     Type
  7037 ;;  BufferSize      1    4[BANK0 ] unsigned char 
  7038 ;;  CRC             2    5[BANK0 ] unsigned short 
  7039 ;;  loop            1    7[BANK0 ] unsigned char 
  7040 ;; Return value:  Size  Location     Type
  7041 ;;                  1    wreg      void 
  7042 ;; Registers used:
  7043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7044 ;; Tracked objects:
  7045 ;;		On entry : 0/0
  7046 ;;		On exit  : 0/0
  7047 ;;		Unchanged: 0/0
  7048 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7049 ;;      Params:         0       0       0       0       0       0       0
  7050 ;;      Locals:         0       4       0       0       0       0       0
  7051 ;;      Temps:          1       0       0       0       0       0       0
  7052 ;;      Totals:         1       4       0       0       0       0       0
  7053 ;;Total ram usage:        5 bytes
  7054 ;; Hardware stack levels used:    1
  7055 ;; Hardware stack levels required when called:    2
  7056 ;; This function calls:
  7057 ;;		_CRC16
  7058 ;;		_putch
  7059 ;; This function is called by:
  7060 ;;		_SendFrameError
  7061 ;;		_SendReadByteFrame
  7062 ;;		_SendReadFrame
  7063 ;;		_SendReadRegistersFrame
  7064 ;;		_SendBytesFrame
  7065 ;;		_SendPresetFrame
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           
  7070                           ;psect for function _SendModbusPacket
  7071  0EC6                     _SendModbusPacket:	
  7072                           
  7073                           ;incstack = 0
  7074                           ; Regs used in _SendModbusPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7075                           ;SendModbusPacket@BufferSize stored from wreg
  7076  0EC6  0020               	movlb	0	; select bank0
  7077  0EC7  00CE               	movwf	SendModbusPacket@BufferSize
  7078                           
  7079                           ;main.c: 896: unsigned short CRC;
  7080                           ;main.c: 897: unsigned char loop;
  7081                           ;main.c: 899: if(ModbusSlave==0) return;
  7082  0EC8  0836               	movf	_ModbusSlave,w
  7083  0EC9  1903               	btfsc	3,2
  7084  0ECA  0008               	return
  7085                           
  7086                           ;main.c: 901: CRC = CRC16(ModbusPacketBuffer,BufferSize);
  7087  0ECB  084E               	movf	SendModbusPacket@BufferSize,w
  7088  0ECC  00F6               	movwf	??_SendModbusPacket
  7089  0ECD  0876               	movf	??_SendModbusPacket,w
  7090  0ECE  00F2               	movwf	CRC16@num
  7091  0ECF  30B8               	movlw	(low (_ModbusPacketBuffer| 0))& (0+255)
  7092  0ED0  3186  2675  318E   	fcall	_CRC16
  7093  0ED3  0873               	movf	?_CRC16+1,w
  7094  0ED4  0020               	movlb	0	; select bank0
  7095  0ED5  00D0               	movwf	SendModbusPacket@CRC+1
  7096  0ED6  0872               	movf	?_CRC16,w
  7097  0ED7  00CF               	movwf	SendModbusPacket@CRC
  7098                           
  7099                           ;main.c: 903: ModbusOnTransmit=1;
  7100  0ED8  156C               	bsf	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  7101                           
  7102                           ;main.c: 904: RB0=1;
  7103  0ED9  140D               	bsf	13,0	;volatile
  7104                           
  7105                           ;main.c: 906: for(loop=0;loop<BufferSize;loop++)
  7106  0EDA  01D1               	clrf	SendModbusPacket@loop
  7107  0EDB                     l3823:	
  7108  0EDB  084E               	movf	SendModbusPacket@BufferSize,w
  7109  0EDC  0251               	subwf	SendModbusPacket@loop,w
  7110  0EDD  1803               	btfsc	3,0
  7111  0EDE  2EED               	goto	l3825
  7112                           
  7113                           ;main.c: 907: putch(ModbusPacketBuffer[loop]);
  7114  0EDF  0851               	movf	SendModbusPacket@loop,w
  7115  0EE0  3EB8               	addlw	(low (_ModbusPacketBuffer| 0))& (0+255)
  7116  0EE1  0086               	movwf	6
  7117  0EE2  0187               	clrf	7
  7118  0EE3  0801               	movf	1,w
  7119  0EE4  318D  258A  318E   	fcall	_putch
  7120  0EE7  3001               	movlw	1
  7121  0EE8  00F6               	movwf	??_SendModbusPacket
  7122  0EE9  0876               	movf	??_SendModbusPacket,w
  7123  0EEA  0020               	movlb	0	; select bank0
  7124  0EEB  07D1               	addwf	SendModbusPacket@loop,f
  7125  0EEC  2EDB               	goto	l3823
  7126  0EED                     l3825:	
  7127                           
  7128                           ;main.c: 909: putch(CRC & 0xFF);
  7129  0EED  084F               	movf	SendModbusPacket@CRC,w
  7130  0EEE  318D  258A  318E   	fcall	_putch
  7131                           
  7132                           ;main.c: 910: putch(CRC >> 8);
  7133  0EF1  0020               	movlb	0	; select bank0
  7134  0EF2  0850               	movf	SendModbusPacket@CRC+1,w
  7135  0EF3  318D  258A         	fcall	_putch
  7136  0EF5  0008               	return
  7137  0EF6                     __end_of_SendModbusPacket:	
  7138                           
  7139                           	psect	text41
  7140  0D8A                     __ptext41:	
  7141 ;; *************** function _putch *****************
  7142 ;; Defined at:
  7143 ;;		line 843 in file "main.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  char_out        1    wreg     unsigned char 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;  char_out        1    3[COMMON] unsigned char 
  7148 ;;  temp            1    4[COMMON] unsigned char 
  7149 ;; Return value:  Size  Location     Type
  7150 ;;                  1    wreg      void 
  7151 ;; Registers used:
  7152 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7153 ;; Tracked objects:
  7154 ;;		On entry : 0/0
  7155 ;;		On exit  : 0/0
  7156 ;;		Unchanged: 0/0
  7157 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7158 ;;      Params:         0       0       0       0       0       0       0
  7159 ;;      Locals:         2       0       0       0       0       0       0
  7160 ;;      Temps:          1       0       0       0       0       0       0
  7161 ;;      Totals:         3       0       0       0       0       0       0
  7162 ;;Total ram usage:        3 bytes
  7163 ;; Hardware stack levels used:    1
  7164 ;; Hardware stack levels required when called:    1
  7165 ;; This function calls:
  7166 ;;		Nothing
  7167 ;; This function is called by:
  7168 ;;		_SendModbusPacket
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           
  7173                           ;psect for function _putch
  7174  0D8A                     _putch:	
  7175                           
  7176                           ;incstack = 0
  7177                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0]
  7178                           ;putch@char_out stored from wreg
  7179  0D8A  00F3               	movwf	putch@char_out
  7180                           
  7181                           ;main.c: 845: unsigned char temp;
  7182                           ;main.c: 847: SerialSum+= (unsigned char) char_out;
  7183  0D8B  0873               	movf	putch@char_out,w
  7184  0D8C  00F2               	movwf	??_putch
  7185  0D8D  0872               	movf	??_putch,w
  7186  0D8E  0020               	movlb	0	; select bank0
  7187  0D8F  07B9               	addwf	_SerialSum,f
  7188                           
  7189                           ;main.c: 849: temp = (unsigned char) (InFiFo + 1);
  7190  0D90  083C               	movf	_InFiFo,w	;volatile
  7191  0D91  3E01               	addlw	1
  7192  0D92  00F2               	movwf	??_putch
  7193  0D93  0872               	movf	??_putch,w
  7194  0D94  00F4               	movwf	putch@temp
  7195                           
  7196                           ;main.c: 850: if(temp >= 32)
  7197  0D95  3020               	movlw	32
  7198  0D96  0274               	subwf	putch@temp,w
  7199  0D97  1803               	btfsc	3,0
  7200                           
  7201                           ;main.c: 851: temp = 0;
  7202  0D98  01F4               	clrf	putch@temp
  7203  0D99                     l3799:	
  7204                           ;main.c: 854: while(temp == OutFiFo);
  7205                           
  7206  0D99  0874               	movf	putch@temp,w
  7207  0D9A  0678               	xorwf	_OutFiFo,w	;volatile
  7208  0D9B  1903               	skipnz
  7209  0D9C  2D99               	goto	l3799
  7210                           
  7211                           ;main.c: 857: SerialBuffer[InFiFo]=char_out;
  7212  0D9D  0873               	movf	putch@char_out,w
  7213  0D9E  00F2               	movwf	??_putch
  7214  0D9F  0020               	movlb	0	; select bank0
  7215  0DA0  083C               	movf	_InFiFo,w
  7216  0DA1  3E40               	addlw	(low (_SerialBuffer| (0+256)))& (0+255)
  7217  0DA2  0086               	movwf	6
  7218  0DA3  3001               	movlw	1	; select bank2/3
  7219  0DA4  0087               	movwf	7
  7220  0DA5  0872               	movf	??_putch,w
  7221  0DA6  0081               	movwf	1
  7222                           
  7223                           ;main.c: 859: InFiFo= temp;
  7224  0DA7  0874               	movf	putch@temp,w
  7225  0DA8  00F2               	movwf	??_putch
  7226  0DA9  0872               	movf	??_putch,w
  7227  0DAA  00BC               	movwf	_InFiFo	;volatile
  7228                           
  7229                           ;main.c: 862: TXIE=1;
  7230  0DAB  0021               	movlb	1	; select bank1
  7231  0DAC  1611               	bsf	17,4	;volatile
  7232  0DAD  0008               	return
  7233  0DAE                     __end_of_putch:	
  7234                           
  7235                           	psect	text42
  7236  0BF6                     __ptext42:	
  7237 ;; *************** function _InitModbusPacket *****************
  7238 ;; Defined at:
  7239 ;;		line 915 in file "main.c"
  7240 ;; Parameters:    Size  Location     Type
  7241 ;;		None
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7253 ;;      Params:         0       0       0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0
  7255 ;;      Temps:          1       0       0       0       0       0       0
  7256 ;;      Totals:         1       0       0       0       0       0       0
  7257 ;;Total ram usage:        1 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:    1
  7260 ;; This function calls:
  7261 ;;		Nothing
  7262 ;; This function is called by:
  7263 ;;		_SendFrameError
  7264 ;;		_SendReadByteFrame
  7265 ;;		_SendReadFrame
  7266 ;;		_SendReadRegistersFrame
  7267 ;;		_SendBytesFrame
  7268 ;;		_SendPresetFrame
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           
  7273                           ;psect for function _InitModbusPacket
  7274  0BF6                     _InitModbusPacket:	
  7275                           
  7276                           ;main.c: 917: ModbusPacketBuffer[0]=Setting.SlaveAddress;
  7277                           
  7278                           ;incstack = 0
  7279                           ; Regs used in _InitModbusPacket: [wreg]
  7280  0BF6  0021               	movlb	1	; select bank1
  7281  0BF7  0862               	movf	(_Setting^(0+128)+10),w
  7282  0BF8  00F2               	movwf	??_InitModbusPacket
  7283  0BF9  0872               	movf	??_InitModbusPacket,w
  7284  0BFA  00B8               	movwf	_ModbusPacketBuffer^(0+128)
  7285                           
  7286                           ;main.c: 918: ModbusPacketBuffer[1]=ModbusFunction;
  7287  0BFB  0020               	movlb	0	; select bank0
  7288  0BFC  0837               	movf	_ModbusFunction,w
  7289  0BFD  00F2               	movwf	??_InitModbusPacket
  7290  0BFE  0872               	movf	??_InitModbusPacket,w
  7291  0BFF  0021               	movlb	1	; select bank1
  7292  0C00  00B9               	movwf	(_ModbusPacketBuffer^(0+128)+1)
  7293  0C01  0008               	return
  7294  0C02                     __end_of_InitModbusPacket:	
  7295                           
  7296                           	psect	text43
  7297  0F90                     __ptext43:	
  7298 ;; *************** function _DoIOCycle *****************
  7299 ;; Defined at:
  7300 ;;		line 81 in file "IOCycle.c"
  7301 ;; Parameters:    Size  Location     Type
  7302 ;;		None
  7303 ;; Auto vars:     Size  Location     Type
  7304 ;;  SensorPt        1    6[COMMON] PTR struct .
  7305 ;;		 -> IOSensorData(60), 
  7306 ;;  loop            1    0        unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7316 ;;      Params:         0       0       0       0       0       0       0
  7317 ;;      Locals:         1       0       0       0       0       0       0
  7318 ;;      Temps:          0       2       0       0       0       0       0
  7319 ;;      Totals:         1       2       0       0       0       0       0
  7320 ;;Total ram usage:        3 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    2
  7323 ;; This function calls:
  7324 ;;		_DealWithError
  7325 ;;		_ScanNextIOPin
  7326 ;;		___bmul
  7327 ;; This function is called by:
  7328 ;;		_main
  7329 ;; This function uses a non-reentrant model
  7330 ;;
  7331                           
  7332                           
  7333                           ;psect for function _DoIOCycle
  7334  0F90                     _DoIOCycle:	
  7335                           
  7336                           ;IOCycle.c: 85: SensorDataUnion *SensorPt;
  7337                           ;IOCycle.c: 87: unsigned char loop;
  7338                           ;IOCycle.c: 89: if(CurrentIOCycle== 99)
  7339                           
  7340                           ;incstack = 0
  7341                           ; Regs used in _DoIOCycle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7342  0F90  3063               	movlw	99
  7343  0F91  0020               	movlb	0	; select bank0
  7344  0F92  0646               	xorwf	_CurrentIOCycle,w
  7345  0F93  1D03               	btfss	3,2
  7346  0F94  2FC5               	goto	l4433
  7347                           
  7348                           ;IOCycle.c: 90: {
  7349                           ;IOCycle.c: 91: if(CurrentIOStatus==0)
  7350  0F95  0849               	movf	_CurrentIOStatus,w
  7351  0F96  1D03               	btfss	3,2
  7352  0F97  2F9B               	goto	l76
  7353                           
  7354                           ;IOCycle.c: 92: DealWithError();
  7355  0F98  318B  23E5  318F   	fcall	_DealWithError
  7356  0F9B                     l76:	
  7357                           
  7358                           ;IOCycle.c: 96: SensorPt = &IOSensorData[CurrentIOPin];
  7359  0F9B  3006               	movlw	6
  7360  0F9C  0020               	movlb	0	; select bank0
  7361  0F9D  00CA               	movwf	??_DoIOCycle
  7362  0F9E  084A               	movf	??_DoIOCycle,w
  7363  0F9F  00F2               	movwf	___bmul@multiplicand
  7364  0FA0  0847               	movf	_CurrentIOPin,w
  7365  0FA1  318C  2431  318F   	fcall	___bmul
  7366  0FA4  3EA0               	addlw	160
  7367  0FA5  0020               	movlb	0	; select bank0
  7368  0FA6  00CB               	movwf	??_DoIOCycle+1
  7369  0FA7  084B               	movf	??_DoIOCycle+1,w
  7370  0FA8  00F6               	movwf	DoIOCycle@SensorPt
  7371                           
  7372                           ;IOCycle.c: 101: if(CurrentIOStatus==0xff)
  7373  0FA9  0A49               	incf	_CurrentIOStatus,w
  7374  0FAA  1D03               	btfss	3,2
  7375  0FAB  2FB5               	goto	l4427
  7376                           
  7377                           ;IOCycle.c: 102: SensorPt->WORD[0]=0xffff;
  7378  0FAC  0876               	movf	DoIOCycle@SensorPt,w
  7379  0FAD  0086               	movwf	6
  7380  0FAE  3001               	movlw	1	; select bank2/3
  7381  0FAF  0087               	movwf	7
  7382  0FB0  30FF               	movlw	255
  7383  0FB1  3FC0               	movwi [0]fsr1
  7384  0FB2  30FF               	movlw	255
  7385  0FB3  3FC1               	movwi [1]fsr1
  7386  0FB4  2FC2               	goto	l4431
  7387  0FB5                     l4427:	
  7388                           
  7389                           ;IOCycle.c: 103: else
  7390                           ;IOCycle.c: 104: {
  7391                           ;IOCycle.c: 105: SensorPt->BYTE[0]=0;
  7392  0FB5  0876               	movf	DoIOCycle@SensorPt,w
  7393  0FB6  0086               	movwf	6
  7394  0FB7  3001               	movlw	1	; select bank2/3
  7395  0FB8  0087               	movwf	7
  7396  0FB9  0181               	clrf	1
  7397                           
  7398                           ;IOCycle.c: 106: SensorPt->BYTE[1]=CurrentIOStatus;
  7399  0FBA  0849               	movf	_CurrentIOStatus,w
  7400  0FBB  00CA               	movwf	??_DoIOCycle
  7401  0FBC  0A76               	incf	DoIOCycle@SensorPt,w
  7402  0FBD  0086               	movwf	6
  7403  0FBE  3001               	movlw	1	; select bank2/3
  7404  0FBF  0087               	movwf	7
  7405  0FC0  084A               	movf	??_DoIOCycle,w
  7406  0FC1  0081               	movwf	1
  7407  0FC2                     l4431:	
  7408                           
  7409                           ;IOCycle.c: 107: }
  7410                           ;IOCycle.c: 110: ScanNextIOPin();
  7411  0FC2  318D  25F8         	fcall	_ScanNextIOPin
  7412                           
  7413                           ;IOCycle.c: 112: }
  7414  0FC4  0008               	return
  7415  0FC5                     l4433:	
  7416                           
  7417                           ;IOCycle.c: 113: else
  7418                           ;IOCycle.c: 115: {
  7419                           ;IOCycle.c: 117: ScanNextIOPin();
  7420  0FC5  318D  25F8         	fcall	_ScanNextIOPin
  7421  0FC7  0008               	return
  7422  0FC8                     __end_of_DoIOCycle:	
  7423                           
  7424                           	psect	text44
  7425  0C31                     __ptext44:	
  7426 ;; *************** function ___bmul *****************
  7427 ;; Defined at:
  7428 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul8.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;  multiplier      1    wreg     unsigned char 
  7431 ;;  multiplicand    1    2[COMMON] unsigned char 
  7432 ;; Auto vars:     Size  Location     Type
  7433 ;;  multiplier      1    5[COMMON] unsigned char 
  7434 ;;  product         1    4[COMMON] unsigned char 
  7435 ;; Return value:  Size  Location     Type
  7436 ;;                  1    wreg      unsigned char 
  7437 ;; Registers used:
  7438 ;;		wreg, status,2, status,0
  7439 ;; Tracked objects:
  7440 ;;		On entry : 0/0
  7441 ;;		On exit  : 0/0
  7442 ;;		Unchanged: 0/0
  7443 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7444 ;;      Params:         1       0       0       0       0       0       0
  7445 ;;      Locals:         2       0       0       0       0       0       0
  7446 ;;      Temps:          1       0       0       0       0       0       0
  7447 ;;      Totals:         4       0       0       0       0       0       0
  7448 ;;Total ram usage:        4 bytes
  7449 ;; Hardware stack levels used:    1
  7450 ;; Hardware stack levels required when called:    1
  7451 ;; This function calls:
  7452 ;;		Nothing
  7453 ;; This function is called by:
  7454 ;;		_DoIOCycle
  7455 ;;		_SetIOConfig
  7456 ;;		_SendBytesFrame
  7457 ;;		_PresetSingleRegister
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           
  7462                           ;psect for function ___bmul
  7463  0C31                     ___bmul:	
  7464                           
  7465                           ;incstack = 0
  7466                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7467                           ;___bmul@multiplier stored from wreg
  7468  0C31  00F5               	movwf	___bmul@multiplier
  7469  0C32  01F4               	clrf	___bmul@product
  7470  0C33                     l3999:	
  7471  0C33  1C75               	btfss	___bmul@multiplier,0
  7472  0C34  2C39               	goto	l4003
  7473  0C35  0872               	movf	___bmul@multiplicand,w
  7474  0C36  00F3               	movwf	??___bmul
  7475  0C37  0873               	movf	??___bmul,w
  7476  0C38  07F4               	addwf	___bmul@product,f
  7477  0C39                     l4003:	
  7478  0C39  1003               	clrc
  7479  0C3A  0DF2               	rlf	___bmul@multiplicand,f
  7480  0C3B  1003               	clrc
  7481  0C3C  0CF5               	rrf	___bmul@multiplier,f
  7482  0C3D  0875               	movf	___bmul@multiplier,w
  7483  0C3E  1D03               	btfss	3,2
  7484  0C3F  2C33               	goto	l3999
  7485  0C40  0874               	movf	___bmul@product,w
  7486  0C41  0008               	return
  7487  0C42                     __end_of___bmul:	
  7488                           
  7489                           	psect	text45
  7490  0DF8                     __ptext45:	
  7491 ;; *************** function _ScanNextIOPin *****************
  7492 ;; Defined at:
  7493 ;;		line 58 in file "IOCycle.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;		None
  7496 ;; Auto vars:     Size  Location     Type
  7497 ;;  loop            1    3[COMMON] unsigned char 
  7498 ;; Return value:  Size  Location     Type
  7499 ;;                  1    wreg      void 
  7500 ;; Registers used:
  7501 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7502 ;; Tracked objects:
  7503 ;;		On entry : 0/0
  7504 ;;		On exit  : 0/0
  7505 ;;		Unchanged: 0/0
  7506 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7507 ;;      Params:         0       0       0       0       0       0       0
  7508 ;;      Locals:         1       0       0       0       0       0       0
  7509 ;;      Temps:          1       0       0       0       0       0       0
  7510 ;;      Totals:         2       0       0       0       0       0       0
  7511 ;;Total ram usage:        2 bytes
  7512 ;; Hardware stack levels used:    1
  7513 ;; Hardware stack levels required when called:    1
  7514 ;; This function calls:
  7515 ;;		Nothing
  7516 ;; This function is called by:
  7517 ;;		_DoIOCycle
  7518 ;; This function uses a non-reentrant model
  7519 ;;
  7520                           
  7521                           
  7522                           ;psect for function _ScanNextIOPin
  7523  0DF8                     _ScanNextIOPin:	
  7524                           
  7525                           ;IOCycle.c: 60: unsigned char loop;
  7526                           ;IOCycle.c: 62: Retry=0;
  7527                           
  7528                           ;incstack = 0
  7529                           ; Regs used in _ScanNextIOPin: [wreg+fsr1l+fsr1h+status,2+status,0]
  7530  0DF8  0020               	movlb	0	; select bank0
  7531  0DF9  01C0               	clrf	_Retry
  7532                           
  7533                           ;IOCycle.c: 63: CurrentIOPin++;
  7534  0DFA  3001               	movlw	1
  7535  0DFB  00F2               	movwf	??_ScanNextIOPin
  7536  0DFC  0872               	movf	??_ScanNextIOPin,w
  7537  0DFD  07C7               	addwf	_CurrentIOPin,f
  7538                           
  7539                           ;IOCycle.c: 65: if(CurrentIOPin >= 10)
  7540  0DFE  300A               	movlw	10
  7541  0DFF  0247               	subwf	_CurrentIOPin,w
  7542  0E00  1803               	btfsc	3,0
  7543                           
  7544                           ;IOCycle.c: 66: CurrentIOPin=0;
  7545  0E01  01C7               	clrf	_CurrentIOPin
  7546                           
  7547                           ;IOCycle.c: 68: CurrentIOSensor .Config= Setting.IOConfig[CurrentIOPin];
  7548  0E02  0847               	movf	_CurrentIOPin,w
  7549  0E03  3ED8               	addlw	(low (_Setting| 0))& (0+255)
  7550  0E04  0086               	movwf	6
  7551  0E05  0187               	clrf	7
  7552  0E06  0801               	movf	1,w
  7553  0E07  00F2               	movwf	??_ScanNextIOPin
  7554  0E08  0872               	movf	??_ScanNextIOPin,w
  7555  0E09  00C8               	movwf	_CurrentIOSensor
  7556                           
  7557                           ;IOCycle.c: 69: CurrentIOCycle= 0;
  7558  0E0A  01C6               	clrf	_CurrentIOCycle
  7559                           
  7560                           ;IOCycle.c: 70: CurrentIOStatus=0;
  7561  0E0B  01C9               	clrf	_CurrentIOStatus
  7562                           
  7563                           ;IOCycle.c: 71: Timerms=0;
  7564  0E0C  01B2               	clrf	_Timerms	;volatile
  7565  0E0D  01B3               	clrf	_Timerms+1	;volatile
  7566                           
  7567                           ;IOCycle.c: 72: TMR0IE=0;
  7568  0E0E  128B               	bcf	11,5	;volatile
  7569                           
  7570                           ;IOCycle.c: 73: Timer0Overflow=0;
  7571  0E0F  12EC               	bcf	_Timer0Overflow/(0+8),_Timer0Overflow& (0+7)
  7572                           
  7573                           ;IOCycle.c: 76: for(loop=0;loop<(3 * 2);loop++)
  7574  0E10  01F3               	clrf	ScanNextIOPin@loop
  7575  0E11                     L20:	
  7576  0E11  3006               	movlw	6
  7577  0E12  0273               	subwf	ScanNextIOPin@loop,w
  7578  0E13  1803               	btfsc	3,0
  7579  0E14  0008               	return
  7580                           
  7581                           ;IOCycle.c: 77: WorkingSensorData.BYTE[loop]=0;
  7582  0E15  0873               	movf	ScanNextIOPin@loop,w
  7583  0E16  3EB0               	addlw	(low (_WorkingSensorData| 0))& (0+255)
  7584  0E17  0086               	movwf	6
  7585  0E18  0187               	clrf	7
  7586  0E19  0181               	clrf	1
  7587  0E1A  3001               	movlw	1
  7588  0E1B  00F2               	movwf	??_ScanNextIOPin
  7589  0E1C  0872               	movf	??_ScanNextIOPin,w
  7590  0E1D  07F3               	addwf	ScanNextIOPin@loop,f
  7591  0E1E  2E11               	goto	L20
  7592  0E1F                     __end_of_ScanNextIOPin:	
  7593                           
  7594                           	psect	text46
  7595  0BE5                     __ptext46:	
  7596 ;; *************** function _DealWithError *****************
  7597 ;; Defined at:
  7598 ;;		line 50 in file "IOCycle.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;		None
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;		None
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  1    wreg      void 
  7605 ;; Registers used:
  7606 ;;		wreg
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7612 ;;      Params:         0       0       0       0       0       0       0
  7613 ;;      Locals:         0       0       0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0
  7615 ;;      Totals:         0       0       0       0       0       0       0
  7616 ;;Total ram usage:        0 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    1
  7619 ;; This function calls:
  7620 ;;		Nothing
  7621 ;; This function is called by:
  7622 ;;		_DoIOCycle
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function _DealWithError
  7628  0BE5                     _DealWithError:	
  7629                           
  7630                           ;IOCycle.c: 52: TMR0IE=0;
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _DealWithError: [wreg]
  7634  0BE5  128B               	bcf	11,5	;volatile
  7635                           
  7636                           ;IOCycle.c: 53: TMR0IF=0;
  7637  0BE6  110B               	bcf	11,2	;volatile
  7638                           
  7639                           ;IOCycle.c: 54: WorkingSensorData.WORD[2]=0xFFFF;
  7640  0BE7  30FF               	movlw	255
  7641  0BE8  0021               	movlb	1	; select bank1
  7642  0BE9  00B4               	movwf	(_WorkingSensorData^(0+128)+4)
  7643  0BEA  30FF               	movlw	255
  7644  0BEB  00B5               	movwf	(_WorkingSensorData^(0+128)+5)
  7645  0BEC  0008               	return
  7646  0BED                     __end_of_DealWithError:	
  7647                           
  7648                           	psect	text47
  7649  07B4                     __ptext47:	
  7650 ;; *************** function _DecodeSerial *****************
  7651 ;; Defined at:
  7652 ;;		line 1160 in file "main.c"
  7653 ;; Parameters:    Size  Location     Type
  7654 ;;  msg             1    wreg     PTR unsigned char 
  7655 ;;		 -> ModbusBuffer(10), 
  7656 ;; Auto vars:     Size  Location     Type
  7657 ;;  msg             1    4[BANK0 ] PTR unsigned char 
  7658 ;;		 -> ModbusBuffer(10), 
  7659 ;;  CalcCRC         2    5[BANK0 ] unsigned short 
  7660 ;;  loop            2    0        int 
  7661 ;;  rcode           1    7[BANK0 ] unsigned char 
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      unsigned char 
  7664 ;; Registers used:
  7665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7671 ;;      Params:         0       0       0       0       0       0       0
  7672 ;;      Locals:         0       4       0       0       0       0       0
  7673 ;;      Temps:          1       0       0       0       0       0       0
  7674 ;;      Totals:         1       4       0       0       0       0       0
  7675 ;;Total ram usage:        5 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    2
  7678 ;; This function calls:
  7679 ;;		_CRC16
  7680 ;; This function is called by:
  7681 ;;		_main
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function _DecodeSerial
  7687  07B4                     _DecodeSerial:	
  7688                           
  7689                           ;incstack = 0
  7690                           ; Regs used in _DecodeSerial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7691  07B4  0086               	movwf	6	;# 
  7692  07B5  0187               	clrf	7	;# 
  7693  07B6  0016               	moviw fsr1++	;# 
  7694  07B7  00B6               	movwf	_ModbusSlave	;# 
  7695  07B8  0016               	moviw fsr1++	;# 
  7696  07B9  00B7               	movwf	_ModbusFunction	;# 
  7697  07BA  0016               	moviw fsr1++	;# 
  7698  07BB  00A5               	movwf	_ModbusAddress+1	;# 
  7699  07BC  0016               	moviw fsr1++	;# 
  7700  07BD  00A4               	movwf	_ModbusAddress	;# 
  7701  07BE  0016               	moviw fsr1++	;# 
  7702  07BF  00A3               	movwf	_ModbusData+1	;# 
  7703  07C0  0016               	moviw fsr1++	;# 
  7704  07C1  00A2               	movwf	_ModbusData	;# 
  7705  07C2  0016               	moviw fsr1++	;# 
  7706  07C3  00A0               	movwf	_ModbusCRC	;# 
  7707  07C4  0016               	moviw fsr1++	;# 
  7708  07C5  00A1               	movwf	_ModbusCRC+1	;# 
  7709                           
  7710                           ;main.c: 1205: CalcCRC = CRC16(ModbusBuffer,6);
  7711  07C6  3006               	movlw	6
  7712  07C7  00F6               	movwf	??_DecodeSerial
  7713  07C8  0876               	movf	??_DecodeSerial,w
  7714  07C9  00F2               	movwf	CRC16@num
  7715  07CA  30E4               	movlw	(low (_ModbusBuffer| 0))& (0+255)
  7716  07CB  3186  2675  3187   	fcall	_CRC16
  7717  07CE  0873               	movf	?_CRC16+1,w
  7718  07CF  0020               	movlb	0	; select bank0
  7719  07D0  00D0               	movwf	DecodeSerial@CalcCRC+1
  7720  07D1  0872               	movf	?_CRC16,w
  7721  07D2  00CF               	movwf	DecodeSerial@CalcCRC
  7722                           
  7723                           ;main.c: 1207: if(CalcCRC != ModbusCRC) rcode=0;
  7724  07D3  0821               	movf	_ModbusCRC+1,w	;volatile
  7725  07D4  0650               	xorwf	DecodeSerial@CalcCRC+1,w
  7726  07D5  1D03               	skipz
  7727  07D6  2FD9               	goto	u4555
  7728  07D7  0820               	movf	_ModbusCRC,w	;volatile
  7729  07D8  064F               	xorwf	DecodeSerial@CalcCRC,w
  7730  07D9                     u4555:	
  7731  07D9  1903               	skipnz
  7732  07DA  2FDD               	goto	l4443
  7733  07DB  01D1               	clrf	DecodeSerial@rcode
  7734  07DC  2FEC               	goto	l555
  7735  07DD                     l4443:	
  7736                           
  7737                           ;main.c: 1208: else if(ModbusSlave==Setting.SlaveAddress) rcode=1;
  7738  07DD  0021               	movlb	1	; select bank1
  7739  07DE  0862               	movf	(_Setting^(0+128)+10),w
  7740  07DF  0020               	movlb	0	; select bank0
  7741  07E0  0636               	xorwf	_ModbusSlave,w
  7742  07E1  1D03               	skipz
  7743                           
  7744                           ;main.c: 1209: else if(ModbusSlave==0) rcode=1;
  7745  07E2  0836               	movf	_ModbusSlave,w
  7746  07E3  1D03               	btfss	3,2
  7747  07E4  2FE8               	goto	l4451
  7748  07E5  01D1               	clrf	DecodeSerial@rcode
  7749  07E6  0AD1               	incf	DecodeSerial@rcode,f
  7750  07E7  2FEC               	goto	l555
  7751  07E8                     l4451:	
  7752                           
  7753                           ;main.c: 1210: else rcode=2;
  7754  07E8  3002               	movlw	2
  7755  07E9  00F6               	movwf	??_DecodeSerial
  7756  07EA  0876               	movf	??_DecodeSerial,w
  7757  07EB  00D1               	movwf	DecodeSerial@rcode
  7758  07EC                     l555:	
  7759                           
  7760                           ;main.c: 1212: return rcode;
  7761  07EC  0851               	movf	DecodeSerial@rcode,w
  7762  07ED  0008               	return
  7763  07EE                     __end_of_DecodeSerial:	
  7764                           
  7765                           	psect	text48
  7766  0675                     __ptext48:	
  7767 ;; *************** function _CRC16 *****************
  7768 ;; Defined at:
  7769 ;;		line 94 in file "CRC16.c"
  7770 ;; Parameters:    Size  Location     Type
  7771 ;;  addr            1    wreg     PTR unsigned char 
  7772 ;;		 -> ModbusBuffer(10), ModbusPacketBuffer(32), 
  7773 ;;  num             1    2[COMMON] unsigned char 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;  addr            1    0[BANK0 ] PTR unsigned char 
  7776 ;;		 -> ModbusBuffer(10), ModbusPacketBuffer(32), 
  7777 ;;  crc             2    2[BANK0 ] unsigned short 
  7778 ;;  i               1    1[BANK0 ] unsigned char 
  7779 ;; Return value:  Size  Location     Type
  7780 ;;                  2    2[COMMON] unsigned short 
  7781 ;; Registers used:
  7782 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7783 ;; Tracked objects:
  7784 ;;		On entry : 0/0
  7785 ;;		On exit  : 0/0
  7786 ;;		Unchanged: 0/0
  7787 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7788 ;;      Params:         2       0       0       0       0       0       0
  7789 ;;      Locals:         0       4       0       0       0       0       0
  7790 ;;      Temps:          2       0       0       0       0       0       0
  7791 ;;      Totals:         4       4       0       0       0       0       0
  7792 ;;Total ram usage:        8 bytes
  7793 ;; Hardware stack levels used:    1
  7794 ;; Hardware stack levels required when called:    1
  7795 ;; This function calls:
  7796 ;;		Nothing
  7797 ;; This function is called by:
  7798 ;;		_SendModbusPacket
  7799 ;;		_DecodeSerial
  7800 ;; This function uses a non-reentrant model
  7801 ;;
  7802                           
  7803                           
  7804                           ;psect for function _CRC16
  7805  0675                     _CRC16:	
  7806                           
  7807                           ;incstack = 0
  7808                           ; Regs used in _CRC16: [wreg+fsr1l+fsr1h+status,2+status,0]
  7809                           ;CRC16@addr stored from wreg
  7810  0675  0020               	movlb	0	; select bank0
  7811  0676  00CA               	movwf	CRC16@addr
  7812                           
  7813                           ;CRC16.c: 96: unsigned char i;
  7814                           ;CRC16.c: 98: unsigned short crc=0xffff;
  7815  0677  30FF               	movlw	255
  7816  0678  00CC               	movwf	CRC16@crc
  7817  0679  30FF               	movlw	255
  7818  067A  00CD               	movwf	CRC16@crc+1
  7819                           
  7820                           ;CRC16.c: 100: for (; num>0; num--)
  7821  067B  0872               	movf	CRC16@num,w
  7822  067C  1903               	btfsc	3,2
  7823  067D  2EB3               	goto	l3789
  7824  067E                     l3773:	
  7825                           
  7826                           ;CRC16.c: 101: {
  7827                           ;CRC16.c: 102: crc = crc ^ (*addr++);
  7828  067E  084A               	movf	CRC16@addr,w
  7829  067F  0086               	movwf	6
  7830  0680  0187               	clrf	7
  7831  0681  084C               	movf	CRC16@crc,w
  7832  0682  0601               	xorwf	1,w
  7833  0683  00CC               	movwf	CRC16@crc
  7834  0684  084D               	movf	CRC16@crc+1,w
  7835  0685  00CD               	movwf	CRC16@crc+1
  7836  0686  3001               	movlw	1
  7837  0687  00F4               	movwf	??_CRC16
  7838  0688  0874               	movf	??_CRC16,w
  7839  0689  07CA               	addwf	CRC16@addr,f
  7840                           
  7841                           ;CRC16.c: 103: for (i=8; i>0; i--)
  7842  068A  3008               	movlw	8
  7843  068B  00F4               	movwf	??_CRC16
  7844  068C  0874               	movf	??_CRC16,w
  7845  068D  00CB               	movwf	CRC16@i
  7846  068E  084B               	movf	CRC16@i,w
  7847  068F  1903               	btfsc	3,2
  7848  0690  2EAE               	goto	l3787
  7849  0691                     l5:	
  7850                           
  7851                           ;CRC16.c: 104: {
  7852                           ;CRC16.c: 105: if(crc & 0x1)
  7853  0691  1C4C               	btfss	CRC16@crc,0
  7854  0692  2E9F               	goto	l3785
  7855                           
  7856                           ;CRC16.c: 106: crc = (crc >>1) ^ 0xA001;
  7857  0693  084D               	movf	CRC16@crc+1,w
  7858  0694  00F5               	movwf	??_CRC16+1
  7859  0695  084C               	movf	CRC16@crc,w
  7860  0696  00F4               	movwf	??_CRC16
  7861  0697  36F5               	lsrf	??_CRC16+1,f
  7862  0698  0CF4               	rrf	??_CRC16,f
  7863  0699  3001               	movlw	1
  7864  069A  0674               	xorwf	??_CRC16,w
  7865  069B  00CC               	movwf	CRC16@crc
  7866  069C  30A0               	movlw	160
  7867  069D  0675               	xorwf	??_CRC16+1,w
  7868  069E  2EA8               	goto	L21
  7869  069F                     l3785:	
  7870                           
  7871                           ;CRC16.c: 107: else
  7872                           ;CRC16.c: 108: crc = crc >>1;
  7873  069F  084D               	movf	CRC16@crc+1,w
  7874  06A0  00F5               	movwf	??_CRC16+1
  7875  06A1  084C               	movf	CRC16@crc,w
  7876  06A2  00F4               	movwf	??_CRC16
  7877  06A3  36F5               	lsrf	??_CRC16+1,f
  7878  06A4  0CF4               	rrf	??_CRC16,f
  7879  06A5  0874               	movf	??_CRC16,w
  7880  06A6  00CC               	movwf	CRC16@crc
  7881  06A7  0875               	movf	??_CRC16+1,w
  7882  06A8                     L21:	
  7883  06A8  00CD               	movwf	CRC16@crc+1
  7884  06A9  3001               	movlw	1
  7885  06AA  02CB               	subwf	CRC16@i,f
  7886  06AB  084B               	movf	CRC16@i,w
  7887  06AC  1D03               	btfss	3,2
  7888  06AD  2E91               	goto	l5
  7889  06AE                     l3787:	
  7890  06AE  3001               	movlw	1
  7891  06AF  02F2               	subwf	CRC16@num,f
  7892  06B0  0872               	movf	CRC16@num,w
  7893  06B1  1D03               	btfss	3,2
  7894  06B2  2E7E               	goto	l3773
  7895  06B3                     l3789:	
  7896                           
  7897                           ;CRC16.c: 109: }
  7898                           ;CRC16.c: 110: }
  7899                           ;CRC16.c: 111: return(crc);
  7900  06B3  084D               	movf	CRC16@crc+1,w
  7901  06B4  00F3               	movwf	?_CRC16+1
  7902  06B5  084C               	movf	CRC16@crc,w
  7903  06B6  00F2               	movwf	?_CRC16
  7904  06B7  0008               	return
  7905  06B8                     __end_of_CRC16:	
  7906                           
  7907                           	psect	intentry
  7908  0004                     __pintentry:	
  7909 ;; *************** function _isr *****************
  7910 ;; Defined at:
  7911 ;;		line 641 in file "main.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;		None
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;		None
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  1    wreg      void 
  7918 ;; Registers used:
  7919 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7920 ;; Tracked objects:
  7921 ;;		On entry : 0/0
  7922 ;;		On exit  : 0/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7925 ;;      Params:         0       0       0       0       0       0       0
  7926 ;;      Locals:         0       0       0       0       0       0       0
  7927 ;;      Temps:          2       0       0       0       0       0       0
  7928 ;;      Totals:         2       0       0       0       0       0       0
  7929 ;;Total ram usage:        2 bytes
  7930 ;; Hardware stack levels used:    1
  7931 ;; This function calls:
  7932 ;;		Nothing
  7933 ;; This function is called by:
  7934 ;;		Interrupt level 1
  7935 ;; This function uses a non-reentrant model
  7936 ;;
  7937                           
  7938  0004                     _isr:	
  7939                           
  7940                           ;incstack = 0
  7941  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7942                           
  7943                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
  7944  0005  3180               	pagesel	$
  7945  0006  0020               	movlb	0	; select bank0
  7946  0007  087F               	movf	127,w
  7947  0008  00F1               	movwf	??_isr+1
  7948                           
  7949                           ;main.c: 642: static volatile unsigned char _temp;
  7950                           ;main.c: 646: if(TMR1IE)
  7951  0009  0021               	movlb	1	; select bank1
  7952  000A  1C11               	btfss	17,0	;volatile
  7953  000B  2815               	goto	i1l466
  7954                           
  7955                           ;main.c: 647: if(TMR1IF)
  7956  000C  0020               	movlb	0	; select bank0
  7957  000D  1C11               	btfss	17,0	;volatile
  7958  000E  2815               	goto	i1l466
  7959                           
  7960                           ;main.c: 648: {
  7961                           ;main.c: 649: TimerHiCount++;
  7962  000F  3001               	movlw	1
  7963  0010  07B0               	addwf	_TimerHiCount,f	;volatile
  7964  0011  3000               	movlw	0
  7965  0012  3DB1               	addwfc	_TimerHiCount+1,f	;volatile
  7966                           
  7967                           ;main.c: 650: TMR1IF=0;
  7968  0013  1011               	bcf	17,0	;volatile
  7969                           
  7970                           ;main.c: 651: return;
  7971  0014  2952               	goto	i1l468
  7972  0015                     i1l466:	
  7973                           
  7974                           ;main.c: 652: }
  7975                           ;main.c: 654: if(CCP1IE)
  7976  0015  0021               	movlb	1	; select bank1
  7977  0016  1D11               	btfss	17,2	;volatile
  7978  0017  2845               	goto	i1l469
  7979                           
  7980                           ;main.c: 655: if(CCP1IF)
  7981  0018  0020               	movlb	0	; select bank0
  7982  0019  1D11               	btfss	17,2	;volatile
  7983  001A  2845               	goto	i1l469
  7984                           
  7985                           ;main.c: 656: {
  7986                           ;main.c: 657: TimeCapture1Count++;
  7987  001B  3001               	movlw	1
  7988  001C  07AE               	addwf	_TimeCapture1Count,f	;volatile
  7989  001D  3000               	movlw	0
  7990  001E  3DAF               	addwfc	_TimeCapture1Count+1,f	;volatile
  7991                           
  7992                           ;main.c: 658: IOSensorData[0].BYTE[0]=TimerHiCount >> 8;
  7993  001F  0831               	movf	_TimerHiCount+1,w	;volatile
  7994  0020  00F0               	movwf	??_isr
  7995  0021  0870               	movf	??_isr,w
  7996  0022  0023               	movlb	3	; select bank3
  7997  0023  00A0               	movwf	32
  7998                           
  7999                           ;main.c: 659: IOSensorData[0].BYTE[1]=TimerHiCount & 0xff;
  8000  0024  0020               	movlb	0	; select bank0
  8001  0025  0830               	movf	_TimerHiCount,w	;volatile
  8002  0026  00F0               	movwf	??_isr
  8003  0027  0870               	movf	??_isr,w
  8004  0028  0023               	movlb	3	; select bank3
  8005  0029  00A1               	movwf	33
  8006                           
  8007                           ;main.c: 660: IOSensorData[0].BYTE[2]=CCPR1H;
  8008  002A  0025               	movlb	5	; select bank5
  8009  002B  0812               	movf	18,w	;volatile
  8010  002C  00F0               	movwf	??_isr
  8011  002D  0870               	movf	??_isr,w
  8012  002E  0023               	movlb	3	; select bank3
  8013  002F  00A2               	movwf	34
  8014                           
  8015                           ;main.c: 661: IOSensorData[0].BYTE[3]=CCPR1L;
  8016  0030  0025               	movlb	5	; select bank5
  8017  0031  0811               	movf	17,w	;volatile
  8018  0032  00F0               	movwf	??_isr
  8019  0033  0870               	movf	??_isr,w
  8020  0034  0023               	movlb	3	; select bank3
  8021  0035  00A3               	movwf	35
  8022                           
  8023                           ;main.c: 662: IOSensorData[0].BYTE[4]=TimeCapture1Count >> 8;
  8024  0036  0020               	movlb	0	; select bank0
  8025  0037  082F               	movf	_TimeCapture1Count+1,w	;volatile
  8026  0038  00F0               	movwf	??_isr
  8027  0039  0870               	movf	??_isr,w
  8028  003A  0023               	movlb	3	; select bank3
  8029  003B  00A4               	movwf	36
  8030                           
  8031                           ;main.c: 663: IOSensorData[0].BYTE[5]=TimeCapture1Count &0xff;
  8032  003C  0020               	movlb	0	; select bank0
  8033  003D  082E               	movf	_TimeCapture1Count,w	;volatile
  8034  003E  00F0               	movwf	??_isr
  8035  003F  0870               	movf	??_isr,w
  8036  0040  0023               	movlb	3	; select bank3
  8037  0041  00A5               	movwf	37
  8038                           
  8039                           ;main.c: 664: CCP1IF=0;
  8040  0042  0020               	movlb	0	; select bank0
  8041  0043  1111               	bcf	17,2	;volatile
  8042                           
  8043                           ;main.c: 665: return;
  8044  0044  2952               	goto	i1l468
  8045  0045                     i1l469:	
  8046                           
  8047                           ;main.c: 666: }
  8048                           ;main.c: 668: if(CCP2IE)
  8049  0045  0021               	movlb	1	; select bank1
  8050  0046  1C12               	btfss	18,0	;volatile
  8051  0047  2875               	goto	i1l471
  8052                           
  8053                           ;main.c: 669: if(CCP2IF)
  8054  0048  0020               	movlb	0	; select bank0
  8055  0049  1C12               	btfss	18,0	;volatile
  8056  004A  2875               	goto	i1l471
  8057                           
  8058                           ;main.c: 670: {
  8059                           ;main.c: 671: TimeCapture2Count++;
  8060  004B  3001               	movlw	1
  8061  004C  07AC               	addwf	_TimeCapture2Count,f	;volatile
  8062  004D  3000               	movlw	0
  8063  004E  3DAD               	addwfc	_TimeCapture2Count+1,f	;volatile
  8064                           
  8065                           ;main.c: 672: IOSensorData[3].BYTE[0]=TimerHiCount >> 8;
  8066  004F  0831               	movf	_TimerHiCount+1,w	;volatile
  8067  0050  00F0               	movwf	??_isr
  8068  0051  0870               	movf	??_isr,w
  8069  0052  0023               	movlb	3	; select bank3
  8070  0053  00B2               	movwf	50
  8071                           
  8072                           ;main.c: 673: IOSensorData[3].BYTE[1]=TimerHiCount & 0xff;
  8073  0054  0020               	movlb	0	; select bank0
  8074  0055  0830               	movf	_TimerHiCount,w	;volatile
  8075  0056  00F0               	movwf	??_isr
  8076  0057  0870               	movf	??_isr,w
  8077  0058  0023               	movlb	3	; select bank3
  8078  0059  00B3               	movwf	51
  8079                           
  8080                           ;main.c: 674: IOSensorData[3].BYTE[2]=CCPR2H;
  8081  005A  0025               	movlb	5	; select bank5
  8082  005B  0819               	movf	25,w	;volatile
  8083  005C  00F0               	movwf	??_isr
  8084  005D  0870               	movf	??_isr,w
  8085  005E  0023               	movlb	3	; select bank3
  8086  005F  00B4               	movwf	52
  8087                           
  8088                           ;main.c: 675: IOSensorData[3].BYTE[3]=CCPR2L;
  8089  0060  0025               	movlb	5	; select bank5
  8090  0061  0818               	movf	24,w	;volatile
  8091  0062  00F0               	movwf	??_isr
  8092  0063  0870               	movf	??_isr,w
  8093  0064  0023               	movlb	3	; select bank3
  8094  0065  00B5               	movwf	53
  8095                           
  8096                           ;main.c: 676: IOSensorData[3].BYTE[4]=TimeCapture2Count >> 8;
  8097  0066  0020               	movlb	0	; select bank0
  8098  0067  082D               	movf	_TimeCapture2Count+1,w	;volatile
  8099  0068  00F0               	movwf	??_isr
  8100  0069  0870               	movf	??_isr,w
  8101  006A  0023               	movlb	3	; select bank3
  8102  006B  00B6               	movwf	54
  8103                           
  8104                           ;main.c: 677: IOSensorData[3].BYTE[5]=TimeCapture2Count &0xff;
  8105  006C  0020               	movlb	0	; select bank0
  8106  006D  082C               	movf	_TimeCapture2Count,w	;volatile
  8107  006E  00F0               	movwf	??_isr
  8108  006F  0870               	movf	??_isr,w
  8109  0070  0023               	movlb	3	; select bank3
  8110  0071  00B7               	movwf	55
  8111                           
  8112                           ;main.c: 678: CCP2IF=0;
  8113  0072  0020               	movlb	0	; select bank0
  8114  0073  1012               	bcf	18,0	;volatile
  8115                           
  8116                           ;main.c: 679: return;
  8117  0074  2952               	goto	i1l468
  8118  0075                     i1l471:	
  8119                           
  8120                           ;main.c: 680: }
  8121                           ;main.c: 682: if(CCP3IE)
  8122  0075  0021               	movlb	1	; select bank1
  8123  0076  1E13               	btfss	19,4	;volatile
  8124  0077  28A5               	goto	i1l473
  8125                           
  8126                           ;main.c: 683: if(CCP3IF)
  8127  0078  0020               	movlb	0	; select bank0
  8128  0079  1E13               	btfss	19,4	;volatile
  8129  007A  28A5               	goto	i1l473
  8130                           
  8131                           ;main.c: 684: {
  8132                           ;main.c: 685: TimeCapture3Count++;
  8133  007B  3001               	movlw	1
  8134  007C  07AA               	addwf	_TimeCapture3Count,f	;volatile
  8135  007D  3000               	movlw	0
  8136  007E  3DAB               	addwfc	_TimeCapture3Count+1,f	;volatile
  8137                           
  8138                           ;main.c: 686: IOSensorData[8].BYTE[0]=TimerHiCount >> 8;
  8139  007F  0831               	movf	_TimerHiCount+1,w	;volatile
  8140  0080  00F0               	movwf	??_isr
  8141  0081  0870               	movf	??_isr,w
  8142  0082  0023               	movlb	3	; select bank3
  8143  0083  00D0               	movwf	80
  8144                           
  8145                           ;main.c: 687: IOSensorData[8].BYTE[1]=TimerHiCount & 0xff;
  8146  0084  0020               	movlb	0	; select bank0
  8147  0085  0830               	movf	_TimerHiCount,w	;volatile
  8148  0086  00F0               	movwf	??_isr
  8149  0087  0870               	movf	??_isr,w
  8150  0088  0023               	movlb	3	; select bank3
  8151  0089  00D1               	movwf	81
  8152                           
  8153                           ;main.c: 688: IOSensorData[8].BYTE[2]=CCPR3H;
  8154  008A  0026               	movlb	6	; select bank6
  8155  008B  0812               	movf	18,w	;volatile
  8156  008C  00F0               	movwf	??_isr
  8157  008D  0870               	movf	??_isr,w
  8158  008E  0023               	movlb	3	; select bank3
  8159  008F  00D2               	movwf	82
  8160                           
  8161                           ;main.c: 689: IOSensorData[8].BYTE[3]=CCPR3L;
  8162  0090  0026               	movlb	6	; select bank6
  8163  0091  0811               	movf	17,w	;volatile
  8164  0092  00F0               	movwf	??_isr
  8165  0093  0870               	movf	??_isr,w
  8166  0094  0023               	movlb	3	; select bank3
  8167  0095  00D3               	movwf	83
  8168                           
  8169                           ;main.c: 690: IOSensorData[8].BYTE[4]=TimeCapture3Count >> 8;
  8170  0096  0020               	movlb	0	; select bank0
  8171  0097  082B               	movf	_TimeCapture3Count+1,w	;volatile
  8172  0098  00F0               	movwf	??_isr
  8173  0099  0870               	movf	??_isr,w
  8174  009A  0023               	movlb	3	; select bank3
  8175  009B  00D4               	movwf	84
  8176                           
  8177                           ;main.c: 691: IOSensorData[8].BYTE[5]=TimeCapture3Count &0xff;
  8178  009C  0020               	movlb	0	; select bank0
  8179  009D  082A               	movf	_TimeCapture3Count,w	;volatile
  8180  009E  00F0               	movwf	??_isr
  8181  009F  0870               	movf	??_isr,w
  8182  00A0  0023               	movlb	3	; select bank3
  8183  00A1  00D5               	movwf	85
  8184                           
  8185                           ;main.c: 692: CCP3IF=0;
  8186  00A2  0020               	movlb	0	; select bank0
  8187  00A3  1213               	bcf	19,4	;volatile
  8188                           
  8189                           ;main.c: 693: return;
  8190  00A4  2952               	goto	i1l468
  8191  00A5                     i1l473:	
  8192                           
  8193                           ;main.c: 694: }
  8194                           ;main.c: 695: if(CCP4IE)
  8195  00A5  0021               	movlb	1	; select bank1
  8196  00A6  1E93               	btfss	19,5	;volatile
  8197  00A7  28D5               	goto	i1l475
  8198                           
  8199                           ;main.c: 696: if(CCP4IF)
  8200  00A8  0020               	movlb	0	; select bank0
  8201  00A9  1E93               	btfss	19,5	;volatile
  8202  00AA  28D5               	goto	i1l475
  8203                           
  8204                           ;main.c: 697: {
  8205                           ;main.c: 698: TimeCapture4Count++;
  8206  00AB  3001               	movlw	1
  8207  00AC  07A8               	addwf	_TimeCapture4Count,f	;volatile
  8208  00AD  3000               	movlw	0
  8209  00AE  3DA9               	addwfc	_TimeCapture4Count+1,f	;volatile
  8210                           
  8211                           ;main.c: 699: IOSensorData[9].BYTE[0]=TimerHiCount >> 8;
  8212  00AF  0831               	movf	_TimerHiCount+1,w	;volatile
  8213  00B0  00F0               	movwf	??_isr
  8214  00B1  0870               	movf	??_isr,w
  8215  00B2  0023               	movlb	3	; select bank3
  8216  00B3  00D6               	movwf	86
  8217                           
  8218                           ;main.c: 700: IOSensorData[9].BYTE[1]=TimerHiCount & 0xff;
  8219  00B4  0020               	movlb	0	; select bank0
  8220  00B5  0830               	movf	_TimerHiCount,w	;volatile
  8221  00B6  00F0               	movwf	??_isr
  8222  00B7  0870               	movf	??_isr,w
  8223  00B8  0023               	movlb	3	; select bank3
  8224  00B9  00D7               	movwf	87
  8225                           
  8226                           ;main.c: 701: IOSensorData[9].BYTE[2]=CCPR4H;
  8227  00BA  0026               	movlb	6	; select bank6
  8228  00BB  0819               	movf	25,w	;volatile
  8229  00BC  00F0               	movwf	??_isr
  8230  00BD  0870               	movf	??_isr,w
  8231  00BE  0023               	movlb	3	; select bank3
  8232  00BF  00D8               	movwf	88
  8233                           
  8234                           ;main.c: 702: IOSensorData[9].BYTE[3]=CCPR4L;
  8235  00C0  0026               	movlb	6	; select bank6
  8236  00C1  0818               	movf	24,w	;volatile
  8237  00C2  00F0               	movwf	??_isr
  8238  00C3  0870               	movf	??_isr,w
  8239  00C4  0023               	movlb	3	; select bank3
  8240  00C5  00D9               	movwf	89
  8241                           
  8242                           ;main.c: 703: IOSensorData[9].BYTE[4]=TimeCapture4Count >> 8;
  8243  00C6  0020               	movlb	0	; select bank0
  8244  00C7  0829               	movf	_TimeCapture4Count+1,w	;volatile
  8245  00C8  00F0               	movwf	??_isr
  8246  00C9  0870               	movf	??_isr,w
  8247  00CA  0023               	movlb	3	; select bank3
  8248  00CB  00DA               	movwf	90
  8249                           
  8250                           ;main.c: 704: IOSensorData[9].BYTE[5]=TimeCapture4Count & 0xff;
  8251  00CC  0020               	movlb	0	; select bank0
  8252  00CD  0828               	movf	_TimeCapture4Count,w	;volatile
  8253  00CE  00F0               	movwf	??_isr
  8254  00CF  0870               	movf	??_isr,w
  8255  00D0  0023               	movlb	3	; select bank3
  8256  00D1  00DB               	movwf	91
  8257                           
  8258                           ;main.c: 705: CCP4IF=0;
  8259  00D2  0020               	movlb	0	; select bank0
  8260  00D3  1293               	bcf	19,5	;volatile
  8261                           
  8262                           ;main.c: 706: return;
  8263  00D4  2952               	goto	i1l468
  8264  00D5                     i1l475:	
  8265                           
  8266                           ;main.c: 707: }
  8267                           ;main.c: 710: if(TMR2IF){
  8268  00D5  0020               	movlb	0	; select bank0
  8269  00D6  1C91               	btfss	17,1	;volatile
  8270  00D7  290B               	goto	i1l477
  8271                           
  8272                           ;main.c: 711: TMR2IF=0;
  8273  00D8  1091               	bcf	17,1	;volatile
  8274                           
  8275                           ;main.c: 712: if(TimerSecFlag)
  8276  00D9  1E6C               	btfss	_TimerSecFlag/(0+8),_TimerSecFlag& (0+7)
  8277  00DA  28E1               	goto	i1l478
  8278                           
  8279                           ;main.c: 713: {
  8280                           ;main.c: 714: ResetCounterFlag=1;
  8281  00DB  15EC               	bsf	_ResetCounterFlag/(0+8),_ResetCounterFlag& (0+7)
  8282                           
  8283                           ;main.c: 716: IOCounterReset.Byte = IOCounterFlag.Byte;
  8284  00DC  0871               	movf	113,w	;volatile
  8285  00DD  00F0               	movwf	??_isr
  8286  00DE  0870               	movf	??_isr,w
  8287  00DF  00F2               	movwf	114	;volatile
  8288                           
  8289                           ;main.c: 718: TimerSecFlag=0;
  8290  00E0  126C               	bcf	_TimerSecFlag/(0+8),_TimerSecFlag& (0+7)
  8291  00E1                     i1l478:	
  8292                           
  8293                           ;main.c: 719: }
  8294                           ;main.c: 721: Timerms++;
  8295  00E1  3001               	movlw	1
  8296  00E2  07B2               	addwf	_Timerms,f	;volatile
  8297  00E3  3000               	movlw	0
  8298  00E4  3DB3               	addwfc	_Timerms+1,f	;volatile
  8299                           
  8300                           ;main.c: 722: PrimaryTimerms--;
  8301  00E5  3001               	movlw	1
  8302  00E6  02A6               	subwf	_PrimaryTimerms,f	;volatile
  8303  00E7  3000               	movlw	0
  8304  00E8  3BA7               	subwfb	_PrimaryTimerms+1,f	;volatile
  8305                           
  8306                           ;main.c: 723: if(PrimaryTimerms==0)
  8307  00E9  0826               	movf	_PrimaryTimerms,w	;volatile
  8308  00EA  0427               	iorwf	_PrimaryTimerms+1,w	;volatile
  8309  00EB  1D03               	btfss	3,2
  8310  00EC  290B               	goto	i1l477
  8311                           
  8312                           ;main.c: 724: {
  8313                           ;main.c: 725: PrimaryTimerms=100;
  8314  00ED  3064               	movlw	100
  8315  00EE  00A6               	movwf	_PrimaryTimerms	;volatile
  8316  00EF  3000               	movlw	0
  8317  00F0  00A7               	movwf	_PrimaryTimerms+1	;volatile
  8318                           
  8319                           ;main.c: 726: if(WaitForEndDeciSecond)
  8320  00F1  1D77               	btfss	_WaitForEndDeciSecond/(0+8),_WaitForEndDeciSecond& (0+7)
  8321  00F2  28FB               	goto	i1l480
  8322  00F3  0815               	movf	21,w	;# 
  8323  00F4  00C5               	movwf	__TMR0	;# 
  8324                           
  8325                           ;main.c: 734: CPSON=0;
  8326  00F5  0020               	movlb	0	; select bank0
  8327  00F6  139E               	bcf	30,7	;volatile
  8328                           
  8329                           ;main.c: 735: TMR0IE=0;
  8330  00F7  128B               	bcf	11,5	;volatile
  8331                           
  8332                           ;main.c: 736: WaitForEndDeciSecond=0;
  8333  00F8  1177               	bcf	_WaitForEndDeciSecond/(0+8),_WaitForEndDeciSecond& (0+7)
  8334                           
  8335                           ;main.c: 737: GotCapSenseFlag=1;
  8336  00F9  14F7               	bsf	_GotCapSenseFlag/(0+8),_GotCapSenseFlag& (0+7)
  8337                           
  8338                           ;main.c: 739: }
  8339  00FA  2902               	goto	i1l3563
  8340  00FB                     i1l480:	
  8341                           
  8342                           ;main.c: 740: else if(WaitForStartDeciSecond)
  8343  00FB  1C77               	btfss	_WaitForStartDeciSecond/(0+8),_WaitForStartDeciSecond& (0+7)
  8344  00FC  2902               	goto	i1l3563
  8345                           
  8346                           ;main.c: 741: {
  8347                           ;main.c: 742: WaitForStartDeciSecond=0;
  8348  00FD  1077               	bcf	_WaitForStartDeciSecond/(0+8),_WaitForStartDeciSecond& (0+7)
  8349                           
  8350                           ;main.c: 743: TMR0=0;
  8351  00FE  0195               	clrf	21	;volatile
  8352                           
  8353                           ;main.c: 744: TMR0IF=0;
  8354  00FF  110B               	bcf	11,2	;volatile
  8355                           
  8356                           ;main.c: 745: TMR0IE=1;
  8357  0100  168B               	bsf	11,5	;volatile
  8358                           
  8359                           ;main.c: 746: WaitForEndDeciSecond=1;
  8360  0101  1577               	bsf	_WaitForEndDeciSecond/(0+8),_WaitForEndDeciSecond& (0+7)
  8361  0102                     i1l3563:	
  8362                           
  8363                           ;main.c: 748: }
  8364                           ;main.c: 750: TimerDeciSec--;
  8365  0102  3001               	movlw	1
  8366  0103  02BD               	subwf	_TimerDeciSec,f	;volatile
  8367                           
  8368                           ;main.c: 751: if(TimerDeciSec==0)
  8369  0104  083D               	movf	_TimerDeciSec,w	;volatile
  8370  0105  1D03               	btfss	3,2
  8371  0106  290B               	goto	i1l477
  8372  0107  300A               	movlw	10	;# 
  8373  0108  00BD               	movwf	_TimerDeciSec	;# 
  8374                           
  8375                           ;main.c: 758: TimerSecFlag=1;
  8376  0109  0020               	movlb	0	; select bank0
  8377  010A  166C               	bsf	_TimerSecFlag/(0+8),_TimerSecFlag& (0+7)
  8378  010B                     i1l477:	
  8379                           
  8380                           ;main.c: 759: }
  8381                           ;main.c: 762: }
  8382                           ;main.c: 764: }
  8383                           ;main.c: 767: if(TXIE)
  8384  010B  0021               	movlb	1	; select bank1
  8385  010C  1E11               	btfss	17,4	;volatile
  8386  010D  292C               	goto	i1l484
  8387                           
  8388                           ;main.c: 768: if(TXIF)
  8389  010E  0020               	movlb	0	; select bank0
  8390  010F  1E11               	btfss	17,4	;volatile
  8391  0110  292C               	goto	i1l484
  8392                           
  8393                           ;main.c: 769: {
  8394                           ;main.c: 771: if(InFiFo != OutFiFo)
  8395  0111  083C               	movf	_InFiFo,w	;volatile
  8396  0112  0678               	xorwf	_OutFiFo,w	;volatile
  8397  0113  1903               	skipnz
  8398  0114  2925               	goto	i1l3579
  8399                           
  8400                           ;main.c: 772: {
  8401                           ;main.c: 773: TXREG= SerialBuffer[OutFiFo];
  8402  0115  0878               	movf	_OutFiFo,w
  8403  0116  3E40               	addlw	(low (_SerialBuffer| (0+256)))& (0+255)
  8404  0117  0086               	movwf	6
  8405  0118  3001               	movlw	1	; select bank2/3
  8406  0119  0087               	movwf	7
  8407  011A  0801               	movf	1,w
  8408  011B  0023               	movlb	3	; select bank3
  8409  011C  009A               	movwf	26	;volatile
  8410  011D  0020               	movlb	0	; select bank0 ;# 
  8411  011E  0AF8               	incf	_OutFiFo,f	;# 
  8412                           
  8413                           ;main.c: 779: if(OutFiFo >= 32)
  8414  011F  3020               	movlw	32
  8415  0120  0278               	subwf	_OutFiFo,w	;volatile
  8416  0121  1C03               	skipc
  8417  0122  292C               	goto	i1l484
  8418                           
  8419                           ;main.c: 780: OutFiFo=0;
  8420  0123  01F8               	clrf	_OutFiFo	;volatile
  8421                           
  8422                           ;main.c: 781: }
  8423  0124  292C               	goto	i1l484
  8424  0125                     i1l3579:	
  8425                           
  8426                           ;main.c: 782: else
  8427                           ;main.c: 783: if(OutFiFo == InFiFo)
  8428  0125  0878               	movf	_OutFiFo,w	;volatile
  8429  0126  0020               	movlb	0	; select bank0
  8430  0127  063C               	xorwf	_InFiFo,w	;volatile
  8431  0128  1D03               	skipz
  8432  0129  292C               	goto	i1l484
  8433                           
  8434                           ;main.c: 784: {
  8435                           ;main.c: 786: TXIE=0;
  8436  012A  0021               	movlb	1	; select bank1
  8437  012B  1211               	bcf	17,4	;volatile
  8438  012C                     i1l484:	
  8439                           
  8440                           ;main.c: 787: }
  8441                           ;main.c: 788: }
  8442                           ;main.c: 792: if(TMR0IE)
  8443  012C  1A8B               	btfsc	11,5	;volatile
  8444                           
  8445                           ;main.c: 793: if(TMR0IF)
  8446  012D  1D0B               	btfss	11,2	;volatile
  8447  012E  293C               	goto	i1l490
  8448                           
  8449                           ;main.c: 794: {
  8450                           ;main.c: 795: TMR0IF=0;
  8451  012F  110B               	bcf	11,2	;volatile
  8452                           
  8453                           ;main.c: 796: if(Timer0Overflow)
  8454  0130  0020               	movlb	0	; select bank0
  8455  0131  1EEC               	btfss	_Timer0Overflow/(0+8),_Timer0Overflow& (0+7)
  8456  0132  2939               	goto	i1l492
  8457                           
  8458                           ;main.c: 797: {
  8459                           ;main.c: 798: _TMR0_MSB++;
  8460  0133  3001               	movlw	1
  8461  0134  0021               	movlb	1	; select bank1
  8462  0135  07B6               	addwf	__TMR0_MSB^(0+128),f	;volatile
  8463  0136  3000               	movlw	0
  8464  0137  3DB7               	addwfc	(__TMR0_MSB+1)^(0+128),f	;volatile
  8465                           
  8466                           ;main.c: 806: }
  8467  0138  293C               	goto	i1l490
  8468  0139                     i1l492:	
  8469                           
  8470                           ;main.c: 807: else
  8471                           ;main.c: 808: {
  8472                           ;main.c: 810: TMR0IE=0;
  8473  0139  128B               	bcf	11,5	;volatile
  8474  013A  0020               	banksel	_CurrentIOCycle	;# 
  8475  013B  00C6               	movwf	_CurrentIOCycle	;# 
  8476  013C                     i1l490:	
  8477                           
  8478                           ;main.c: 817: }
  8479                           ;main.c: 818: }
  8480                           ;main.c: 820: if(RCIE)
  8481  013C  0021               	movlb	1	; select bank1
  8482  013D  1E91               	btfss	17,5	;volatile
  8483  013E  2952               	goto	i1l468
  8484                           
  8485                           ;main.c: 821: if(RCIF)
  8486  013F  0020               	movlb	0	; select bank0
  8487  0140  1E91               	btfss	17,5	;volatile
  8488  0141  2952               	goto	i1l468
  8489  0142  0020               	banksel	_RcvInFiFo	;# 
  8490  0143  083B               	movf	_RcvInFiFo,w	;# 
  8491  0144  0ABB               	incf	_RcvInFiFo,f	;# 
  8492  0145  3E20               	addlw	low _RcvSerialBuffer	;# 
  8493  0146  0086               	movwf	6	;# 
  8494  0147  3001               	movlw	high _RcvSerialBuffer	;# 
  8495  0148  0087               	movwf	7	;# 
  8496  0149  0023               	movlb	3	; select bank 3 ;# 
  8497  014A  0819               	movf	25,w	;# 
  8498  014B  0081               	movwf	1	;# 
  8499  014C  0020               	banksel	_RcvInFiFo	;# 
  8500                           
  8501                           ;main.c: 837: if(RcvInFiFo == 32)
  8502  014D  3020               	movlw	32
  8503  014E  0020               	movlb	0	; select bank0
  8504  014F  063B               	xorwf	_RcvInFiFo,w	;volatile
  8505  0150  1903               	btfsc	3,2
  8506                           
  8507                           ;main.c: 838: RcvInFiFo=0;
  8508  0151  01BB               	clrf	_RcvInFiFo	;volatile
  8509  0152                     i1l468:	
  8510  0152  0871               	movf	??_isr+1,w
  8511  0153  0020               	movlb	0	; select bank0
  8512  0154  00FF               	movwf	127
  8513  0155  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8514  0156  0009               	retfie
  8515  0157                     __end_of_isr:	
  8516  007E                     btemp	set	126	;btemp
  8517  007E                     int$flags	set	126
  8518  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    42
    Data        1
    BSS         185
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMONh          11      7       9
    BANK0            80     34      78
    BANK1            80      0      78
    BANK2            80      0      64
    BANK3h            1      0       0
    BANK3l            4      0       0
    BANK4            48      0       0

Pointer List with Targets:

    DecodeSerial@msg	PTR unsigned char  size(1) Largest target is 10
		 -> ModbusBuffer(BANK1[10]), 

    main@pointer	PTR unsigned char  size(1) Largest target is 12
		 -> Setting(BANK1[12]), 

    SaveSetting@pointer	PTR unsigned char  size(1) Largest target is 12
		 -> Setting(BANK1[12]), 

    DoIOCycle@SensorPt	PTR struct . size(1) Largest target is 60
		 -> IOSensorData(BANK3l[60]), 

    CRC16@addr	PTR unsigned char  size(1) Largest target is 32
		 -> ModbusBuffer(BANK1[10]), ModbusPacketBuffer(BANK1[32]), 


Critical Paths under _main in COMMONh

    _main->_DecodeSerial
    _main->_DoIOCycle
    _main->_SetIOConfig
    _InitTimeCapture->_SetTimer1Clock
    _SendReadByteFrame->_SendModbusPacket
    _SendReadRegistersFrame->_SendModbusPacket
    _ReadCurrentRegister->_ReadAllCoils
    _SendReadFrame->_SendModbusPacket
    _SendBytesFrame->_SendModbusPacket
    _ReadVRef->_ReadA2D
    _ReadTSensor->_ReadA2D
    _ReadIO->_ReadIOPin
    _ReadIO->_SetAnalogConfig
    _ReadAllCoils->_GetInputPin
    _PresetSingleRegister->_SaveSetting
    _PresetSingleRegister->_SetIOConfig
    _SetIOConfig->_SetAnalogConfig
    _SetIOConfig->_SetIOChange
    _SetIOConfig->_SetInputConfig
    _SetIOConfig->_SetOutputConfig
    _SetIOConfig->___bmul
    _SaveSetting->_eeprom_write
    _SetSingleCoil->_WriteIO
    _SendPresetFrame->_SendModbusPacket
    _SendFrameError->_SendModbusPacket
    _SendModbusPacket->_CRC16
    _DoIOCycle->___bmul
    _DecodeSerial->_CRC16

Critical Paths under _isr in COMMONh

    None.

Critical Paths under _main in BANK0

    _ExecuteCommand->_ReadHoldingRegister
    _ReadInputStatus->_SendFrameError
    _SendReadByteFrame->_SendModbusPacket
    _ReadHoldingRegister->_SendReadRegistersFrame
    _SendReadRegistersFrame->_SendReadFrame
    _ReadCurrentRegister->_SendBytesFrame
    _SendReadFrame->_SendModbusPacket
    _SendBytesFrame->_SendFrameError
    _ReadVRef->_ReadA2D
    _ReadTSensor->_ReadA2D
    _ReadIO->_ReadA2D
    _PresetSingleRegister->_WriteAllCoils
    _ForceSingleCoil->_SendFrameError
    _SendPresetFrame->_SendModbusPacket
    _SendFrameError->_SendModbusPacket
    _SendModbusPacket->_CRC16
    _DecodeSerial->_CRC16

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3h

    None.

Critical Paths under _isr in BANK3h

    None.

Critical Paths under _main in BANK3l

    None.

Critical Paths under _isr in BANK3l

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   28620
                                             28 BANK0      6     6      0
                       _DecodeSerial
                          _DoIOCycle
                     _ExecuteCommand
                    _InitTimeCapture
                           _RcvClear
                         _RcvGetChar
                        _RcvIsDataIn
                       _ResetIOCycle
                        _SetIOConfig
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          4     4      0      22
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (1) _RcvGetChar                                           2     2      0      23
                                              2 COMMONh    2     2      0
                        _RcvIsDataIn
 ---------------------------------------------------------------------------------
 (1) _RcvIsDataIn                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RcvClear                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTimeCapture                                      0     0      0      45
                     _SetTimer1Clock
 ---------------------------------------------------------------------------------
 (1) _ExecuteCommand                                       0     0      0   23083
                    _ForceSingleCoil
               _PresetSingleRegister
                _ReadCurrentRegister
                _ReadHoldingRegister
                    _ReadInputStatus
                     _SendFrameError
 ---------------------------------------------------------------------------------
 (2) _ReadInputStatus                                      0     0      0    1984
                        _GetInputPin
                     _SendFrameError
                  _SendReadByteFrame
 ---------------------------------------------------------------------------------
 (3) _SendReadByteFrame                                    1     1      0     942
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (2) _ReadHoldingRegister                                 13    13      0    3550
                                             15 BANK0     13    13      0
                     _SendFrameError
             _SendReadRegistersFrame
 ---------------------------------------------------------------------------------
 (3) _SendReadRegistersFrame                               5     1      4    2318
                                             10 BANK0      5     1      4
                   _InitModbusPacket
                   _SendModbusPacket
                      _SendReadFrame
 ---------------------------------------------------------------------------------
 (2) _ReadCurrentRegister                                  6     6      0    6020
                                             16 BANK0      6     6      0
                   _MultipleRegister
                       _ReadAllCoils
                             _ReadIO
                        _ReadTSensor
                           _ReadVRef
                     _SendBytesFrame
                     _SendFrameError
                      _SendReadFrame
 ---------------------------------------------------------------------------------
 (4) _SendReadFrame                                        2     0      2    1122
                                              8 BANK0      2     0      2
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (3) _SendBytesFrame                                       6     6      0    2660
                                             10 BANK0      6     6      0
                   _InitModbusPacket
                     _SendFrameError
                   _SendModbusPacket
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _ReadVRef                                             2     0      2     102
                                              3 BANK0      2     0      2
                            _ReadA2D
 ---------------------------------------------------------------------------------
 (3) _ReadTSensor                                          2     0      2     102
                                              3 BANK0      2     0      2
                            _ReadA2D
 ---------------------------------------------------------------------------------
 (3) _ReadIO                                              10     8      2     689
                                              3 BANK0      6     4      2
                            _ReadA2D
                          _ReadIOPin
                    _SetAnalogConfig
 ---------------------------------------------------------------------------------
 (4) _ReadIOPin                                            4     4      0     113
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (4) _ReadA2D                                              6     4      2     102
                                              2 COMMONh    3     1      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ReadAllCoils                                         7     5      2     208
                                              5 COMMONh    2     0      2
                                              0 BANK0      5     5      0
                        _GetInputPin
 ---------------------------------------------------------------------------------
 (3) _GetInputPin                                          3     3      0      69
                                              2 COMMONh    3     3      0
 ---------------------------------------------------------------------------------
 (3) _MultipleRegister                                     2     2      0      22
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _PresetSingleRegister                                 3     3      0    8092
                                             12 BANK0      3     3      0
                        _SaveSetting
                     _SendFrameError
                    _SendPresetFrame
                        _SetIOConfig
                     _SetTimer1Clock
                      _WriteAllCoils
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _WriteAllCoils                                        4     4      0    1627
                                              8 BANK0      4     4      0
                    _SendPresetFrame
                      _SetSingleCoil
 ---------------------------------------------------------------------------------
 (2) _SetTimer1Clock                                       2     2      0      45
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (1) _SetIOConfig                                          4     4      0    3526
                                              6 COMMONh    1     1      0
                                              0 BANK0      2     2      0
                       _ResetIOCycle
                    _SetAnalogConfig
                        _SetIOChange
                     _SetInputConfig
                    _SetOutputConfig
                          _SetPullUp
               _SetTimeCaptureConfig
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _SetTimeCaptureConfig                                 3     1      2     428
                                              2 COMMONh    3     1      2
 ---------------------------------------------------------------------------------
 (2) _SetPullUp                                            3     2      1     574
                                              2 COMMONh    3     2      1
 ---------------------------------------------------------------------------------
 (2) _SetOutputConfig                                      4     4      0      99
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (2) _SetInputConfig                                       4     4      0     223
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (2) _SetIOChange                                          4     3      1     220
                                              2 COMMONh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _SetAnalogConfig                                      4     4      0     285
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (2) _ResetIOCycle                                         2     2      0      68
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (3) _SaveSetting                                          3     3      0     212
                                              6 COMMONh    1     1      0
                                              0 BANK0      2     2      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         4     3      1     120
                                              2 COMMONh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _ForceSingleCoil                                      1     1      0    2464
                                             10 BANK0      1     1      0
                     _SendFrameError
                    _SendPresetFrame
                      _SetSingleCoil
 ---------------------------------------------------------------------------------
 (4) _SetSingleCoil                                        3     2      1     549
                                              0 BANK0      3     2      1
                            _WriteIO
 ---------------------------------------------------------------------------------
 (5) _WriteIO                                              5     4      1     276
                                              2 COMMONh    5     4      1
 ---------------------------------------------------------------------------------
 (4) _SendPresetFrame                                      0     0      0     942
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (2) _SendFrameError                                       2     2      0     973
                                              8 BANK0      2     2      0
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (3) _SendModbusPacket                                     5     5      0     942
                                              6 COMMONh    1     1      0
                                              4 BANK0      4     4      0
                              _CRC16
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                3     3      0     161
                                              2 COMMONh    3     3      0
 ---------------------------------------------------------------------------------
 (3) _InitModbusPacket                                     1     1      0       0
                                              2 COMMONh    1     1      0
 ---------------------------------------------------------------------------------
 (1) _DoIOCycle                                            4     4      0     705
                                              6 COMMONh    1     1      0
                                              0 BANK0      2     2      0
                      _DealWithError
                      _ScanNextIOPin
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     541
                                              2 COMMONh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _ScanNextIOPin                                        2     2      0      68
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _DealWithError                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DecodeSerial                                         7     7      0     718
                                              6 COMMONh    1     1      0
                                              4 BANK0      4     4      0
                              _CRC16
 ---------------------------------------------------------------------------------
 (4) _CRC16                                                8     6      2     586
                                              2 COMMONh    4     2      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0       0
                                              0 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DecodeSerial
     _CRC16
   _DoIOCycle
     _DealWithError
     _ScanNextIOPin
     ___bmul
   _ExecuteCommand
     _ForceSingleCoil
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendPresetFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SetSingleCoil
         _WriteIO
     _PresetSingleRegister
       _SaveSetting
         _eeprom_write
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendPresetFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SetIOConfig
         _ResetIOCycle
         _SetAnalogConfig
         _SetIOChange
         _SetInputConfig
         _SetOutputConfig
         _SetPullUp
         _SetTimeCaptureConfig
         ___bmul
       _SetTimer1Clock
       _WriteAllCoils
         _SendPresetFrame
           _InitModbusPacket
           _SendModbusPacket
             _CRC16
             _putch
         _SetSingleCoil
           _WriteIO
       ___bmul
     _ReadCurrentRegister
       _MultipleRegister
       _ReadAllCoils
         _GetInputPin
       _ReadIO
         _ReadA2D
         _ReadIOPin
         _SetAnalogConfig
       _ReadTSensor
         _ReadA2D
       _ReadVRef
         _ReadA2D
       _SendBytesFrame
         _InitModbusPacket
         _SendFrameError
           _InitModbusPacket
           _SendModbusPacket
             _CRC16
             _putch
         _SendModbusPacket
           _CRC16
           _putch
         ___bmul
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendReadFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
     _ReadHoldingRegister
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendReadRegistersFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
         _SendReadFrame
           _InitModbusPacket
           _SendModbusPacket
             _CRC16
             _putch
     _ReadInputStatus
       _GetInputPin
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendReadByteFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
     _SendFrameError
       _InitModbusPacket
       _SendModbusPacket
         _CRC16
         _putch
   _InitTimeCapture
     _SetTimer1Clock
   _RcvClear
   _RcvGetChar
     _RcvIsDataIn
   _RcvIsDataIn
   _ResetIOCycle
   _SetIOConfig
     _ResetIOCycle
     _SetAnalogConfig
     _SetIOChange
     _SetInputConfig
     _SetOutputConfig
     _SetPullUp
     _SetTimeCaptureConfig
     ___bmul
   _eeprom_read

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMONh           B      0       1       1        9.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMONh              B      7       9       2       81.8%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      E5       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     22      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3h            1      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK3l            4      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3h               1      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK3l               4      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK4            30      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK4               30      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
DATA                 0      0      E5      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Nov 26 20:29:18 2017

              ??_SetAnalogConfig 0072                     ReadA2D@value 004B                                l5 0691  
            SetInputConfig@_ntmp 0074                   ___bmul@product 0074                 SetIOChange@_temp 0074  
                    __CFG_CP$OFF 0000                               l76 0F9B                               l95 071F  
                             l98 0732                               _RD 0CA8                               _WR 0CA9  
               SetIOChange@value 0072     __end_of_PresetSingleRegister 02BC         __size_of_ReadInputStatus 0013  
                ReadIOPin@_tempb 0073                      __CFG_LVP$ON 0000                _SendReadByteFrame 0C21  
                            l411 0EBC                              l405 0767                              l416 0DF4  
                            l451 04DD                              l455 0796                              l458 07A2  
                            l706 03CD                              l555 07EC                              l619 05C5  
                            l815 0CBB                              l577 0557                              l837 0D68  
                            l694 034F                              l695 035D                              _GIE 005F  
                            _RB0 0068                              _PR2 001B                              _PR4 0416  
                   __CFG_CPD$OFF 0000                              _isr 0004                     __CFG_BORV$LO 0000  
             ?_SendReadByteFrame 0070                   _IOCounterReset 0072                              wreg 0009  
                   __CFG_FOSC$HS 0000              __end_of_GetInputPin 0D47                             INDF0 0000  
                           FSR0H 0005                             FSR1H 0007                             FSR0L 0004  
                           FSR1L 0006                  ?_SetTimer1Clock 0079                             l3101 0E41  
                           l4003 0C39                             l4023 042F                             l3047 0C1F  
                           l4041 0448                             l4051 0462                             l4035 043F  
                           l3091 0E25                             l4203 0E6B                             l4029 0436  
                           l3093 0E2A                             l4133 063C                             l4109 0F65  
                           l4311 0D05                             l4063 047E                             l4047 0451  
                           l3095 0E30                             l4223 0DCF                             l4215 0DB8  
                           l4303 0C75                             l4057 0470                             l3089 0E21  
                           l4321 0199                             l4241 050F                             l4233 04FD  
                           l3361 0CD2                             l4083 04B8                             l4091 04CF  
                           l4075 049E                             l4059 0475                             l3099 0E36  
                           l4323 019C                             l4171 0FFB                             l4163 0FEC  
                           l4139 0647                             l4251 0540                             l4069 0490  
                           l4077 04A6                             l4413 02B5                             l4405 02A3  
                           l4333 01B2                             l4317 0186                             l2645 0D65  
                           l4245 0518                             l4237 0506                             l4431 0FC2  
                           l2583 0727                             l4415 02B8                             l4335 01B6  
                           l2639 0D5A                             l4263 0560                             l4255 054A  
                           l4247 051D                             l4433 0FC5                             l4097 04E2  
                           l4089 04C6                             l4361 01FA                             l4281 059A  
                           l4451 07E8                             l4443 07DD                             l4427 0FB5  
                           l4363 01FD                             l2819 0D30                             l4195 0E4F  
                           l4259 0559                             l4515 02F0                             l4507 02D9  
                           l4381 027B                             l4365 0200                             l4285 05A7  
                           l4293 05C7                             l4461 06C2                             l3823 0EDB  
                           l4391 028F                             l4383 027F                             l4359 01F5  
                           l4279 0590                             l4471 06D5                             l4623 039A  
                           l3825 0EED                             l3905 05E1                             l3913 05EB  
                           l4393 0292                             l4297 05CF                             l4289 05B5  
                           l4641 03C7                             l4609 0384                             l4483 06ED  
                           l4475 06DD                             l4467 06CD                             l4643 03CB  
                           l3773 067E                             l3933 0609                             l3941 0613  
                           l3855 0E89                             l3919 05F5                             l3927 05FF  
                           l4487 06F5                             l4479 06E5                             l4655 03E8  
                           l3785 069F                             l3873 0774                             l4649 03D3  
                           l4657 03EA                             l3787 06AE                             l3947 061D  
                           l3789 06B3                             l3869 075D                             l3799 0D99  
                           _ADIE 048E                             _ADIF 008E                             l3897 0F1C  
                           l3889 0DE7                             ?_isr 0070                             l3999 0C33  
                           _ADON 04E8                ?_InitModbusPacket 0070                     __CFG_WDTE$ON 0000  
                           _BRGH 0CF2                             _CREN 0CEC                             u2150 0D45  
                           u4125 0DC3                             u2550 0BF4                             u4330 0CFA  
                           u4340 0CFB                             u4095 0E50                             u4255 057C  
                           u4370 0197                             _PEIE 005E              ??_SendReadByteFrame 0077  
                           u4555 07D9                             _RCIE 048D                  _SetOutputConfig 0E9A  
                           _RCIF 008D                             u4807 0377                             u4817 0390  
                           u4827 06C3                             u4837 078F                             u4847 079B  
                           _SCKP 0CFC                             _TMR0 0015                             _TMR2 001A  
                           _TMR4 0415                             _SPEN 0CEF                             _CSum 0042  
                           _TXIE 048C                             _TXEN 0CF5                             _WREN 0CAA  
                           _TXIF 008C                             _SYNC 0CF4                             _WPUA 020C  
                           _WPUB 020D                   ??_eeprom_write 0073                    ?_ReadAllCoils 0075  
                   __CFG_WRT$OFF 0000                    __CFG_FCMEN$ON 0000               ??_InitModbusPacket 0072  
                           _main 02BC                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             btemp 007E                      main@pointer 0068  
                  __CFG_BOREN$ON 0000           __size_of_WriteAllCoils 0024      __end_ofSetIOConfig@ValidCCP 0820  
                           start 0157                    __CFG_IESO$OFF 0000                 _ResetCounterFlag 0363  
              ___bmul@multiplier 0075                    __CFG_MCLRE$ON 0000                    ??_ReadTSensor 0075  
                __end_of_ReadA2D 07B4                            ??_isr 0070                 ?_ForceSingleCoil 0070  
                  __CFG_PLLEN$ON 0000        __end_of_SendReadByteFrame 0C31              SendModbusPacket@CRC 004F  
         __size_of_ScanNextIOPin 0027                            _ABDEN 0CF8                            ?_main 0070  
                          _EEADR 0191                            _BRG16 0CFB                            _CRC16 0675  
                          _CARRY 0018                ??_InitTimeCapture 0074                  __end_of_WriteIO 073A  
                          _T1CON 0018                            _T2CON 001C                            _T4CON 0417  
                          _IOCBF 0396                            _IOCBN 0395                            _IOCBP 0394  
                          _CPSON 00F7                            _IOCIE 005B                            i1l471 0075  
                          i1l480 00FB                            i1l473 00A5                            i1l490 013C  
                          i1l466 0015                            i1l475 00D5                            i1l492 0139  
                          i1l484 012C                            i1l468 0152                            i1l477 010B  
                          i1l469 0045                            i1l478 00E1                            _RCSTA 019D  
                  ??_SetIOChange 0073                            _BadIO 003E                            _TMR1H 0017  
                          _TMR1L 0016                            _PORTA 000C                            _PORTB 000D  
                          _TRISA 008C                            _TRISB 008D                            _TXREG 019A  
                          _TXSTA 019E                    ??_SetIOConfig 0076                            __TMR0 0045  
               ??_SendFrameError 0052                            _Retry 0040                    ??_RcvIsDataIn 0072  
             _ModbusFramePointer 0035                            _putch 0D8A               __size_of_DoIOCycle 0038  
                 ??_ReadAllCoils 004A                 _SendModbusPacket 0EC6                       _ForceReset 0360  
                          status 0003                            wtemp0 007E            __size_of_DecodeSerial 003A  
                   ReadIOPin@Pin 0074                  __initialization 0159                 ??_SendBytesFrame 0054  
                   __end_of_main 03EE         PresetSingleRegister@temp 0058                 __end_of_ReadVRef 0C53  
                         CRC16@i 004B                 __end_of_RcvClear 0BDF              __end_of_ReadTSensor 0C11  
                    _GetInputPin 0D28                       _RcvGetChar 0CD2                           ??_main 0066  
                  ??_SaveSetting 0076                           ?_CRC16 0072                    _WriteAllCoils 0DAE  
                     _ModbusData 0022           __size_of_DealWithError 0008          __end_of_SetOutputConfig 0EC6  
              DecodeSerial@rcode 0051                       _RcvOutFiFo 003A                ??_ReadInputStatus 0077  
                   _DecodeSerial 07B4                           _ADCON0 009D                           _ADCON1 009E  
           SendModbusPacket@loop 0051                           _CCP1IE 048A                           _CCP1IF 008A  
                         _CCP2IE 0490                           _CCP2IF 0090                           _CCP3IE 049C  
                         _CCP3IF 009C                           _CCP4IE 049D                           _CCP4IF 009D  
                         _ADRESH 009C                           _ADRESL 009B                           _EEDATA 0193  
                         _CCPR1H 0292                           _CCPR2H 0299                           _CCPR3H 0312  
                         _CCPR1L 0291                           _CCPR4H 0319                           _CCPR2L 0298  
                         _CCPR3L 0311                           _CCPR4L 0318                           _EECON1 0195  
                         _EECON2 0196                   _ExecuteCommand 06B8                           _ANSELA 018C  
                         ?_putch 0070                           _ANSELB 018D              __end_of_SetIOChange 0E9A  
                         _CSMASK 0820                        CRC16@addr 004A                           i1l3563 0102  
                         _IOMASK 080B                           i1l3579 0125              __end_of_SetIOConfig 04E7  
                         _INTCON 000B                           _FVRCON 0117               __size_of_ReadIOPin 0020  
             _ModbusPacketBuffer 00B8                    _ScanNextIOPin 0DF8                           _TMR0IE 005D  
                         _TMR1GE 00CF                           _TMR0IF 005A                           _TMR1IE 0488  
                         _TMR1IF 0088                           _TMR2IE 0489                           _TMR2IF 0089  
                         _TMR4IE 0499                           _TMR4IF 0099                           _SPBRGH 019C  
                         _TMR1ON 00C0                           _SPBRGL 019B                           _WDTCON 0097  
                 _Timer0Overflow 0365             _PresetSingleRegister 017B                        ??_ReadA2D 0074  
           _WaitForEndDeciSecond 03BA              __end_of_RcvIsDataIn 0BF6                           _InFiFo 003C  
              ScanNextIOPin@loop 0073                   __CFG_PWRTE$OFF 0000                           _VRange 003F  
                         _ReadIO 0FC8             __size_of_eeprom_read 0018                           ___bmul 0C31  
                 __CFG_STVREN$ON 0000                        ??_WriteIO 0073               __size_of_SetPullUp 0026  
     __size_of_SendReadByteFrame 0010                __end_of_DoIOCycle 0FC8         __end_of_MultipleRegister 0C21  
           __end_of_eeprom_write 0D8A                 ??_SetInputConfig 0072                   ?_WriteAllCoils 0070  
                __pbitbssCOMMONh 03B8                  _GotCapSenseFlag 03B9           SendBytesFrame@_Address 0058  
         __end_of_ExecuteCommand 06F9              __end_of_SaveSetting 0D28                   SaveSetting@idx 004B  
            SetAnalogConfig@_tmp 0075                   _CurrentIOCycle 0046                   ?_ScanNextIOPin 0070  
                _SetAnalogConfig 073A          __end_of__initialization 0177                   SetIOChange@Pin 0075  
          ?_PresetSingleRegister 0070                  eeprom_read@addr 0075                    ReadIOPin@mask 0075  
                  __end_of_CRC16 06B8                     __pbssCOMMONh 0078                    _DealWithError 0BE5  
       __size_of_SendPresetFrame 0017                    ?_ResetIOCycle 0070              ___bmul@multiplicand 0072  
                   WriteIO@nmask 0075                     WriteIO@value 0072                      _ReadTSensor 0C02  
                  putch@char_out 0073                     __pidataBANK0 0003                    _ModbusAddress 0024  
         __size_of_SendReadFrame 0014                    __end_of_putch 0DAE             __end_of_ReadAllCoils 0E70  
              __end_of_ReadIOPin 0D67                      ?_RcvGetChar 0070               SetSingleCoil@value 004A  
                        ??_CRC16 0074                 ??_SetTimer1Clock 0072                      _SetIOChange 0E70  
               ?_SetOutputConfig 0070                      _SetIOConfig 03EE                eeprom_write@value 0072  
                 SetIOConfig@Pin 004B                  ?_ExecuteCommand 0070         ??_SendReadRegistersFrame 0058  
    __end_of_ReadCurrentRegister 05D7                      _RcvIsDataIn 0BED                          ??_putch 0072  
                     __pbssBANK0 0020                       __pbssBANK1 00A0                       __pbssBANK2 0120  
              __end_of_SetPullUp 0DF8                       WriteIO@Pin 0076                        ?_ReadVRef 004D  
                        BYTELOOP 0669                 _ModbusOnTransmit 0362                        ?_RcvClear 0070  
                 ?_DealWithError 0070                      _ModbusSlave 0036                   ??_ResetIOCycle 0072  
                        ?_ReadIO 004D     __size_of_ReadHoldingRegister 0085                  _InitTimeCapture 0F27  
                     __pmaintext 02BC    __size_of_SetTimeCaptureConfig 0050                          ?___bmul 0072  
      __size_of_InitModbusPacket 000C                       __pintentry 0004                          _CCP1CON 0293  
                        _CCP2CON 029A                          _CCP3CON 0313                          _CCP4CON 031A  
                ??_WriteAllCoils 0052                WriteAllCoils@loop 0055         __end_of_SendModbusPacket 0EF6  
                        _APFCON0 011D                          _APFCON1 011E                          _CCPTMRS 029E  
                        _DHTFlag 0070                      _SaveSetting 0D09                          _COUNTER 01E6  
         __size_of_SetSingleCoil 0012          __end_of_SetAnalogConfig 0778               SetOutputConfig@Pin 0075  
                ??_ScanNextIOPin 0072                    _SendReadFrame 0C79           ??_PresetSingleRegister 0056  
                     ??_ReadVRef 0075                      _TimeCapture 00A0                       ??_RcvClear 0072  
                        _ReadA2D 0778              __size_of_RcvGetChar 001A          SetTimeCaptureConfig@Pin 0074  
                    _Timer1Clock 006D                  __size_of_ReadIO 0038                          _OutFiFo 0078  
             __end_of_NOT_IOMASK 080B                          _Setting 00D8                          _Timerms 0032  
          __size_of_eeprom_write 0023                  __size_of___bmul 0011                  _RcvSerialBuffer 0120  
                        _WriteIO 06F9                ??_SendPresetFrame 0077                   RcvGetChar@temp 0073  
                _ReadInputStatus 0C66                     ?_GetInputPin 0070                          __ptext1 0CBA  
                        __ptext2 0CD2                          __ptext3 0BED                          __ptext4 0BD9  
                        __ptext5 0F27                          __ptext6 06B8                          __ptext7 0C66  
                        __ptext8 0C21                          __ptext9 04E7                        _T1CONbits 0018  
                   __size_of_isr 0153         __size_of_ForceSingleCoil 001D  __size_of_SendReadRegistersFrame 0037  
                 ?_SendReadFrame 0052                          main@idx 006A                          clrloop0 0BE0  
                 _PrimaryTimerms 0026             end_of_initialization 0177          __end_of_InitTimeCapture 0F59  
                ??_DealWithError 0072                ReadAllCoils@stemp 004C                     _eeprom_write 0D67  
                  _SetSingleCoil 07EE                   ReadIO@ioconfig 0051            __size_of_ReadAllCoils 0029  
              ?_MultipleRegister 0070           ReadCurrentRegister@IOn 005F                        _DoIOCycle 0F90  
             ??_MultipleRegister 0072             __end_of_ResetIOCycle 0C66                  _CurrentIOSensor 0048  
               ?_SetAnalogConfig 0070                  _CurrentIOStatus 0049                DoIOCycle@SensorPt 0076  
             SetInputConfig@_tmp 0073                        ReadIO@Pin 0052                    _IOCounterFlag 0071  
                   _ReadAllCoils 0E47                   __end_of_CSMASK 082A                   __end_of_IOMASK 0816  
                  ??_eeprom_read 0072          __size_of_SendFrameError 0016                   ?_SetSingleCoil 004A  
        __end_of_ReadInputStatus 0C79                _TimeCapture1Count 002E                _TimeCapture2Count 002C  
              _TimeCapture3Count 002A                _TimeCapture4Count 0028           _SendReadRegistersFrame 0F59  
               ResetIOCycle@loop 0073                   __end_of_ReadIO 1000                     ?_ReadTSensor 004D  
                __pcstackCOMMONh 0070                  __pcstackCOMMONl 0079                 _InitModbusPacket 0BF6  
                 __end_of___bmul 0C42                        __TMR0_MSB 00B6                     ??_RcvGetChar 0072  
               ??_ExecuteCommand 0077                    __pbitbssBANK0 0360          ReadHoldingRegister@Flag 005E  
                    _WorkingByte 0043          __size_of_SendBytesFrame 004E                       ?_DoIOCycle 0070  
                   ?_SetIOChange 0072                     _CurrentIOPin 0047          ReadHoldingRegister@temp 005F  
                      _ReadIOPin 0D47              _ReadHoldingRegister 04E7              start_initialization 0159  
                      _ByteIndex 0041                     ?_SetIOConfig 0070                  ??_SendReadFrame 0077  
                    __end_of_isr 0157              SetSingleCoil@thePin 004C                     ?_RcvIsDataIn 0070  
                      _RcvInFiFo 003B                        _ModbusCRC 0020                   _ModbusFunction 0037  
              ??_ForceSingleCoil 0054                 ?_InitTimeCapture 0079                         CRC16@crc 004C  
                       CRC16@num 0072                        _SetPullUp 0DD2                __size_of_ReadVRef 0011  
             __end_of_RcvGetChar 0CEC             ?_ReadHoldingRegister 0070                         ??_ReadIO 004F  
              __size_of_RcvClear 0006                        _SerialSum 0039                         ??___bmul 0073  
            __end_of_eeprom_read 0CD2                      __pdataBANK0 006D                     SetPullUp@Pin 0074  
            DecodeSerial@CalcCRC 004F                ?_SendModbusPacket 0070               SetAnalogConfig@Pin 0074  
                   ?_SaveSetting 0070               ??_SendModbusPacket 0076             __size_of_GetInputPin 001F  
                     ?_ReadIOPin 0070                        ___latbits 0001     __end_of_SetTimeCaptureConfig 0627  
                  __pcstackBANK0 004A                      WriteIO@mask 0074                     _ModbusBuffer 00E4  
        __size_of_SetInputConfig 0031              SetIOConfig@ValidCCP 0816                 eeprom_write@addr 0075  
         SendReadByteFrame@value 0079              SendBytesFrame@NByte 0059         __size_of_SetOutputConfig 002C  
                ??_SetSingleCoil 004B     __size_of_ReadCurrentRegister 006B                         ?_ReadA2D 0072  
                _SendPresetFrame 0CA3            ??_ReadHoldingRegister 0059                       ?_SetPullUp 0072  
            SendBytesFrame@_temp 0057                 ?_ReadInputStatus 0070                         ?_WriteIO 0072  
                   _RcvSerialSum 0038            __size_of_ResetIOCycle 0013               SendReadFrame@value 0052  
          __end_of_WriteAllCoils 0DD2                   __size_of_CRC16 0043                      ??_DoIOCycle 004A  
             WriteAllCoils@stemp 0053                    ?_DecodeSerial 0070              SetIOConfig@ioconfig 004A  
                 __size_of_putch 0024                         _ICOUNTER 01E0            __end_of_ScanNextIOPin 0E1F  
         _WaitForStartDeciSecond 03B8          __size_of_SetTimer1Clock 0028    __size_of_PresetSingleRegister 0141  
                 _SendFrameError 0C8D                        clear_ram0 0BDF                      _eeprom_read 0CBA  
               ReadAllCoils@loop 004E                     _ResetIOCycle 0C53              SetOutputConfig@_tmp 0074  
       MultipleRegister@_Address 0073             __size_of_ReadTSensor 000F                SetInputConfig@Pin 0075  
                     _ADCON0bits 009D                       _ADCON1bits 009E                   _SendBytesFrame 0627  
              _WorkingSensorData 00B0                         _BitCount 0044                      ??_ReadIOPin 0072  
                      main@rcode 0069              SetTimer1Clock@value 0073                   ??_DecodeSerial 0076  
           __size_of_SetIOChange 002A    SetTimeCaptureConfig@detection 0072          __end_of_SendPresetFrame 0CBA  
           __size_of_SetIOConfig 00F9                     _SerialBuffer 0140         __end_of_InitModbusPacket 0C02  
         __end_of_SendFrameError 0CA3             __size_of_RcvIsDataIn 0009        __size_of_MultipleRegister 0010  
                       _ReadVRef 0C42                         _RcvClear 0BD9          SetOutputConfig@ioconfig 0073  
          __end_of_DealWithError 0BED          ?_SendReadRegistersFrame 0054                  DecodeSerial@msg 004E  
                    ??_SetPullUp 0073                 __size_of_ReadA2D 003C       SendReadRegistersFrame@temp 0054  
              ??_SetOutputConfig 0072             _SetTimeCaptureConfig 05D7                GetInputPin@thePin 0074  
               __size_of_WriteIO 0041           __end_of_SendBytesFrame 0675                     _TimerDeciSec 003D  
                   _TimerHiCount 0030                  _ForceSingleCoil 0CEC               SendBytesFrame@loop 0056  
           __size_of_SaveSetting 001F        ReadHoldingRegister@ctemp1 0065        ReadHoldingRegister@ctemp2 0063  
      ReadHoldingRegister@ctemp3 0064               _EnableConfigChange 0361                     _TimerSecFlag 0364  
                   _IOSensorData 01A0                         __ptext10 0F59                         __ptext11 056C  
                       __ptext20 0D28                         __ptext12 0C79                         __ptext21 0C11  
                       __ptext13 0627                         __ptext30 0E70                         __ptext22 017B  
                       __ptext14 0C42                         __ptext31 073A                         __ptext23 0DAE  
                       __ptext15 0C02                         __ptext40 0EC6                         __ptext32 0C53  
                       __ptext24 0E1F                         __ptext16 0FC8                         __ptext41 0D8A  
                       __ptext33 0D09                         __ptext25 03EE                         __ptext17 0D47  
                       __ptext42 0BF6                         __ptext34 0D67                         __ptext26 05D7  
                       __ptext18 0778                         __ptext43 0F90                         __ptext35 0CEC  
                       __ptext27 0DD2                         __ptext19 0E47                         __ptext44 0C31  
                       __ptext36 07EE                         __ptext28 0E9A                         __ptext45 0DF8  
                       __ptext37 06F9                         __ptext29 0EF6                         __ptext46 0BE5  
                       __ptext38 0CA3                         __ptext47 07B4                         __ptext39 0C8D  
                       __ptext48 0675                   _SetInputConfig 0EF6                  ?_SendFrameError 0070  
             SaveSetting@pointer 004A   __end_of_SendReadRegistersFrame 0F90                    __size_of_main 0132  
       __size_of_SetAnalogConfig 003E       SendModbusPacket@BufferSize 004E            ?_SetTimeCaptureConfig 0072  
                       int$flags 007E          SendFrameError@ErrorCode 0053                         main@loop 006B  
                ?_SendBytesFrame 0070              _ReadCurrentRegister 056C                        putch@temp 0074  
                       isr@_temp 0034           __end_of_SetInputConfig 0F27                       _FVRCONbits 0117  
        SetAnalogConfig@ioconfig 0073            __end_of_SendReadFrame 0C8D                 ?_SendPresetFrame 0070  
                SetPullUp@PullUp 0072                         intlevel1 0000        __size_of_SendModbusPacket 0030  
                 _SetTimer1Clock 0E1F             ?_ReadCurrentRegister 0070                __CFG_CLKOUTEN$OFF 0000  
           __end_of_DecodeSerial 07EE         __size_of_InitTimeCapture 0032          __end_of_ForceSingleCoil 0D09  
                  ??_GetInputPin 0072                  GetInputPin@_tmp 0073                    __pstringtext1 0800  
                  __pstringtext2 080B                    __pstringtext3 0816                    __pstringtext4 0820  
                     _OPTION_REG 0095    PresetSingleRegister@oldConfig 0057                       _NOT_IOMASK 0800  
                ?_SetInputConfig 0070           __end_of_SetTimer1Clock 0E47      __end_of_ReadHoldingRegister 056C  
        __size_of_ExecuteCommand 0041                 _MultipleRegister 0C11            ??_ReadCurrentRegister 005A  
                  ?_eeprom_write 0072          ReadCurrentRegister@temp 005D                     ?_eeprom_read 0079  
          __end_of_SetSingleCoil 0800           ??_SetTimeCaptureConfig 0074                   ReadA2D@channel 004A  
