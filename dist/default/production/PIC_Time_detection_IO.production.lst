

Microchip Technology PIC LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov 24 19:05:56 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	16F1827
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bitbssCOMMONh,global,bit,class=COMMON,space=1,delta=1
    11                           	psect	bssCOMMONh,global,class=COMMON,space=1,delta=1
    12                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMONh,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackCOMMONl,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	intentry,global,class=CODE,delta=2
    68                           	dabs	1,0x1E0,5,_ICOUNTER
    69                           	dabs	1,0x1A0,60,_IOSensorData
    70                           	dabs	1,0x1E6,10,_COUNTER
    71                           	dabs	1,0x7E,2
    72  0000                     
    73                           ; Version 1.44
    74                           ; Generated 14/09/2017 GMT
    75                           ; 
    76                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    77                           ; All rights reserved.
    78                           ; 
    79                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    80                           ; 
    81                           ; Redistribution and use in source and binary forms, with or without modification, are
    82                           ; permitted provided that the following conditions are met:
    83                           ; 
    84                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    85                           ;        conditions and the following disclaimer.
    86                           ; 
    87                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    88                           ;        of conditions and the following disclaimer in the documentation and/or other
    89                           ;        materials provided with the distribution.
    90                           ; 
    91                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    92                           ;        software without specific prior written permission.
    93                           ; 
    94                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    95                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    96                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    97                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    98                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    99                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   100                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   101                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   102                           ; 
   103                           ; 
   104                           ; Code-generator required, PIC16F1827 Definitions
   105                           ; 
   106                           ; SFR Addresses
   107  0000                     	;# 
   108  0001                     	;# 
   109  0002                     	;# 
   110  0003                     	;# 
   111  0004                     	;# 
   112  0005                     	;# 
   113  0006                     	;# 
   114  0007                     	;# 
   115  0008                     	;# 
   116  0009                     	;# 
   117  000A                     	;# 
   118  000B                     	;# 
   119  000C                     	;# 
   120  000D                     	;# 
   121  0011                     	;# 
   122  0012                     	;# 
   123  0013                     	;# 
   124  0014                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  0019                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  008C                     	;# 
   137  008D                     	;# 
   138  0091                     	;# 
   139  0092                     	;# 
   140  0093                     	;# 
   141  0094                     	;# 
   142  0095                     	;# 
   143  0096                     	;# 
   144  0097                     	;# 
   145  0098                     	;# 
   146  0099                     	;# 
   147  009A                     	;# 
   148  009B                     	;# 
   149  009B                     	;# 
   150  009C                     	;# 
   151  009D                     	;# 
   152  009E                     	;# 
   153  010C                     	;# 
   154  010D                     	;# 
   155  0111                     	;# 
   156  0112                     	;# 
   157  0113                     	;# 
   158  0114                     	;# 
   159  0115                     	;# 
   160  0116                     	;# 
   161  0117                     	;# 
   162  0118                     	;# 
   163  0119                     	;# 
   164  011A                     	;# 
   165  011B                     	;# 
   166  011D                     	;# 
   167  011E                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170  0191                     	;# 
   171  0191                     	;# 
   172  0192                     	;# 
   173  0193                     	;# 
   174  0193                     	;# 
   175  0193                     	;# 
   176  0194                     	;# 
   177  0195                     	;# 
   178  0196                     	;# 
   179  0199                     	;# 
   180  019A                     	;# 
   181  019B                     	;# 
   182  019B                     	;# 
   183  019B                     	;# 
   184  019B                     	;# 
   185  019C                     	;# 
   186  019C                     	;# 
   187  019D                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  020C                     	;# 
   191  020D                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  0291                     	;# 
   215  0291                     	;# 
   216  0292                     	;# 
   217  0293                     	;# 
   218  0294                     	;# 
   219  0295                     	;# 
   220  0295                     	;# 
   221  0296                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029B                     	;# 
   227  029C                     	;# 
   228  029C                     	;# 
   229  029D                     	;# 
   230  029E                     	;# 
   231  029E                     	;# 
   232  0311                     	;# 
   233  0311                     	;# 
   234  0312                     	;# 
   235  0313                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  0394                     	;# 
   241  0395                     	;# 
   242  0396                     	;# 
   243  039A                     	;# 
   244  039C                     	;# 
   245  039D                     	;# 
   246  039E                     	;# 
   247  039F                     	;# 
   248  0415                     	;# 
   249  0416                     	;# 
   250  0417                     	;# 
   251  041C                     	;# 
   252  041D                     	;# 
   253  041E                     	;# 
   254  0FE4                     	;# 
   255  0FE5                     	;# 
   256  0FE6                     	;# 
   257  0FE7                     	;# 
   258  0FE8                     	;# 
   259  0FE9                     	;# 
   260  0FEA                     	;# 
   261  0FEB                     	;# 
   262  0FED                     	;# 
   263  0FEE                     	;# 
   264  0FEF                     	;# 
   265  0000                     	;# 
   266  0001                     	;# 
   267  0002                     	;# 
   268  0003                     	;# 
   269  0004                     	;# 
   270  0005                     	;# 
   271  0006                     	;# 
   272  0007                     	;# 
   273  0008                     	;# 
   274  0009                     	;# 
   275  000A                     	;# 
   276  000B                     	;# 
   277  000C                     	;# 
   278  000D                     	;# 
   279  0011                     	;# 
   280  0012                     	;# 
   281  0013                     	;# 
   282  0014                     	;# 
   283  0015                     	;# 
   284  0016                     	;# 
   285  0016                     	;# 
   286  0017                     	;# 
   287  0018                     	;# 
   288  0019                     	;# 
   289  001A                     	;# 
   290  001B                     	;# 
   291  001C                     	;# 
   292  001E                     	;# 
   293  001F                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  0091                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0095                     	;# 
   301  0096                     	;# 
   302  0097                     	;# 
   303  0098                     	;# 
   304  0099                     	;# 
   305  009A                     	;# 
   306  009B                     	;# 
   307  009B                     	;# 
   308  009C                     	;# 
   309  009D                     	;# 
   310  009E                     	;# 
   311  010C                     	;# 
   312  010D                     	;# 
   313  0111                     	;# 
   314  0112                     	;# 
   315  0113                     	;# 
   316  0114                     	;# 
   317  0115                     	;# 
   318  0116                     	;# 
   319  0117                     	;# 
   320  0118                     	;# 
   321  0119                     	;# 
   322  011A                     	;# 
   323  011B                     	;# 
   324  011D                     	;# 
   325  011E                     	;# 
   326  018C                     	;# 
   327  018D                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0193                     	;# 
   334  0194                     	;# 
   335  0195                     	;# 
   336  0196                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020C                     	;# 
   349  020D                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0219                     	;# 
   366  021A                     	;# 
   367  021B                     	;# 
   368  021C                     	;# 
   369  021D                     	;# 
   370  021E                     	;# 
   371  021F                     	;# 
   372  0291                     	;# 
   373  0291                     	;# 
   374  0292                     	;# 
   375  0293                     	;# 
   376  0294                     	;# 
   377  0295                     	;# 
   378  0295                     	;# 
   379  0296                     	;# 
   380  0298                     	;# 
   381  0298                     	;# 
   382  0299                     	;# 
   383  029A                     	;# 
   384  029B                     	;# 
   385  029C                     	;# 
   386  029C                     	;# 
   387  029D                     	;# 
   388  029E                     	;# 
   389  029E                     	;# 
   390  0311                     	;# 
   391  0311                     	;# 
   392  0312                     	;# 
   393  0313                     	;# 
   394  0318                     	;# 
   395  0318                     	;# 
   396  0319                     	;# 
   397  031A                     	;# 
   398  0394                     	;# 
   399  0395                     	;# 
   400  0396                     	;# 
   401  039A                     	;# 
   402  039C                     	;# 
   403  039D                     	;# 
   404  039E                     	;# 
   405  039F                     	;# 
   406  0415                     	;# 
   407  0416                     	;# 
   408  0417                     	;# 
   409  041C                     	;# 
   410  041D                     	;# 
   411  041E                     	;# 
   412  0FE4                     	;# 
   413  0FE5                     	;# 
   414  0FE6                     	;# 
   415  0FE7                     	;# 
   416  0FE8                     	;# 
   417  0FE9                     	;# 
   418  0FEA                     	;# 
   419  0FEB                     	;# 
   420  0FED                     	;# 
   421  0FEE                     	;# 
   422  0FEF                     	;# 
   423  0000                     	;# 
   424  0001                     	;# 
   425  0002                     	;# 
   426  0003                     	;# 
   427  0004                     	;# 
   428  0005                     	;# 
   429  0006                     	;# 
   430  0007                     	;# 
   431  0008                     	;# 
   432  0009                     	;# 
   433  000A                     	;# 
   434  000B                     	;# 
   435  000C                     	;# 
   436  000D                     	;# 
   437  0011                     	;# 
   438  0012                     	;# 
   439  0013                     	;# 
   440  0014                     	;# 
   441  0015                     	;# 
   442  0016                     	;# 
   443  0016                     	;# 
   444  0017                     	;# 
   445  0018                     	;# 
   446  0019                     	;# 
   447  001A                     	;# 
   448  001B                     	;# 
   449  001C                     	;# 
   450  001E                     	;# 
   451  001F                     	;# 
   452  008C                     	;# 
   453  008D                     	;# 
   454  0091                     	;# 
   455  0092                     	;# 
   456  0093                     	;# 
   457  0094                     	;# 
   458  0095                     	;# 
   459  0096                     	;# 
   460  0097                     	;# 
   461  0098                     	;# 
   462  0099                     	;# 
   463  009A                     	;# 
   464  009B                     	;# 
   465  009B                     	;# 
   466  009C                     	;# 
   467  009D                     	;# 
   468  009E                     	;# 
   469  010C                     	;# 
   470  010D                     	;# 
   471  0111                     	;# 
   472  0112                     	;# 
   473  0113                     	;# 
   474  0114                     	;# 
   475  0115                     	;# 
   476  0116                     	;# 
   477  0117                     	;# 
   478  0118                     	;# 
   479  0119                     	;# 
   480  011A                     	;# 
   481  011B                     	;# 
   482  011D                     	;# 
   483  011E                     	;# 
   484  018C                     	;# 
   485  018D                     	;# 
   486  0191                     	;# 
   487  0191                     	;# 
   488  0192                     	;# 
   489  0193                     	;# 
   490  0193                     	;# 
   491  0193                     	;# 
   492  0194                     	;# 
   493  0195                     	;# 
   494  0196                     	;# 
   495  0199                     	;# 
   496  019A                     	;# 
   497  019B                     	;# 
   498  019B                     	;# 
   499  019B                     	;# 
   500  019B                     	;# 
   501  019C                     	;# 
   502  019C                     	;# 
   503  019D                     	;# 
   504  019E                     	;# 
   505  019F                     	;# 
   506  020C                     	;# 
   507  020D                     	;# 
   508  0211                     	;# 
   509  0211                     	;# 
   510  0212                     	;# 
   511  0212                     	;# 
   512  0213                     	;# 
   513  0213                     	;# 
   514  0214                     	;# 
   515  0214                     	;# 
   516  0215                     	;# 
   517  0215                     	;# 
   518  0215                     	;# 
   519  0216                     	;# 
   520  0216                     	;# 
   521  0217                     	;# 
   522  0217                     	;# 
   523  0219                     	;# 
   524  021A                     	;# 
   525  021B                     	;# 
   526  021C                     	;# 
   527  021D                     	;# 
   528  021E                     	;# 
   529  021F                     	;# 
   530  0291                     	;# 
   531  0291                     	;# 
   532  0292                     	;# 
   533  0293                     	;# 
   534  0294                     	;# 
   535  0295                     	;# 
   536  0295                     	;# 
   537  0296                     	;# 
   538  0298                     	;# 
   539  0298                     	;# 
   540  0299                     	;# 
   541  029A                     	;# 
   542  029B                     	;# 
   543  029C                     	;# 
   544  029C                     	;# 
   545  029D                     	;# 
   546  029E                     	;# 
   547  029E                     	;# 
   548  0311                     	;# 
   549  0311                     	;# 
   550  0312                     	;# 
   551  0313                     	;# 
   552  0318                     	;# 
   553  0318                     	;# 
   554  0319                     	;# 
   555  031A                     	;# 
   556  0394                     	;# 
   557  0395                     	;# 
   558  0396                     	;# 
   559  039A                     	;# 
   560  039C                     	;# 
   561  039D                     	;# 
   562  039E                     	;# 
   563  039F                     	;# 
   564  0415                     	;# 
   565  0416                     	;# 
   566  0417                     	;# 
   567  041C                     	;# 
   568  041D                     	;# 
   569  041E                     	;# 
   570  0FE4                     	;# 
   571  0FE5                     	;# 
   572  0FE6                     	;# 
   573  0FE7                     	;# 
   574  0FE8                     	;# 
   575  0FE9                     	;# 
   576  0FEA                     	;# 
   577  0FEB                     	;# 
   578  0FED                     	;# 
   579  0FEE                     	;# 
   580  0FEF                     	;# 
   581                           
   582                           	psect	eeprom_data
   583  0000  000D 0006 0006 000D 0006 0006 0006 0006 	db	13,6,6,13,6,6,6,6	;# 
   584  0008  000D 000D 007F 00FF 00FF 00FF 00FF 00FF 	db	13,13,127,255,255,255,255,255	;# 
   585  0000                     	;# 
   586  0001                     	;# 
   587  0002                     	;# 
   588  0003                     	;# 
   589  0004                     	;# 
   590  0005                     	;# 
   591  0006                     	;# 
   592  0007                     	;# 
   593  0008                     	;# 
   594  0009                     	;# 
   595  000A                     	;# 
   596  000B                     	;# 
   597  000C                     	;# 
   598  000D                     	;# 
   599  0011                     	;# 
   600  0012                     	;# 
   601  0013                     	;# 
   602  0014                     	;# 
   603  0015                     	;# 
   604  0016                     	;# 
   605  0016                     	;# 
   606  0017                     	;# 
   607  0018                     	;# 
   608  0019                     	;# 
   609  001A                     	;# 
   610  001B                     	;# 
   611  001C                     	;# 
   612  001E                     	;# 
   613  001F                     	;# 
   614  008C                     	;# 
   615  008D                     	;# 
   616  0091                     	;# 
   617  0092                     	;# 
   618  0093                     	;# 
   619  0094                     	;# 
   620  0095                     	;# 
   621  0096                     	;# 
   622  0097                     	;# 
   623  0098                     	;# 
   624  0099                     	;# 
   625  009A                     	;# 
   626  009B                     	;# 
   627  009B                     	;# 
   628  009C                     	;# 
   629  009D                     	;# 
   630  009E                     	;# 
   631  010C                     	;# 
   632  010D                     	;# 
   633  0111                     	;# 
   634  0112                     	;# 
   635  0113                     	;# 
   636  0114                     	;# 
   637  0115                     	;# 
   638  0116                     	;# 
   639  0117                     	;# 
   640  0118                     	;# 
   641  0119                     	;# 
   642  011A                     	;# 
   643  011B                     	;# 
   644  011D                     	;# 
   645  011E                     	;# 
   646  018C                     	;# 
   647  018D                     	;# 
   648  0191                     	;# 
   649  0191                     	;# 
   650  0192                     	;# 
   651  0193                     	;# 
   652  0193                     	;# 
   653  0193                     	;# 
   654  0194                     	;# 
   655  0195                     	;# 
   656  0196                     	;# 
   657  0199                     	;# 
   658  019A                     	;# 
   659  019B                     	;# 
   660  019B                     	;# 
   661  019B                     	;# 
   662  019B                     	;# 
   663  019C                     	;# 
   664  019C                     	;# 
   665  019D                     	;# 
   666  019E                     	;# 
   667  019F                     	;# 
   668  020C                     	;# 
   669  020D                     	;# 
   670  0211                     	;# 
   671  0211                     	;# 
   672  0212                     	;# 
   673  0212                     	;# 
   674  0213                     	;# 
   675  0213                     	;# 
   676  0214                     	;# 
   677  0214                     	;# 
   678  0215                     	;# 
   679  0215                     	;# 
   680  0215                     	;# 
   681  0216                     	;# 
   682  0216                     	;# 
   683  0217                     	;# 
   684  0217                     	;# 
   685  0219                     	;# 
   686  021A                     	;# 
   687  021B                     	;# 
   688  021C                     	;# 
   689  021D                     	;# 
   690  021E                     	;# 
   691  021F                     	;# 
   692  0291                     	;# 
   693  0291                     	;# 
   694  0292                     	;# 
   695  0293                     	;# 
   696  0294                     	;# 
   697  0295                     	;# 
   698  0295                     	;# 
   699  0296                     	;# 
   700  0298                     	;# 
   701  0298                     	;# 
   702  0299                     	;# 
   703  029A                     	;# 
   704  029B                     	;# 
   705  029C                     	;# 
   706  029C                     	;# 
   707  029D                     	;# 
   708  029E                     	;# 
   709  029E                     	;# 
   710  0311                     	;# 
   711  0311                     	;# 
   712  0312                     	;# 
   713  0313                     	;# 
   714  0318                     	;# 
   715  0318                     	;# 
   716  0319                     	;# 
   717  031A                     	;# 
   718  0394                     	;# 
   719  0395                     	;# 
   720  0396                     	;# 
   721  039A                     	;# 
   722  039C                     	;# 
   723  039D                     	;# 
   724  039E                     	;# 
   725  039F                     	;# 
   726  0415                     	;# 
   727  0416                     	;# 
   728  0417                     	;# 
   729  041C                     	;# 
   730  041D                     	;# 
   731  041E                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743                           
   744                           	psect	stringtext1
   745  0800                     __pstringtext1:	
   746  0800                     _NOT_IOMASK:	
   747  0800  34F7               	retlw	247
   748  0801  34FD               	retlw	253
   749  0802  34EF               	retlw	239
   750  0803  34BF               	retlw	191
   751  0804  347F               	retlw	127
   752  0805  34FE               	retlw	254
   753  0806  34FD               	retlw	253
   754  0807  34FB               	retlw	251
   755  0808  34F7               	retlw	247
   756  0809  34EF               	retlw	239
   757  080A  34FF               	retlw	255
   758  080B                     __end_of_NOT_IOMASK:	
   759                           
   760                           	psect	stringtext2
   761  080B                     __pstringtext2:	
   762  080B                     _IOMASK:	
   763  080B  3408               	retlw	8
   764  080C  3402               	retlw	2
   765  080D  3410               	retlw	16
   766  080E  3440               	retlw	64
   767  080F  3480               	retlw	128
   768  0810  3401               	retlw	1
   769  0811  3402               	retlw	2
   770  0812  3404               	retlw	4
   771  0813  3408               	retlw	8
   772  0814  3410               	retlw	16
   773  0815  3400               	retlw	0
   774  0816                     __end_of_IOMASK:	
   775                           
   776                           	psect	stringtext3
   777  0816                     __pstringtext3:	
   778  0816                     SetIOConfig@ValidCCP:	
   779  0816  3401               	retlw	1
   780  0817  3400               	retlw	0
   781  0818  3400               	retlw	0
   782  0819  3401               	retlw	1
   783  081A  3400               	retlw	0
   784  081B  3400               	retlw	0
   785  081C  3400               	retlw	0
   786  081D  3400               	retlw	0
   787  081E  3401               	retlw	1
   788  081F  3401               	retlw	1
   789  0820                     __end_ofSetIOConfig@ValidCCP:	
   790                           
   791                           	psect	stringtext4
   792  0820                     __pstringtext4:	
   793  0820                     _CSMASK:	
   794  0820  3409               	retlw	9
   795  0821  340B               	retlw	11
   796  0822  3408               	retlw	8
   797  0823  3405               	retlw	5
   798  0824  3406               	retlw	6
   799  0825  3400               	retlw	0
   800  0826  3401               	retlw	1
   801  0827  3402               	retlw	2
   802  0828  3403               	retlw	3
   803  0829  3404               	retlw	4
   804  082A                     __end_of_CSMASK:	
   805  0070                     _DHTFlag	set	112
   806  0071                     _IOCounterFlag	set	113
   807  0018                     _T1CON	set	24
   808  001A                     _TMR2	set	26
   809  001B                     _PR2	set	27
   810  001C                     _T2CON	set	28
   811  000B                     _INTCON	set	11
   812  0016                     _TMR1L	set	22
   813  0017                     _TMR1H	set	23
   814  0015                     _TMR0	set	21
   815  000C                     _PORTA	set	12
   816  000D                     _PORTB	set	13
   817  0018                     _CARRY	set	24
   818  00C0                     _TMR1ON	set	192
   819  00CF                     _TMR1GE	set	207
   820  0099                     _TMR4IF	set	153
   821  005B                     _IOCIE	set	91
   822  005E                     _PEIE	set	94
   823  0068                     _RB0	set	104
   824  008D                     _RCIF	set	141
   825  008C                     _TXIF	set	140
   826  00F7                     _CPSON	set	247
   827  0089                     _TMR2IF	set	137
   828  009D                     _CCP4IF	set	157
   829  009C                     _CCP3IF	set	156
   830  0090                     _CCP2IF	set	144
   831  008A                     _CCP1IF	set	138
   832  0088                     _TMR1IF	set	136
   833  008E                     _ADIF	set	142
   834  005F                     _GIE	set	95
   835  005A                     _TMR0IF	set	90
   836  005D                     _TMR0IE	set	93
   837  009D                     _ADCON0	set	157
   838  009E                     _ADCON1	set	158
   839  0095                     _OPTION_REG	set	149
   840  0097                     _WDTCON	set	151
   841  009B                     _ADRESL	set	155
   842  009C                     _ADRESH	set	156
   843  009D                     _ADCON0bits	set	157
   844  009E                     _ADCON1bits	set	158
   845  008C                     _TRISA	set	140
   846  008D                     _TRISB	set	141
   847  0499                     _TMR4IE	set	1177
   848  0489                     _TMR2IE	set	1161
   849  048D                     _RCIE	set	1165
   850  048C                     _TXIE	set	1164
   851  0488                     _TMR1IE	set	1160
   852  04E8                     _ADON	set	1256
   853  048E                     _ADIE	set	1166
   854  049D                     _CCP4IE	set	1181
   855  049C                     _CCP3IE	set	1180
   856  0490                     _CCP2IE	set	1168
   857  048A                     _CCP1IE	set	1162
   858  0117                     _FVRCON	set	279
   859  011E                     _APFCON1	set	286
   860  011D                     _APFCON0	set	285
   861  0117                     _FVRCONbits	set	279
   862  0191                     _EEADR	set	401
   863  0196                     _EECON2	set	406
   864  0193                     _EEDATA	set	403
   865  0195                     _EECON1	set	405
   866  019C                     _SPBRGH	set	412
   867  019B                     _SPBRGL	set	411
   868  019D                     _RCSTA	set	413
   869  019E                     _TXSTA	set	414
   870  019A                     _TXREG	set	410
   871  018C                     _ANSELA	set	396
   872  018D                     _ANSELB	set	397
   873  0CAA                     _WREN	set	3242
   874  0CA8                     _RD	set	3240
   875  0CA9                     _WR	set	3241
   876  0CF8                     _ABDEN	set	3320
   877  0CFC                     _SCKP	set	3324
   878  0CEC                     _CREN	set	3308
   879  0CEF                     _SPEN	set	3311
   880  0CF5                     _TXEN	set	3317
   881  0CF4                     _SYNC	set	3316
   882  0CFB                     _BRG16	set	3323
   883  0CF2                     _BRGH	set	3314
   884  020C                     _WPUA	set	524
   885  020D                     _WPUB	set	525
   886  029E                     _CCPTMRS	set	670
   887  0298                     _CCPR2L	set	664
   888  0299                     _CCPR2H	set	665
   889  0291                     _CCPR1L	set	657
   890  0292                     _CCPR1H	set	658
   891  029A                     _CCP2CON	set	666
   892  0293                     _CCP1CON	set	659
   893  0318                     _CCPR4L	set	792
   894  0319                     _CCPR4H	set	793
   895  0311                     _CCPR3L	set	785
   896  0312                     _CCPR3H	set	786
   897  031A                     _CCP4CON	set	794
   898  0313                     _CCP3CON	set	787
   899  0396                     _IOCBF	set	918
   900  0395                     _IOCBN	set	917
   901  0394                     _IOCBP	set	916
   902  0415                     _TMR4	set	1045
   903  0416                     _PR4	set	1046
   904  0417                     _T4CON	set	1047
   905  0072                     _IOCounterReset	set	114
   906                           
   907                           ; #config settings
   908  0000                     
   909                           	psect	cinit
   910  0153                     start_initialization:	
   911  0153                     __initialization:	
   912                           
   913                           ; Clear objects allocated to BITCOMMONh
   914  0153  01F7               	clrf	(__pbitbssCOMMONh/(0+8))& (0+127)
   915                           
   916                           ; Clear objects allocated to COMMONh
   917  0154  01F8               	clrf	__pbssCOMMONh& (0+127)
   918                           
   919                           ; Clear objects allocated to BITBANK0
   920  0155  0020               	movlb	0	; select bank0
   921  0156  01EA               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
   922                           
   923                           ; Clear objects allocated to BANK0
   924  0157  3020               	movlw	low __pbssBANK0
   925  0158  0084               	movwf	4
   926  0159  3000               	movlw	high __pbssBANK0
   927  015A  0085               	movwf	5
   928  015B  302E               	movlw	46
   929  015C  318C  24FF  3181   	fcall	clear_ram0
   930                           
   931                           ; Clear objects allocated to BANK1
   932  015F  30A0               	movlw	low __pbssBANK1
   933  0160  0084               	movwf	4
   934  0161  3000               	movlw	high __pbssBANK1
   935  0162  0085               	movwf	5
   936  0163  304B               	movlw	75
   937  0164  318C  24FF  3181   	fcall	clear_ram0
   938                           
   939                           ; Clear objects allocated to BANK2
   940  0167  3020               	movlw	low __pbssBANK2
   941  0168  0084               	movwf	4
   942  0169  3001               	movlw	high __pbssBANK2
   943  016A  0085               	movwf	5
   944  016B  3040               	movlw	64
   945  016C  318C  24FF         	fcall	clear_ram0
   946  016E                     end_of_initialization:	
   947                           ;End of C runtime variable initialization code
   948                           
   949  016E                     __end_of__initialization:	
   950  016E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   951  016F  0020               	movlb	0
   952  0170  3181  2972         	ljmp	_main	;jump to C main() function
   953                           
   954                           	psect	bitbssCOMMONh
   955  03B8                     __pbitbssCOMMONh:	
   956  03B8                     _WaitForStartDeciSecond:	
   957  03B8                     	ds	1
   958  03B9                     _GotCapSenseFlag:	
   959  03B9                     	ds	1
   960  03BA                     _WaitForEndDeciSecond:	
   961  03BA                     	ds	1
   962                           
   963                           	psect	bssCOMMONh
   964  0078                     __pbssCOMMONh:	
   965  0078                     _OutFiFo:	
   966  0078                     	ds	1
   967                           
   968                           	psect	bitbssBANK0
   969  0350                     __pbitbssBANK0:	
   970  0350                     _ForceReset:	
   971  0350                     	ds	1
   972  0351                     _EnableConfigChange:	
   973  0351                     	ds	1
   974  0352                     _ModbusOnTransmit:	
   975  0352                     	ds	1
   976  0353                     _ResetCounterFlag:	
   977  0353                     	ds	1
   978  0354                     _TimerSecFlag:	
   979  0354                     	ds	1
   980  0355                     _Timer0Overflow:	
   981  0355                     	ds	1
   982                           
   983                           	psect	bssBANK0
   984  0020                     __pbssBANK0:	
   985  0020                     _TimerLoCount:	
   986  0020                     	ds	2
   987  0022                     _ModbusCRC:	
   988  0022                     	ds	2
   989  0024                     _ModbusData:	
   990  0024                     	ds	2
   991  0026                     _ModbusAddress:	
   992  0026                     	ds	2
   993  0028                     _PrimaryTimerms:	
   994  0028                     	ds	2
   995  002A                     _TimeCapture4Count:	
   996  002A                     	ds	2
   997  002C                     _TimeCapture3Count:	
   998  002C                     	ds	2
   999  002E                     _TimeCapture2Count:	
  1000  002E                     	ds	2
  1001  0030                     _TimeCapture1Count:	
  1002  0030                     	ds	2
  1003  0032                     _TimerHiCount:	
  1004  0032                     	ds	2
  1005  0034                     __TMR0_MSB:	
  1006  0034                     	ds	2
  1007  0036                     _Timerms:	
  1008  0036                     	ds	2
  1009  0038                     isr@_temp:	
  1010  0038                     	ds	1
  1011  0039                     _ModbusFramePointer:	
  1012  0039                     	ds	1
  1013  003A                     _ModbusSlave:	
  1014  003A                     	ds	1
  1015  003B                     _ModbusFunction:	
  1016  003B                     	ds	1
  1017  003C                     _RcvSerialSum:	
  1018  003C                     	ds	1
  1019  003D                     _SerialSum:	
  1020  003D                     	ds	1
  1021  003E                     _RcvOutFiFo:	
  1022  003E                     	ds	1
  1023  003F                     _RcvInFiFo:	
  1024  003F                     	ds	1
  1025  0040                     _InFiFo:	
  1026  0040                     	ds	1
  1027  0041                     _TimerDeciSec:	
  1028  0041                     	ds	1
  1029  0042                     _BadIO:	
  1030  0042                     	ds	1
  1031  0043                     _VRange:	
  1032  0043                     	ds	1
  1033  0044                     _Retry:	
  1034  0044                     	ds	1
  1035  0045                     _ByteIndex:	
  1036  0045                     	ds	1
  1037  0046                     _CSum:	
  1038  0046                     	ds	1
  1039  0047                     _WorkingByte:	
  1040  0047                     	ds	1
  1041  0048                     _BitCount:	
  1042  0048                     	ds	1
  1043  0049                     __TMR0:	
  1044  0049                     	ds	1
  1045  004A                     _CurrentIOCycle:	
  1046  004A                     	ds	1
  1047  004B                     _CurrentIOPin:	
  1048  004B                     	ds	1
  1049  004C                     _CurrentIOSensor:	
  1050  004C                     	ds	1
  1051  004D                     _CurrentIOStatus:	
  1052  004D                     	ds	1
  1053                           
  1054                           	psect	bssBANK1
  1055  00A0                     __pbssBANK1:	
  1056  00A0                     _TimeCapture:	
  1057  00A0                     	ds	16
  1058  00B0                     _WorkingSensorData:	
  1059  00B0                     	ds	6
  1060  00B6                     _ModbusPacketBuffer:	
  1061  00B6                     	ds	32
  1062  00D6                     _Setting:	
  1063  00D6                     	ds	11
  1064  00E1                     _ModbusBuffer:	
  1065  00E1                     	ds	10
  1066                           
  1067                           	psect	bssBANK2
  1068  0120                     __pbssBANK2:	
  1069  0120                     _RcvSerialBuffer:	
  1070  0120                     	ds	32
  1071  0140                     _SerialBuffer:	
  1072  0140                     	ds	32
  1073                           
  1074                           	psect	clrtext
  1075  0CFF                     clear_ram0:	
  1076                           ;	Called with FSR0 containing the base address, and
  1077                           ;	WREG with the size to clear
  1078                           
  1079  0CFF  0064               	clrwdt	;clear the watchdog before getting into this loop
  1080  0D00                     clrloop0:	
  1081  0D00  0180               	clrf	0	;clear RAM location pointed to by FSR
  1082  0D01  3101               	addfsr 0,1
  1083  0D02  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1084  0D03  2D00               	goto	clrloop0	;have we reached the end yet?
  1085  0D04  3400               	retlw	0	;all done for this memory range, return
  1086                           
  1087                           	psect	cstackCOMMONh
  1088  0070                     __pcstackCOMMONh:	
  1089  0070                     ?_DealWithError:	
  1090  0070                     ?_ScanNextIOPin:	
  1091                           ; 1 bytes @ 0x0
  1092                           
  1093  0070                     ?_DoIOCycle:	
  1094                           ; 1 bytes @ 0x0
  1095                           
  1096  0070                     ?_ResetIOCycle:	
  1097                           ; 1 bytes @ 0x0
  1098                           
  1099  0070                     ?_ReadIOPin:	
  1100                           ; 1 bytes @ 0x0
  1101                           
  1102  0070                     ?_SaveSetting:	
  1103                           ; 1 bytes @ 0x0
  1104                           
  1105  0070                     ?_SetAnalogConfig:	
  1106                           ; 1 bytes @ 0x0
  1107                           
  1108  0070                     ?_SetOutputConfig:	
  1109                           ; 1 bytes @ 0x0
  1110                           
  1111  0070                     ?_SetInputConfig:	
  1112                           ; 1 bytes @ 0x0
  1113                           
  1114  0070                     ?_SetIOConfig:	
  1115                           ; 1 bytes @ 0x0
  1116                           
  1117  0070                     ?_isr:	
  1118                           ; 1 bytes @ 0x0
  1119                           
  1120  0070                     ??_isr:	
  1121                           ; 1 bytes @ 0x0
  1122                           
  1123  0070                     ?_putch:	
  1124                           ; 1 bytes @ 0x0
  1125                           
  1126  0070                     ?_RcvClear:	
  1127                           ; 1 bytes @ 0x0
  1128                           
  1129  0070                     ?_RcvIsDataIn:	
  1130                           ; 1 bytes @ 0x0
  1131                           
  1132  0070                     ?_RcvGetChar:	
  1133                           ; 1 bytes @ 0x0
  1134                           
  1135  0070                     ?_SendModbusPacket:	
  1136                           ; 1 bytes @ 0x0
  1137                           
  1138  0070                     ?_InitModbusPacket:	
  1139                           ; 1 bytes @ 0x0
  1140                           
  1141  0070                     ?_SendFrameError:	
  1142                           ; 1 bytes @ 0x0
  1143                           
  1144  0070                     ?_SendReadByteFrame:	
  1145                           ; 1 bytes @ 0x0
  1146                           
  1147  0070                     ?_SendBytesFrame:	
  1148                           ; 1 bytes @ 0x0
  1149                           
  1150  0070                     ?_SendPresetFrame:	
  1151                           ; 1 bytes @ 0x0
  1152                           
  1153  0070                     ?_DecodeSerial:	
  1154                           ; 1 bytes @ 0x0
  1155                           
  1156  0070                     ?_ReadHoldingRegister:	
  1157                           ; 1 bytes @ 0x0
  1158                           
  1159  0070                     ?_MultipleRegister:	
  1160                           ; 1 bytes @ 0x0
  1161                           
  1162  0070                     ?_GetInputPin:	
  1163                           ; 1 bytes @ 0x0
  1164                           
  1165  0070                     ?_ReadCurrentRegister:	
  1166                           ; 1 bytes @ 0x0
  1167                           
  1168  0070                     ?_ReadInputStatus:	
  1169                           ; 1 bytes @ 0x0
  1170                           
  1171  0070                     ?_WriteAllCoils:	
  1172                           ; 1 bytes @ 0x0
  1173                           
  1174  0070                     ?_ForceSingleCoil:	
  1175                           ; 1 bytes @ 0x0
  1176                           
  1177  0070                     ?_PresetSingleRegister:	
  1178                           ; 1 bytes @ 0x0
  1179                           
  1180  0070                     ?_ExecuteCommand:	
  1181                           ; 1 bytes @ 0x0
  1182                           
  1183  0070                     ?_main:	
  1184                           ; 1 bytes @ 0x0
  1185                           
  1186                           
  1187                           ; 2 bytes @ 0x0
  1188  0070                     	ds	2
  1189  0072                     ?_eeprom_write:	
  1190  0072                     ?_SetTimeCaptureConfig:	
  1191                           ; 1 bytes @ 0x2
  1192                           
  1193  0072                     ??_eeprom_read:	
  1194                           ; 1 bytes @ 0x2
  1195                           
  1196  0072                     ??_InitTimeCapture:	
  1197                           ; 1 bytes @ 0x2
  1198                           
  1199  0072                     ??_DealWithError:	
  1200                           ; 1 bytes @ 0x2
  1201                           
  1202  0072                     ??_ScanNextIOPin:	
  1203                           ; 1 bytes @ 0x2
  1204                           
  1205  0072                     ??_ResetIOCycle:	
  1206                           ; 1 bytes @ 0x2
  1207                           
  1208  0072                     ??_ReadIOPin:	
  1209                           ; 1 bytes @ 0x2
  1210                           
  1211  0072                     ?_WriteIO:	
  1212                           ; 1 bytes @ 0x2
  1213                           
  1214  0072                     ?_SetIOChange:	
  1215                           ; 1 bytes @ 0x2
  1216                           
  1217  0072                     ??_SetAnalogConfig:	
  1218                           ; 1 bytes @ 0x2
  1219                           
  1220  0072                     ??_SetOutputConfig:	
  1221                           ; 1 bytes @ 0x2
  1222                           
  1223  0072                     ?_SetPullUp:	
  1224                           ; 1 bytes @ 0x2
  1225                           
  1226  0072                     ??_SetInputConfig:	
  1227                           ; 1 bytes @ 0x2
  1228                           
  1229  0072                     ??_putch:	
  1230                           ; 1 bytes @ 0x2
  1231                           
  1232  0072                     ??_RcvClear:	
  1233                           ; 1 bytes @ 0x2
  1234                           
  1235  0072                     ??_RcvIsDataIn:	
  1236                           ; 1 bytes @ 0x2
  1237                           
  1238  0072                     ??_RcvGetChar:	
  1239                           ; 1 bytes @ 0x2
  1240                           
  1241  0072                     ??_InitModbusPacket:	
  1242                           ; 1 bytes @ 0x2
  1243                           
  1244  0072                     ??_MultipleRegister:	
  1245                           ; 1 bytes @ 0x2
  1246                           
  1247  0072                     ??_GetInputPin:	
  1248                           ; 1 bytes @ 0x2
  1249                           
  1250  0072                     ?___bmul:	
  1251                           ; 1 bytes @ 0x2
  1252                           
  1253  0072                     ?_CRC16:	
  1254                           ; 1 bytes @ 0x2
  1255                           
  1256  0072                     ?_ReadA2D:	
  1257                           ; 2 bytes @ 0x2
  1258                           
  1259  0072                     CRC16@num:	
  1260                           ; 2 bytes @ 0x2
  1261                           
  1262  0072                     WriteIO@value:	
  1263                           ; 1 bytes @ 0x2
  1264                           
  1265  0072                     SetIOChange@value:	
  1266                           ; 1 bytes @ 0x2
  1267                           
  1268  0072                     SetPullUp@PullUp:	
  1269                           ; 1 bytes @ 0x2
  1270                           
  1271  0072                     eeprom_write@value:	
  1272                           ; 1 bytes @ 0x2
  1273                           
  1274  0072                     ___bmul@multiplicand:	
  1275                           ; 1 bytes @ 0x2
  1276                           
  1277  0072                     SetTimeCaptureConfig@detection:	
  1278                           ; 1 bytes @ 0x2
  1279                           
  1280                           
  1281                           ; 2 bytes @ 0x2
  1282  0072                     	ds	1
  1283  0073                     ??_eeprom_write:	
  1284  0073                     ??_WriteIO:	
  1285                           ; 1 bytes @ 0x3
  1286                           
  1287  0073                     ??_SetIOChange:	
  1288                           ; 1 bytes @ 0x3
  1289                           
  1290  0073                     ??_SetPullUp:	
  1291                           ; 1 bytes @ 0x3
  1292                           
  1293  0073                     ??___bmul:	
  1294                           ; 1 bytes @ 0x3
  1295                           
  1296  0073                     ScanNextIOPin@loop:	
  1297                           ; 1 bytes @ 0x3
  1298                           
  1299  0073                     ResetIOCycle@loop:	
  1300                           ; 1 bytes @ 0x3
  1301                           
  1302  0073                     ReadIOPin@_tempb:	
  1303                           ; 1 bytes @ 0x3
  1304                           
  1305  0073                     SetAnalogConfig@ioconfig:	
  1306                           ; 1 bytes @ 0x3
  1307                           
  1308  0073                     SetOutputConfig@ioconfig:	
  1309                           ; 1 bytes @ 0x3
  1310                           
  1311  0073                     SetInputConfig@_tmp:	
  1312                           ; 1 bytes @ 0x3
  1313                           
  1314  0073                     putch@char_out:	
  1315                           ; 1 bytes @ 0x3
  1316                           
  1317  0073                     RcvGetChar@temp:	
  1318                           ; 1 bytes @ 0x3
  1319                           
  1320  0073                     MultipleRegister@_Address:	
  1321                           ; 1 bytes @ 0x3
  1322                           
  1323  0073                     GetInputPin@_tmp:	
  1324                           ; 1 bytes @ 0x3
  1325                           
  1326                           
  1327                           ; 1 bytes @ 0x3
  1328  0073                     	ds	1
  1329  0074                     ??_SetTimeCaptureConfig:	
  1330  0074                     ??_CRC16:	
  1331                           ; 1 bytes @ 0x4
  1332                           
  1333  0074                     ??_ReadA2D:	
  1334                           ; 1 bytes @ 0x4
  1335                           
  1336  0074                     ReadIOPin@Pin:	
  1337                           ; 1 bytes @ 0x4
  1338                           
  1339  0074                     WriteIO@mask:	
  1340                           ; 1 bytes @ 0x4
  1341                           
  1342  0074                     SetIOChange@_temp:	
  1343                           ; 1 bytes @ 0x4
  1344                           
  1345  0074                     SetAnalogConfig@Pin:	
  1346                           ; 1 bytes @ 0x4
  1347                           
  1348  0074                     SetOutputConfig@_tmp:	
  1349                           ; 1 bytes @ 0x4
  1350                           
  1351  0074                     SetPullUp@Pin:	
  1352                           ; 1 bytes @ 0x4
  1353                           
  1354  0074                     SetInputConfig@_ntmp:	
  1355                           ; 1 bytes @ 0x4
  1356                           
  1357  0074                     putch@temp:	
  1358                           ; 1 bytes @ 0x4
  1359                           
  1360  0074                     GetInputPin@thePin:	
  1361                           ; 1 bytes @ 0x4
  1362                           
  1363  0074                     SetTimeCaptureConfig@Pin:	
  1364                           ; 1 bytes @ 0x4
  1365                           
  1366  0074                     ___bmul@product:	
  1367                           ; 1 bytes @ 0x4
  1368                           
  1369                           
  1370                           ; 1 bytes @ 0x4
  1371  0074                     	ds	1
  1372  0075                     ??_ReadVRef:	
  1373  0075                     ??_ReadTSensor:	
  1374                           ; 1 bytes @ 0x5
  1375                           
  1376  0075                     ?_ReadAllCoils:	
  1377                           ; 1 bytes @ 0x5
  1378                           
  1379  0075                     ReadIOPin@mask:	
  1380                           ; 2 bytes @ 0x5
  1381                           
  1382  0075                     WriteIO@nmask:	
  1383                           ; 1 bytes @ 0x5
  1384                           
  1385  0075                     SetIOChange@Pin:	
  1386                           ; 1 bytes @ 0x5
  1387                           
  1388  0075                     SetAnalogConfig@_tmp:	
  1389                           ; 1 bytes @ 0x5
  1390                           
  1391  0075                     SetOutputConfig@Pin:	
  1392                           ; 1 bytes @ 0x5
  1393                           
  1394  0075                     SetInputConfig@Pin:	
  1395                           ; 1 bytes @ 0x5
  1396                           
  1397  0075                     eeprom_read@addr:	
  1398                           ; 1 bytes @ 0x5
  1399                           
  1400  0075                     eeprom_write@addr:	
  1401                           ; 1 bytes @ 0x5
  1402                           
  1403  0075                     ___bmul@multiplier:	
  1404                           ; 1 bytes @ 0x5
  1405                           
  1406                           
  1407                           ; 1 bytes @ 0x5
  1408  0075                     	ds	1
  1409  0076                     ??_SaveSetting:	
  1410  0076                     ??_SetIOConfig:	
  1411                           ; 1 bytes @ 0x6
  1412                           
  1413  0076                     ??_SendModbusPacket:	
  1414                           ; 1 bytes @ 0x6
  1415                           
  1416  0076                     ??_DecodeSerial:	
  1417                           ; 1 bytes @ 0x6
  1418                           
  1419  0076                     DoIOCycle@SensorPt:	
  1420                           ; 1 bytes @ 0x6
  1421                           
  1422  0076                     WriteIO@Pin:	
  1423                           ; 1 bytes @ 0x6
  1424                           
  1425                           
  1426                           ; 1 bytes @ 0x6
  1427  0076                     	ds	1
  1428  0077                     ??_SendReadByteFrame:	
  1429  0077                     ??_SendReadFrame:	
  1430                           ; 1 bytes @ 0x7
  1431                           
  1432  0077                     ??_SendPresetFrame:	
  1433                           ; 1 bytes @ 0x7
  1434                           
  1435  0077                     ??_ReadInputStatus:	
  1436                           ; 1 bytes @ 0x7
  1437                           
  1438  0077                     ??_ExecuteCommand:	
  1439                           ; 1 bytes @ 0x7
  1440                           
  1441                           
  1442                           	psect	cstackCOMMONl
  1443  0079                     __pcstackCOMMONl:	
  1444                           ; 1 bytes @ 0x7
  1445                           
  1446  0079                     ?_eeprom_read:	
  1447  0079                     ?_InitTimeCapture:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0079                     SendReadByteFrame@value:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453                           
  1454                           ; 1 bytes @ 0x0
  1455  0079                     	ds	1
  1456                           
  1457                           	psect	cstackBANK0
  1458  004E                     __pcstackBANK0:	
  1459  004E                     ??_DoIOCycle:	
  1460  004E                     ??_ReadAllCoils:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  004E                     ?_SetSingleCoil:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  004E                     CRC16@addr:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  004E                     SaveSetting@pointer:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  004E                     SetIOConfig@ioconfig:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  004E                     ReadA2D@channel:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  004E                     SetSingleCoil@value:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481                           
  1482                           ; 1 bytes @ 0x0
  1483  004E                     	ds	1
  1484  004F                     ??_SetSingleCoil:	
  1485  004F                     CRC16@i:	
  1486                           ; 1 bytes @ 0x1
  1487                           
  1488  004F                     SaveSetting@idx:	
  1489                           ; 1 bytes @ 0x1
  1490                           
  1491  004F                     SetIOConfig@Pin:	
  1492                           ; 1 bytes @ 0x1
  1493                           
  1494  004F                     ReadA2D@value:	
  1495                           ; 1 bytes @ 0x1
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x1
  1499  004F                     	ds	1
  1500  0050                     SetSingleCoil@thePin:	
  1501  0050                     CRC16@crc:	
  1502                           ; 1 bytes @ 0x2
  1503                           
  1504  0050                     ReadAllCoils@stemp:	
  1505                           ; 2 bytes @ 0x2
  1506                           
  1507                           
  1508                           ; 2 bytes @ 0x2
  1509  0050                     	ds	1
  1510  0051                     ?_ReadIO:	
  1511  0051                     ?_ReadVRef:	
  1512                           ; 2 bytes @ 0x3
  1513                           
  1514  0051                     ?_ReadTSensor:	
  1515                           ; 2 bytes @ 0x3
  1516                           
  1517                           
  1518                           ; 2 bytes @ 0x3
  1519  0051                     	ds	1
  1520  0052                     SendModbusPacket@BufferSize:	
  1521  0052                     DecodeSerial@msg:	
  1522                           ; 1 bytes @ 0x4
  1523                           
  1524  0052                     ReadAllCoils@loop:	
  1525                           ; 1 bytes @ 0x4
  1526                           
  1527                           
  1528                           ; 1 bytes @ 0x4
  1529  0052                     	ds	1
  1530  0053                     ??_ReadIO:	
  1531  0053                     SendModbusPacket@CRC:	
  1532                           ; 1 bytes @ 0x5
  1533                           
  1534  0053                     DecodeSerial@CalcCRC:	
  1535                           ; 2 bytes @ 0x5
  1536                           
  1537                           
  1538                           ; 2 bytes @ 0x5
  1539  0053                     	ds	2
  1540  0055                     SendModbusPacket@loop:	
  1541  0055                     DecodeSerial@rcode:	
  1542                           ; 1 bytes @ 0x7
  1543                           
  1544  0055                     ReadIO@ioconfig:	
  1545                           ; 1 bytes @ 0x7
  1546                           
  1547                           
  1548                           ; 1 bytes @ 0x7
  1549  0055                     	ds	1
  1550  0056                     ??_SendFrameError:	
  1551  0056                     ?_SendReadFrame:	
  1552                           ; 1 bytes @ 0x8
  1553                           
  1554  0056                     ??_WriteAllCoils:	
  1555                           ; 1 bytes @ 0x8
  1556                           
  1557  0056                     ReadIO@Pin:	
  1558                           ; 1 bytes @ 0x8
  1559                           
  1560  0056                     SendReadFrame@value:	
  1561                           ; 1 bytes @ 0x8
  1562                           
  1563                           
  1564                           ; 2 bytes @ 0x8
  1565  0056                     	ds	1
  1566  0057                     SendFrameError@ErrorCode:	
  1567  0057                     WriteAllCoils@stemp:	
  1568                           ; 1 bytes @ 0x9
  1569                           
  1570                           
  1571                           ; 2 bytes @ 0x9
  1572  0057                     	ds	1
  1573  0058                     ??_SendBytesFrame:	
  1574  0058                     ??_ReadHoldingRegister:	
  1575                           ; 1 bytes @ 0xA
  1576                           
  1577  0058                     ??_ForceSingleCoil:	
  1578                           ; 1 bytes @ 0xA
  1579                           
  1580                           
  1581                           ; 1 bytes @ 0xA
  1582  0058                     	ds	1
  1583  0059                     WriteAllCoils@loop:	
  1584                           
  1585                           ; 1 bytes @ 0xB
  1586  0059                     	ds	1
  1587  005A                     ??_PresetSingleRegister:	
  1588  005A                     SendBytesFrame@loop:	
  1589                           ; 1 bytes @ 0xC
  1590                           
  1591  005A                     ReadHoldingRegister@Flag:	
  1592                           ; 1 bytes @ 0xC
  1593                           
  1594                           
  1595                           ; 1 bytes @ 0xC
  1596  005A                     	ds	1
  1597  005B                     SendBytesFrame@_temp:	
  1598  005B                     PresetSingleRegister@oldConfig:	
  1599                           ; 1 bytes @ 0xD
  1600                           
  1601  005B                     ReadHoldingRegister@temp:	
  1602                           ; 1 bytes @ 0xD
  1603                           
  1604                           
  1605                           ; 2 bytes @ 0xD
  1606  005B                     	ds	1
  1607  005C                     SendBytesFrame@_Address:	
  1608  005C                     PresetSingleRegister@temp:	
  1609                           ; 1 bytes @ 0xE
  1610                           
  1611                           
  1612                           ; 1 bytes @ 0xE
  1613  005C                     	ds	1
  1614  005D                     SendBytesFrame@NByte:	
  1615  005D                     ReadHoldingRegister@ctemp2:	
  1616                           ; 1 bytes @ 0xF
  1617                           
  1618                           
  1619                           ; 1 bytes @ 0xF
  1620  005D                     	ds	1
  1621  005E                     ??_ReadCurrentRegister:	
  1622  005E                     ReadHoldingRegister@ctemp3:	
  1623                           ; 1 bytes @ 0x10
  1624                           
  1625                           
  1626                           ; 1 bytes @ 0x10
  1627  005E                     	ds	1
  1628  005F                     ReadHoldingRegister@ctemp1:	
  1629                           
  1630                           ; 1 bytes @ 0x11
  1631  005F                     	ds	2
  1632  0061                     ReadCurrentRegister@temp:	
  1633                           
  1634                           ; 2 bytes @ 0x13
  1635  0061                     	ds	2
  1636  0063                     ReadCurrentRegister@IOn:	
  1637                           
  1638                           ; 1 bytes @ 0x15
  1639  0063                     	ds	1
  1640  0064                     ??_main:	
  1641                           
  1642                           ; 1 bytes @ 0x16
  1643  0064                     	ds	2
  1644  0066                     main@pointer:	
  1645                           
  1646                           ; 1 bytes @ 0x18
  1647  0066                     	ds	1
  1648  0067                     main@rcode:	
  1649                           
  1650                           ; 1 bytes @ 0x19
  1651  0067                     	ds	1
  1652  0068                     main@idx:	
  1653                           
  1654                           ; 1 bytes @ 0x1A
  1655  0068                     	ds	1
  1656  0069                     main@loop:	
  1657                           
  1658                           ; 1 bytes @ 0x1B
  1659  0069                     	ds	1
  1660                           
  1661                           	psect	maintext
  1662  0172                     __pmaintext:	
  1663 ;;
  1664 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1665 ;;
  1666 ;; *************** function _main *****************
  1667 ;; Defined at:
  1668 ;;		line 1629 in file "main.c"
  1669 ;; Parameters:    Size  Location     Type
  1670 ;;		None
  1671 ;; Auto vars:     Size  Location     Type
  1672 ;;  loop            1   27[BANK0 ] unsigned char 
  1673 ;;  idx             1   26[BANK0 ] unsigned char 
  1674 ;;  rcode           1   25[BANK0 ] unsigned char 
  1675 ;;  pointer         1   24[BANK0 ] PTR unsigned char 
  1676 ;;		 -> Setting(11), 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2  680[None  ] int 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : B1F/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  1686 ;;      Params:         0       0       0       0       0       0       0
  1687 ;;      Locals:         0       4       0       0       0       0       0
  1688 ;;      Temps:          0       2       0       0       0       0       0
  1689 ;;      Totals:         0       6       0       0       0       0       0
  1690 ;;Total ram usage:        6 bytes
  1691 ;; Hardware stack levels required when called:    7
  1692 ;; This function calls:
  1693 ;;		_DecodeSerial
  1694 ;;		_DoIOCycle
  1695 ;;		_ExecuteCommand
  1696 ;;		_InitTimeCapture
  1697 ;;		_RcvClear
  1698 ;;		_RcvGetChar
  1699 ;;		_RcvIsDataIn
  1700 ;;		_ResetIOCycle
  1701 ;;		_SetIOConfig
  1702 ;;		_eeprom_read
  1703 ;; This function is called by:
  1704 ;;		Startup code after reset
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           
  1709                           ;psect for function _main
  1710  0172                     _main:	
  1711                           
  1712                           ;main.c: 1630: unsigned char loop;
  1713                           ;main.c: 1631: unsigned char rcode;
  1714                           ;main.c: 1643: OPTION_REG = 0b00000010;
  1715                           
  1716                           ;incstack = 0
  1717                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1718  0172  3002               	movlw	2
  1719  0173  0021               	movlb	1	; select bank1
  1720  0174  0095               	movwf	21	;volatile
  1721                           
  1722                           ;main.c: 1646: ANSELA = 0;
  1723  0175  0023               	movlb	3	; select bank3
  1724  0176  018C               	clrf	12	;volatile
  1725                           
  1726                           ;main.c: 1647: ANSELB =0;
  1727  0177  018D               	clrf	13	;volatile
  1728                           
  1729                           ;main.c: 1648: PORTA = 0b00100000;
  1730  0178  3020               	movlw	32
  1731  0179  0020               	movlb	0	; select bank0
  1732  017A  008C               	movwf	12	;volatile
  1733                           
  1734                           ;main.c: 1649: WPUA = 0b00111111;
  1735  017B  303F               	movlw	63
  1736  017C  0024               	movlb	4	; select bank4
  1737  017D  008C               	movwf	12	;volatile
  1738                           
  1739                           ;main.c: 1654: INTCON = 0b00000000;
  1740  017E  018B               	clrf	11	;volatile
  1741                           
  1742                           ;main.c: 1658: WDTCON = 0b00011101;
  1743  017F  301D               	movlw	29
  1744  0180  0021               	movlb	1	; select bank1
  1745  0181  0097               	movwf	23	;volatile
  1746                           
  1747                           ;main.c: 1659: ForceReset=0;
  1748  0182  0020               	movlb	0	; select bank0
  1749  0183  106A               	bcf	_ForceReset/(0+8),_ForceReset& (0+7)
  1750  0184  0064               	clrwdt	;# 
  1751                           
  1752                           ;main.c: 1668: unsigned char idx;
  1753                           ;main.c: 1669: unsigned char * pointer = (unsigned char *) &Setting;
  1754  0185  30D6               	movlw	(low (_Setting| 0))& (0+255)
  1755  0186  0020               	movlb	0	; select bank0
  1756  0187  00E4               	movwf	??_main
  1757  0188  0864               	movf	??_main,w
  1758  0189  00E6               	movwf	main@pointer
  1759                           
  1760                           ;main.c: 1671: for(idx=0; idx < sizeof(Setting);idx++)
  1761  018A  01E8               	clrf	main@idx
  1762  018B  300B               	movlw	11
  1763  018C  0268               	subwf	main@idx,w
  1764  018D  1803               	btfsc	3,0
  1765  018E  29A6               	goto	l4279
  1766  018F                     l4271:	
  1767                           
  1768                           ;main.c: 1672: *(pointer++) = eeprom_read(idx);
  1769  018F  0868               	movf	main@idx,w
  1770  0190  318D  25EC  3181   	fcall	_eeprom_read
  1771  0193  0020               	movlb	0	; select bank0
  1772  0194  00E4               	movwf	??_main
  1773  0195  0866               	movf	main@pointer,w
  1774  0196  0086               	movwf	6
  1775  0197  0187               	clrf	7
  1776  0198  0864               	movf	??_main,w
  1777  0199  0081               	movwf	1
  1778  019A  3001               	movlw	1
  1779  019B  00E4               	movwf	??_main
  1780  019C  0864               	movf	??_main,w
  1781  019D  07E6               	addwf	main@pointer,f
  1782  019E  3001               	movlw	1
  1783  019F  00E4               	movwf	??_main
  1784  01A0  0864               	movf	??_main,w
  1785  01A1  07E8               	addwf	main@idx,f
  1786  01A2  300B               	movlw	11
  1787  01A3  0268               	subwf	main@idx,w
  1788  01A4  1C03               	skipc
  1789  01A5  298F               	goto	l4271
  1790  01A6                     l4279:	
  1791                           
  1792                           ;main.c: 1675: TRISA = 0b00111111;
  1793  01A6  303F               	movlw	63
  1794  01A7  0021               	movlb	1	; select bank1
  1795  01A8  008C               	movwf	12	;volatile
  1796                           
  1797                           ;main.c: 1676: TRISB = 0b11011110;
  1798  01A9  30DE               	movlw	222
  1799  01AA  008D               	movwf	13	;volatile
  1800                           
  1801                           ;main.c: 1677: RB0=0;
  1802  01AB  0020               	movlb	0	; select bank0
  1803  01AC  100D               	bcf	13,0	;volatile
  1804                           
  1805                           ;main.c: 1682: APFCON0 = 0b10000000;
  1806  01AD  3080               	movlw	128
  1807  01AE  0022               	movlb	2	; select bank2
  1808  01AF  009D               	movwf	29	;volatile
  1809                           
  1810                           ;main.c: 1683: APFCON1 = 0b00000001;
  1811  01B0  3001               	movlw	1
  1812  01B1  009E               	movwf	30	;volatile
  1813                           
  1814                           ;main.c: 1686: TXSTA = 0b10000010;
  1815  01B2  3082               	movlw	130
  1816  01B3  0023               	movlb	3	; select bank3
  1817  01B4  009E               	movwf	30	;volatile
  1818                           
  1819                           ;main.c: 1687: RCSTA = 0;
  1820  01B5  019D               	clrf	29	;volatile
  1821                           
  1822                           ;main.c: 1722: BRGH =1;
  1823  01B6  151E               	bsf	30,2	;volatile
  1824                           
  1825                           ;main.c: 1723: BRG16 = 1;
  1826  01B7  159F               	bsf	31,3	;volatile
  1827                           
  1828                           ;main.c: 1724: SYNC =0;
  1829  01B8  121E               	bcf	30,4	;volatile
  1830                           
  1831                           ;main.c: 1727: SPBRGL = 138;
  1832  01B9  308A               	movlw	138
  1833  01BA  009B               	movwf	27	;volatile
  1834                           
  1835                           ;main.c: 1728: SPBRGH =0;
  1836  01BB  019C               	clrf	28	;volatile
  1837                           
  1838                           ;main.c: 1733: TXEN =1;
  1839  01BC  169E               	bsf	30,5	;volatile
  1840                           
  1841                           ;main.c: 1734: SPEN = 1;
  1842  01BD  179D               	bsf	29,7	;volatile
  1843                           
  1844                           ;main.c: 1735: CREN = 1;
  1845  01BE  161D               	bsf	29,4	;volatile
  1846                           
  1847                           ;main.c: 1736: TXIE =0;
  1848  01BF  0021               	movlb	1	; select bank1
  1849  01C0  1211               	bcf	17,4	;volatile
  1850                           
  1851                           ;main.c: 1737: RCIF =0;
  1852  01C1  0020               	movlb	0	; select bank0
  1853  01C2  1291               	bcf	17,5	;volatile
  1854                           
  1855                           ;main.c: 1738: TXIF = 0;
  1856  01C3  1211               	bcf	17,4	;volatile
  1857                           
  1858                           ;main.c: 1739: SCKP = 0;
  1859  01C4  0023               	movlb	3	; select bank3
  1860  01C5  121F               	bcf	31,4	;volatile
  1861                           
  1862                           ;main.c: 1740: ABDEN = 0;
  1863  01C6  101F               	bcf	31,0	;volatile
  1864                           
  1865                           ;main.c: 1742: InFiFo=0;
  1866  01C7  0020               	movlb	0	; select bank0
  1867  01C8  01C0               	clrf	_InFiFo	;volatile
  1868                           
  1869                           ;main.c: 1743: OutFiFo=0;
  1870  01C9  01F8               	clrf	_OutFiFo	;volatile
  1871                           
  1872                           ;main.c: 1744: RcvInFiFo=0;
  1873  01CA  01BF               	clrf	_RcvInFiFo	;volatile
  1874                           
  1875                           ;main.c: 1745: RcvOutFiFo=0;
  1876  01CB  01BE               	clrf	_RcvOutFiFo	;volatile
  1877                           
  1878                           ;main.c: 1748: GIE = 1;
  1879  01CC  178B               	bsf	11,7	;volatile
  1880                           
  1881                           ;main.c: 1749: PEIE =1;
  1882  01CD  170B               	bsf	11,6	;volatile
  1883                           
  1884                           ;main.c: 1750: RCIE =1;
  1885  01CE  0021               	movlb	1	; select bank1
  1886  01CF  1691               	bsf	17,5	;volatile
  1887                           
  1888                           ;main.c: 1751: IOCBP =0;
  1889  01D0  0027               	movlb	7	; select bank7
  1890  01D1  0194               	clrf	20	;volatile
  1891                           
  1892                           ;main.c: 1752: IOCBN = 0;
  1893  01D2  0195               	clrf	21	;volatile
  1894                           
  1895                           ;main.c: 1753: IOCBF = 0;
  1896  01D3  0196               	clrf	22	;volatile
  1897                           
  1898                           ;main.c: 1754: IOCIE = 1;
  1899  01D4  158B               	bsf	11,3	;volatile
  1900                           
  1901                           ;main.c: 1757: IOCounterFlag.Byte=DHTFlag=0;
  1902  01D5  0020               	movlb	0	; select bank0
  1903  01D6  01F0               	clrf	112	;volatile
  1904  01D7  01F1               	clrf	113	;volatile
  1905                           
  1906                           ;main.c: 1759: ModbusOnTransmit=0;
  1907  01D8  116A               	bcf	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  1908                           
  1909                           ;main.c: 1768: T2CON= 0b00000111;
  1910  01D9  3007               	movlw	7
  1911  01DA  009C               	movwf	28	;volatile
  1912                           
  1913                           ;main.c: 1769: PR2=125;
  1914  01DB  307D               	movlw	125
  1915  01DC  009B               	movwf	27	;volatile
  1916                           
  1917                           ;main.c: 1770: TMR2=0;
  1918  01DD  019A               	clrf	26	;volatile
  1919                           
  1920                           ;main.c: 1772: TMR2IF=0;
  1921  01DE  1091               	bcf	17,1	;volatile
  1922                           
  1923                           ;main.c: 1773: PrimaryTimerms=100;
  1924  01DF  3064               	movlw	100
  1925  01E0  00A8               	movwf	_PrimaryTimerms	;volatile
  1926  01E1  3000               	movlw	0
  1927  01E2  00A9               	movwf	_PrimaryTimerms+1	;volatile
  1928                           
  1929                           ;main.c: 1774: TimerDeciSec=10;
  1930  01E3  300A               	movlw	10
  1931  01E4  00E4               	movwf	??_main
  1932  01E5  0864               	movf	??_main,w
  1933  01E6  00C1               	movwf	_TimerDeciSec	;volatile
  1934                           
  1935                           ;main.c: 1775: TMR2IE=1;
  1936  01E7  0021               	movlb	1	; select bank1
  1937  01E8  1491               	bsf	17,1	;volatile
  1938                           
  1939                           ;main.c: 1776: PEIE = 1;
  1940  01E9  170B               	bsf	11,6	;volatile
  1941                           
  1942                           ;main.c: 1777: GIE=1;
  1943  01EA  178B               	bsf	11,7	;volatile
  1944                           
  1945                           ;main.c: 1782: ADCON1 = 0b11100011;
  1946  01EB  30E3               	movlw	227
  1947  01EC  009E               	movwf	30	;volatile
  1948                           
  1949                           ;main.c: 1783: ADCON0= 0b00000001;
  1950  01ED  3001               	movlw	1
  1951  01EE  009D               	movwf	29	;volatile
  1952                           
  1953                           ;main.c: 1784: ANSELA = 0b0000000;
  1954  01EF  0023               	movlb	3	; select bank3
  1955  01F0  018C               	clrf	12	;volatile
  1956                           
  1957                           ;main.c: 1785: ANSELB = 0b0000000;
  1958  01F1  018D               	clrf	13	;volatile
  1959                           
  1960                           ;main.c: 1786: ADIE=0;
  1961  01F2  0021               	movlb	1	; select bank1
  1962  01F3  1311               	bcf	17,6	;volatile
  1963                           
  1964                           ;main.c: 1787: ADIF=0;
  1965  01F4  0020               	movlb	0	; select bank0
  1966  01F5  1311               	bcf	17,6	;volatile
  1967                           
  1968                           ;main.c: 1788: FVRCON=0b11000010;
  1969  01F6  30C2               	movlw	194
  1970  01F7  0022               	movlb	2	; select bank2
  1971  01F8  0097               	movwf	23	;volatile
  1972                           
  1973                           ;main.c: 1792: for(loop=0;loop<10;loop++)
  1974  01F9  0020               	movlb	0	; select bank0
  1975  01FA  01E9               	clrf	main@loop
  1976  01FB  300A               	movlw	10
  1977  01FC  0269               	subwf	main@loop,w
  1978  01FD  1803               	btfsc	3,0
  1979  01FE  2A0D               	goto	l684
  1980  01FF                     l683:	
  1981                           
  1982                           ;main.c: 1793: {
  1983                           ;main.c: 1794: EnableConfigChange=1;
  1984  01FF  14EA               	bsf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  1985                           
  1986                           ;main.c: 1795: SetIOConfig(loop);
  1987  0200  0869               	movf	main@loop,w
  1988  0201  3182  229E  3181   	fcall	_SetIOConfig
  1989  0204  3001               	movlw	1
  1990  0205  0020               	movlb	0	; select bank0
  1991  0206  00E4               	movwf	??_main
  1992  0207  0864               	movf	??_main,w
  1993  0208  07E9               	addwf	main@loop,f
  1994  0209  300A               	movlw	10
  1995  020A  0269               	subwf	main@loop,w
  1996  020B  1C03               	skipc
  1997  020C  29FF               	goto	l683
  1998  020D                     l684:	
  1999                           
  2000                           ;main.c: 1796: }
  2001                           ;main.c: 1797: EnableConfigChange=0;
  2002  020D  10EA               	bcf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  2003                           
  2004                           ;main.c: 1800: T4CON = 0b00000111;
  2005  020E  3007               	movlw	7
  2006  020F  0028               	movlb	8	; select bank8
  2007  0210  0097               	movwf	23	;volatile
  2008                           
  2009                           ;main.c: 1801: CCPTMRS= 0b01010101;
  2010  0211  3055               	movlw	85
  2011  0212  0025               	movlb	5	; select bank5
  2012  0213  009E               	movwf	30	;volatile
  2013                           
  2014                           ;main.c: 1802: PR4=0xff;
  2015  0214  30FF               	movlw	255
  2016  0215  0028               	movlb	8	; select bank8
  2017  0216  0096               	movwf	22	;volatile
  2018                           
  2019                           ;main.c: 1803: TMR4=0;
  2020  0217  0195               	clrf	21	;volatile
  2021                           
  2022                           ;main.c: 1804: TMR4IE=0;
  2023  0218  0021               	movlb	1	; select bank1
  2024  0219  1093               	bcf	19,1	;volatile
  2025                           
  2026                           ;main.c: 1805: TMR4IF=0;
  2027  021A  0020               	movlb	0	; select bank0
  2028  021B  1093               	bcf	19,1	;volatile
  2029                           
  2030                           ;main.c: 1808: RcvClear();
  2031  021C  318C  24F9  3181   	fcall	_RcvClear
  2032                           
  2033                           ;main.c: 1809: ModbusFramePointer=0;
  2034  021F  0020               	movlb	0	; select bank0
  2035  0220  01B9               	clrf	_ModbusFramePointer
  2036                           
  2037                           ;main.c: 1811: _delay((unsigned long)((5000)*(32000000/4000.0)));
  2038  0221  30CB               	movlw	203
  2039  0222  0020               	movlb	0	; select bank0
  2040  0223  00E5               	movwf	??_main+1
  2041  0224  30EC               	movlw	236
  2042  0225  00E4               	movwf	??_main
  2043  0226  3084               	movlw	132
  2044  0227                     u4617:	
  2045  0227  0B89               	decfsz	9,f
  2046  0228  2A27               	goto	u4617
  2047  0229  0BE4               	decfsz	??_main,f
  2048  022A  2A27               	goto	u4617
  2049  022B  0BE5               	decfsz	??_main+1,f
  2050  022C  2A27               	goto	u4617
  2051  022D  0000               	nop
  2052                           
  2053                           ;main.c: 1814: ResetIOCycle();
  2054  022E  318D  2585  3181   	fcall	_ResetIOCycle
  2055                           
  2056                           ;main.c: 1816: InitTimeCapture();
  2057  0231  3187  27D2  3181   	fcall	_InitTimeCapture
  2058  0234                     l4373:	
  2059                           ;main.c: 1819: while(1)
  2060                           
  2061                           
  2062                           ;main.c: 1820: {
  2063                           ;main.c: 1822: if(!ForceReset)
  2064  0234  0020               	movlb	0	; select bank0
  2065  0235  1C6A               	btfss	_ForceReset/(0+8),_ForceReset& (0+7)
  2066  0236  0064               	clrwdt	;# 
  2067                           
  2068                           ;main.c: 1827: }
  2069                           ;main.c: 1830: if(!ModbusOnTransmit)
  2070  0237  0020               	movlb	0	; select bank0
  2071  0238  1D6A               	btfss	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  2072                           
  2073                           ;main.c: 1831: RB0=0;
  2074  0239  100D               	bcf	13,0	;volatile
  2075                           
  2076                           ;main.c: 1832: if(ModbusOnTransmit)
  2077  023A  1D6A               	btfss	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  2078  023B  2A4A               	goto	l4387
  2079                           
  2080                           ;main.c: 1833: {
  2081                           ;main.c: 1834: if(!TXIE)
  2082  023C  0021               	movlb	1	; select bank1
  2083  023D  1A11               	btfsc	17,4	;volatile
  2084  023E  2A9A               	goto	l4421
  2085                           
  2086                           ;main.c: 1835: {
  2087                           ;main.c: 1839: _delay((unsigned long)((200)*(32000000/4000000.0)));
  2088  023F  30E4               	movlw	228
  2089  0240                     u4627:	
  2090  0240  3200               	nop2
  2091  0241  3200               	nop2
  2092  0242  0B89               	decfsz	9,f
  2093  0243  2A40               	goto	u4627
  2094  0244  3200               	nop2
  2095  0245  3200               	nop2
  2096                           
  2097                           ;main.c: 1841: RB0=0;
  2098  0246  0020               	movlb	0	; select bank0
  2099  0247  100D               	bcf	13,0	;volatile
  2100                           
  2101                           ;main.c: 1842: ModbusOnTransmit=0;
  2102  0248  116A               	bcf	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  2103                           
  2104                           ;main.c: 1843: }
  2105                           ;main.c: 1844: }
  2106  0249  2A9A               	goto	l4421
  2107  024A                     l4387:	
  2108                           
  2109                           ;main.c: 1845: else
  2110                           ;main.c: 1846: if(RcvIsDataIn())
  2111  024A  318D  250D  3181   	fcall	_RcvIsDataIn
  2112  024D  3A00               	xorlw	0
  2113  024E  1903               	skipnz
  2114  024F  2A9A               	goto	l4421
  2115                           
  2116                           ;main.c: 1847: {
  2117                           ;main.c: 1849: ModbusBuffer[ModbusFramePointer++]=RcvGetChar();
  2118  0250  318E  2604  3181   	fcall	_RcvGetChar
  2119  0253  0020               	movlb	0	; select bank0
  2120  0254  00E4               	movwf	??_main
  2121  0255  0839               	movf	_ModbusFramePointer,w
  2122  0256  3EE1               	addlw	(low (_ModbusBuffer| 0))& (0+255)
  2123  0257  0086               	movwf	6
  2124  0258  0187               	clrf	7
  2125  0259  0864               	movf	??_main,w
  2126  025A  0081               	movwf	1
  2127  025B  3001               	movlw	1
  2128  025C  00E4               	movwf	??_main
  2129  025D  0864               	movf	??_main,w
  2130  025E  07B9               	addwf	_ModbusFramePointer,f
  2131                           
  2132                           ;main.c: 1850: if(ModbusFramePointer>=8)
  2133  025F  3008               	movlw	8
  2134  0260  0239               	subwf	_ModbusFramePointer,w
  2135  0261  1C03               	skipc
  2136  0262  2A9A               	goto	l4421
  2137                           
  2138                           ;main.c: 1851: {
  2139                           ;main.c: 1852: ModbusFramePointer=8;
  2140  0263  3008               	movlw	8
  2141  0264  00E4               	movwf	??_main
  2142  0265  0864               	movf	??_main,w
  2143  0266  00B9               	movwf	_ModbusFramePointer
  2144                           
  2145                           ;main.c: 1853: rcode = DecodeSerial(ModbusBuffer);
  2146  0267  30E1               	movlw	(low (_ModbusBuffer| 0))& (0+255)
  2147  0268  3186  26F7  3181   	fcall	_DecodeSerial
  2148  026B  0020               	movlb	0	; select bank0
  2149  026C  00E4               	movwf	??_main
  2150  026D  0864               	movf	??_main,w
  2151  026E  00E7               	movwf	main@rcode
  2152                           
  2153                           ;main.c: 1854: if(rcode==1)
  2154  026F  0367               	decf	main@rcode,w
  2155  0270  1D03               	btfss	3,2
  2156  0271  2A77               	goto	l4405
  2157                           
  2158                           ;main.c: 1855: {
  2159                           ;main.c: 1856: ExecuteCommand();
  2160  0272  3185  25FB  3181   	fcall	_ExecuteCommand
  2161                           
  2162                           ;main.c: 1857: ModbusFramePointer=0;
  2163  0275  0020               	movlb	0	; select bank0
  2164  0276  2A7B               	goto	l4407
  2165  0277                     l4405:	
  2166                           ;main.c: 1858: }
  2167                           
  2168                           
  2169                           ;main.c: 1859: else if(rcode ==2)
  2170  0277  3002               	movlw	2
  2171  0278  0667               	xorwf	main@rcode,w
  2172  0279  1D03               	btfss	3,2
  2173  027A  2A7D               	goto	l695
  2174  027B                     l4407:	
  2175                           
  2176                           ;main.c: 1860: {
  2177                           ;main.c: 1862: ModbusFramePointer=0;
  2178  027B  01B9               	clrf	_ModbusFramePointer
  2179                           
  2180                           ;main.c: 1863: }
  2181  027C  2A9A               	goto	l4421
  2182  027D                     l695:	
  2183                           
  2184                           ;main.c: 1864: else
  2185                           ;main.c: 1865: {
  2186                           ;main.c: 1867: for(loop=1;loop<8;loop++)
  2187  027D  01E9               	clrf	main@loop
  2188  027E  0AE9               	incf	main@loop,f
  2189  027F  3008               	movlw	8
  2190  0280  0269               	subwf	main@loop,w
  2191  0281  1803               	btfsc	3,0
  2192  0282  2A98               	goto	l4419
  2193  0283                     l4413:	
  2194                           
  2195                           ;main.c: 1868: ModbusBuffer[loop-1U]=ModbusBuffer[loop];
  2196  0283  0869               	movf	main@loop,w
  2197  0284  3EE1               	addlw	(low (_ModbusBuffer| 0))& (0+255)
  2198  0285  0086               	movwf	6
  2199  0286  0187               	clrf	7
  2200  0287  0801               	movf	1,w
  2201  0288  00E4               	movwf	??_main
  2202  0289  0869               	movf	main@loop,w
  2203  028A  3EFF               	addlw	255
  2204  028B  3EE1               	addlw	(low (_ModbusBuffer| 0))& (0+255)
  2205  028C  0086               	movwf	6
  2206  028D  0187               	clrf	7
  2207  028E  0864               	movf	??_main,w
  2208  028F  0081               	movwf	1
  2209  0290  3001               	movlw	1
  2210  0291  00E4               	movwf	??_main
  2211  0292  0864               	movf	??_main,w
  2212  0293  07E9               	addwf	main@loop,f
  2213  0294  3008               	movlw	8
  2214  0295  0269               	subwf	main@loop,w
  2215  0296  1C03               	skipc
  2216  0297  2A83               	goto	l4413
  2217  0298                     l4419:	
  2218                           
  2219                           ;main.c: 1869: ModbusFramePointer--;
  2220  0298  3001               	movlw	1
  2221  0299  02B9               	subwf	_ModbusFramePointer,f
  2222  029A                     l4421:	
  2223                           
  2224                           ;main.c: 1870: }
  2225                           ;main.c: 1871: }
  2226                           ;main.c: 1872: }
  2227                           ;main.c: 1874: DoIOCycle();
  2228  029A  3187  2769  3181   	fcall	_DoIOCycle
  2229  029D  2A34               	goto	l4373
  2230  029E                     __end_of_main:	
  2231                           
  2232                           	psect	text1
  2233  0DEC                     __ptext1:	
  2234 ;; *************** function _eeprom_read *****************
  2235 ;; Defined at:
  2236 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eeread.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;  addr            1    wreg     unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  addr            1    5[COMMON] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      unsigned char 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2250 ;;      Params:         0       0       0       0       0       0       0
  2251 ;;      Locals:         1       0       0       0       0       0       0
  2252 ;;      Temps:          3       0       0       0       0       0       0
  2253 ;;      Totals:         4       0       0       0       0       0       0
  2254 ;;Total ram usage:        4 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    1
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263                           
  2264                           
  2265                           ;psect for function _eeprom_read
  2266  0DEC                     _eeprom_read:	
  2267                           
  2268                           ;incstack = 0
  2269                           ; Regs used in _eeprom_read: [wreg+status,2+status,0]
  2270                           ;eeprom_read@addr stored from wreg
  2271  0DEC  00F5               	movwf	eeprom_read@addr
  2272  0DED                     l793:	
  2273  0DED  0064               	clrwdt	;# 
  2274  0DEE  0023               	movlb	3	; select bank3
  2275  0DEF  1895               	btfsc	21,1	;volsfr
  2276  0DF0  2DED               	goto	l793
  2277  0DF1  0875               	movf	eeprom_read@addr,w
  2278  0DF2  00F2               	movwf	??_eeprom_read
  2279  0DF3  01F3               	clrf	??_eeprom_read+1
  2280  0DF4  0872               	movf	??_eeprom_read,w
  2281  0DF5  0091               	movwf	17	;volatile
  2282  0DF6  0873               	movf	??_eeprom_read+1,w
  2283  0DF7  0092               	movwf	18	;volatile
  2284  0DF8  303F               	movlw	63
  2285  0DF9  00F4               	movwf	??_eeprom_read+2
  2286  0DFA  0874               	movf	??_eeprom_read+2,w
  2287  0DFB  0595               	andwf	21,f	;volsfr
  2288  0DFC  1415               	bsf	21,0	;volsfr
  2289  0DFD  1003               	clrc
  2290  0DFE  1815               	btfsc	21,0	;volsfr
  2291  0DFF  1403               	setc
  2292  0E00  3000               	movlw	0
  2293  0E01  3D09               	addwfc	9,w
  2294  0E02  0813               	movf	19,w	;volatile
  2295  0E03  0008               	return
  2296  0E04                     __end_of_eeprom_read:	
  2297                           
  2298                           	psect	text2
  2299  0E04                     __ptext2:	
  2300 ;; *************** function _RcvGetChar *****************
  2301 ;; Defined at:
  2302 ;;		line 869 in file "main.c"
  2303 ;; Parameters:    Size  Location     Type
  2304 ;;		None
  2305 ;; Auto vars:     Size  Location     Type
  2306 ;;  temp            1    3[COMMON] unsigned char 
  2307 ;; Return value:  Size  Location     Type
  2308 ;;                  1    wreg      unsigned char 
  2309 ;; Registers used:
  2310 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2311 ;; Tracked objects:
  2312 ;;		On entry : 0/0
  2313 ;;		On exit  : 0/0
  2314 ;;		Unchanged: 0/0
  2315 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2316 ;;      Params:         0       0       0       0       0       0       0
  2317 ;;      Locals:         1       0       0       0       0       0       0
  2318 ;;      Temps:          1       0       0       0       0       0       0
  2319 ;;      Totals:         2       0       0       0       0       0       0
  2320 ;;Total ram usage:        2 bytes
  2321 ;; Hardware stack levels used:    1
  2322 ;; Hardware stack levels required when called:    2
  2323 ;; This function calls:
  2324 ;;		_RcvIsDataIn
  2325 ;; This function is called by:
  2326 ;;		_main
  2327 ;; This function uses a non-reentrant model
  2328 ;;
  2329                           
  2330                           
  2331                           ;psect for function _RcvGetChar
  2332  0E04                     _RcvGetChar:	
  2333  0E04                     l3191:	
  2334                           ;main.c: 871: char temp;
  2335                           ;main.c: 874: while(!RcvIsDataIn());
  2336                           
  2337                           ;incstack = 0
  2338                           ; Regs used in _RcvGetChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2339                           
  2340  0E04  318D  250D  318E   	fcall	_RcvIsDataIn
  2341  0E07  3A00               	xorlw	0
  2342  0E08  1903               	skipnz
  2343  0E09  2E04               	goto	l3191
  2344                           
  2345                           ;main.c: 877: temp = RcvSerialBuffer[RcvOutFiFo];
  2346  0E0A  0020               	movlb	0	; select bank0
  2347  0E0B  083E               	movf	_RcvOutFiFo,w
  2348  0E0C  3E20               	addlw	(low (_RcvSerialBuffer| (0+256)))& (0+255)
  2349  0E0D  0086               	movwf	6
  2350  0E0E  3001               	movlw	1	; select bank2/3
  2351  0E0F  0087               	movwf	7
  2352  0E10  0801               	movf	1,w
  2353  0E11  00F2               	movwf	??_RcvGetChar
  2354  0E12  0872               	movf	??_RcvGetChar,w
  2355  0E13  00F3               	movwf	RcvGetChar@temp
  2356                           
  2357                           ;main.c: 878: RcvOutFiFo++;
  2358  0E14  3001               	movlw	1
  2359  0E15  00F2               	movwf	??_RcvGetChar
  2360  0E16  0872               	movf	??_RcvGetChar,w
  2361  0E17  07BE               	addwf	_RcvOutFiFo,f	;volatile
  2362                           
  2363                           ;main.c: 879: if(RcvOutFiFo >= 32)
  2364  0E18  3020               	movlw	32
  2365  0E19  023E               	subwf	_RcvOutFiFo,w	;volatile
  2366  0E1A  1803               	btfsc	3,0
  2367                           
  2368                           ;main.c: 880: RcvOutFiFo=0;
  2369  0E1B  01BE               	clrf	_RcvOutFiFo	;volatile
  2370                           
  2371                           ;main.c: 882: return temp;
  2372  0E1C  0873               	movf	RcvGetChar@temp,w
  2373  0E1D  0008               	return
  2374  0E1E                     __end_of_RcvGetChar:	
  2375                           
  2376                           	psect	text3
  2377  0D0D                     __ptext3:	
  2378 ;; *************** function _RcvIsDataIn *****************
  2379 ;; Defined at:
  2380 ;;		line 864 in file "main.c"
  2381 ;; Parameters:    Size  Location     Type
  2382 ;;		None
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;		None
  2385 ;; Return value:  Size  Location     Type
  2386 ;;                  1    wreg      unsigned char 
  2387 ;; Registers used:
  2388 ;;		wreg
  2389 ;; Tracked objects:
  2390 ;;		On entry : 0/0
  2391 ;;		On exit  : 0/0
  2392 ;;		Unchanged: 0/0
  2393 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2394 ;;      Params:         0       0       0       0       0       0       0
  2395 ;;      Locals:         0       0       0       0       0       0       0
  2396 ;;      Temps:          0       0       0       0       0       0       0
  2397 ;;      Totals:         0       0       0       0       0       0       0
  2398 ;;Total ram usage:        0 bytes
  2399 ;; Hardware stack levels used:    1
  2400 ;; Hardware stack levels required when called:    1
  2401 ;; This function calls:
  2402 ;;		Nothing
  2403 ;; This function is called by:
  2404 ;;		_RcvGetChar
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           
  2410                           ;psect for function _RcvIsDataIn
  2411  0D0D                     _RcvIsDataIn:	
  2412                           
  2413                           ;main.c: 866: return (RcvInFiFo == RcvOutFiFo ? 0U : 1U);
  2414                           
  2415                           ;incstack = 0
  2416                           ; Regs used in _RcvIsDataIn: [wreg]
  2417  0D0D  0020               	movlb	0	; select bank0
  2418  0D0E  083F               	movf	_RcvInFiFo,w	;volatile
  2419  0D0F  063E               	xorwf	_RcvOutFiFo,w	;volatile
  2420  0D10  1903               	btfsc	3,2
  2421  0D11  2D14               	goto	u2480
  2422  0D12  3001               	movlw	1
  2423  0D13  0008               	return
  2424  0D14                     u2480:	
  2425  0D14  3000               	movlw	0
  2426  0D15  0008               	return
  2427  0D16                     __end_of_RcvIsDataIn:	
  2428                           
  2429                           	psect	text4
  2430  0CF9                     __ptext4:	
  2431 ;; *************** function _RcvClear *****************
  2432 ;; Defined at:
  2433 ;;		line 857 in file "main.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;		None
  2436 ;; Auto vars:     Size  Location     Type
  2437 ;;		None
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		status,2
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2447 ;;      Params:         0       0       0       0       0       0       0
  2448 ;;      Locals:         0       0       0       0       0       0       0
  2449 ;;      Temps:          0       0       0       0       0       0       0
  2450 ;;      Totals:         0       0       0       0       0       0       0
  2451 ;;Total ram usage:        0 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    1
  2454 ;; This function calls:
  2455 ;;		Nothing
  2456 ;; This function is called by:
  2457 ;;		_main
  2458 ;; This function uses a non-reentrant model
  2459 ;;
  2460                           
  2461                           
  2462                           ;psect for function _RcvClear
  2463  0CF9                     _RcvClear:	
  2464                           
  2465                           ;main.c: 859: GIE=0;
  2466                           
  2467                           ;incstack = 0
  2468                           ; Regs used in _RcvClear: [status,2]
  2469  0CF9  138B               	bcf	11,7	;volatile
  2470                           
  2471                           ;main.c: 860: RcvInFiFo=0;
  2472  0CFA  0020               	movlb	0	; select bank0
  2473  0CFB  01BF               	clrf	_RcvInFiFo	;volatile
  2474                           
  2475                           ;main.c: 861: RcvOutFiFo=0;
  2476  0CFC  01BE               	clrf	_RcvOutFiFo	;volatile
  2477                           
  2478                           ;main.c: 862: GIE=1;
  2479  0CFD  178B               	bsf	11,7	;volatile
  2480  0CFE  0008               	return
  2481  0CFF                     __end_of_RcvClear:	
  2482                           
  2483                           	psect	text5
  2484  07D2                     __ptext5:	
  2485 ;; *************** function _InitTimeCapture *****************
  2486 ;; Defined at:
  2487 ;;		line 27 in file "TimeCapture.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;		None
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, status,2
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2501 ;;      Params:         0       0       0       0       0       0       0
  2502 ;;      Locals:         0       0       0       0       0       0       0
  2503 ;;      Temps:          0       0       0       0       0       0       0
  2504 ;;      Totals:         0       0       0       0       0       0       0
  2505 ;;Total ram usage:        0 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    1
  2508 ;; This function calls:
  2509 ;;		Nothing
  2510 ;; This function is called by:
  2511 ;;		_main
  2512 ;; This function uses a non-reentrant model
  2513 ;;
  2514                           
  2515                           
  2516                           ;psect for function _InitTimeCapture
  2517  07D2                     _InitTimeCapture:	
  2518                           
  2519                           ;TimeCapture.c: 32: TimeCapture[0]=0;
  2520                           
  2521                           ;incstack = 0
  2522                           ; Regs used in _InitTimeCapture: [wreg+status,2]
  2523  07D2  3000               	movlw	0
  2524  07D3  0021               	movlb	1	; select bank1
  2525  07D4  00A3               	movwf	(_TimeCapture+3)^(0+128)	;volatile
  2526  07D5  3000               	movlw	0
  2527  07D6  00A2               	movwf	(_TimeCapture+2)^(0+128)	;volatile
  2528  07D7  3000               	movlw	0
  2529  07D8  00A1               	movwf	(_TimeCapture+1)^(0+128)	;volatile
  2530  07D9  3000               	movlw	0
  2531  07DA  00A0               	movwf	_TimeCapture^(0+128)	;volatile
  2532                           
  2533                           ;TimeCapture.c: 33: TimeCapture[1]=0;
  2534  07DB  3000               	movlw	0
  2535  07DC  00A7               	movwf	((_TimeCapture+3)^(0+128)+4)	;volatile
  2536  07DD  3000               	movlw	0
  2537  07DE  00A6               	movwf	((_TimeCapture+2)^(0+128)+4)	;volatile
  2538  07DF  3000               	movlw	0
  2539  07E0  00A5               	movwf	((_TimeCapture+1)^(0+128)+4)	;volatile
  2540  07E1  3000               	movlw	0
  2541  07E2  00A4               	movwf	(_TimeCapture^(0+128)+4)	;volatile
  2542                           
  2543                           ;TimeCapture.c: 34: TimeCapture[2]=0;
  2544  07E3  3000               	movlw	0
  2545  07E4  00AB               	movwf	((_TimeCapture+3)^(0+128)+8)	;volatile
  2546  07E5  3000               	movlw	0
  2547  07E6  00AA               	movwf	((_TimeCapture+2)^(0+128)+8)	;volatile
  2548  07E7  3000               	movlw	0
  2549  07E8  00A9               	movwf	((_TimeCapture+1)^(0+128)+8)	;volatile
  2550  07E9  3000               	movlw	0
  2551  07EA  00A8               	movwf	(_TimeCapture^(0+128)+8)	;volatile
  2552                           
  2553                           ;TimeCapture.c: 35: TimeCapture[3]=0;
  2554  07EB  3000               	movlw	0
  2555  07EC  00AF               	movwf	((_TimeCapture+3)^(0+128)+12)	;volatile
  2556  07ED  3000               	movlw	0
  2557  07EE  00AE               	movwf	((_TimeCapture+2)^(0+128)+12)	;volatile
  2558  07EF  3000               	movlw	0
  2559  07F0  00AD               	movwf	((_TimeCapture+1)^(0+128)+12)	;volatile
  2560  07F1  3000               	movlw	0
  2561  07F2  00AC               	movwf	(_TimeCapture^(0+128)+12)	;volatile
  2562                           
  2563                           ;TimeCapture.c: 37: TimerHiCount = 0;
  2564  07F3  0020               	movlb	0	; select bank0
  2565  07F4  01B2               	clrf	_TimerHiCount	;volatile
  2566  07F5  01B3               	clrf	_TimerHiCount+1	;volatile
  2567                           
  2568                           ;TimeCapture.c: 38: TMR1H = 0;
  2569  07F6  0197               	clrf	23	;volatile
  2570                           
  2571                           ;TimeCapture.c: 39: TMR1L = 0;
  2572  07F7  0196               	clrf	22	;volatile
  2573                           
  2574                           ;TimeCapture.c: 40: T1CON = 0b00000000;
  2575  07F8  0198               	clrf	24	;volatile
  2576                           
  2577                           ;TimeCapture.c: 42: TMR1GE=0;
  2578  07F9  1399               	bcf	25,7	;volatile
  2579                           
  2580                           ;TimeCapture.c: 43: TMR1IF=0;
  2581  07FA  1011               	bcf	17,0	;volatile
  2582                           
  2583                           ;TimeCapture.c: 44: TMR1IE=1;
  2584  07FB  0021               	movlb	1	; select bank1
  2585  07FC  1411               	bsf	17,0	;volatile
  2586                           
  2587                           ;TimeCapture.c: 45: TMR1ON=1;
  2588  07FD  0020               	movlb	0	; select bank0
  2589  07FE  1418               	bsf	24,0	;volatile
  2590  07FF  0008               	return
  2591  0800                     __end_of_InitTimeCapture:	
  2592                           ;TimeCapture.c: 47: return;
  2593                           
  2594                           
  2595                           	psect	text6
  2596  05FB                     __ptext6:	
  2597 ;; *************** function _ExecuteCommand *****************
  2598 ;; Defined at:
  2599 ;;		line 1597 in file "main.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2613 ;;      Params:         0       0       0       0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0
  2616 ;;      Totals:         0       0       0       0       0       0       0
  2617 ;;Total ram usage:        0 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    6
  2620 ;; This function calls:
  2621 ;;		_ForceSingleCoil
  2622 ;;		_PresetSingleRegister
  2623 ;;		_ReadCurrentRegister
  2624 ;;		_ReadHoldingRegister
  2625 ;;		_ReadInputStatus
  2626 ;;		_SendFrameError
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           
  2633                           ;psect for function _ExecuteCommand
  2634  05FB                     _ExecuteCommand:	
  2635                           
  2636                           ;main.c: 1599: if(ModbusSlave!=0)
  2637                           
  2638                           ;incstack = 0
  2639                           ; Regs used in _ExecuteCommand: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2640  05FB  0020               	movlb	0	; select bank0
  2641  05FC  083A               	movf	_ModbusSlave,w
  2642  05FD  1903               	btfsc	3,2
  2643  05FE  2E05               	goto	l4225
  2644                           
  2645                           ;main.c: 1600: if(ModbusSlave != Setting.SlaveAddress)
  2646  05FF  0021               	movlb	1	; select bank1
  2647  0600  0860               	movf	(_Setting^(0+128)+10),w
  2648  0601  0020               	movlb	0	; select bank0
  2649  0602  063A               	xorwf	_ModbusSlave,w
  2650  0603  1D03               	btfss	3,2
  2651  0604  0008               	return
  2652  0605                     l4225:	
  2653                           ;main.c: 1601: return;
  2654                           
  2655                           
  2656                           ;main.c: 1606: _delay((unsigned long)((100)*(32000000/4000000.0)));
  2657  0605  30A0               	movlw	160
  2658  0606                     u4637:	
  2659  0606  3200               	nop2
  2660  0607  0B89               	decfsz	9,f
  2661  0608  2E06               	goto	u4637
  2662                           
  2663                           ;main.c: 1611: if(ModbusFunction == 1)
  2664  0609  0020               	movlb	0	; select bank0
  2665  060A  033B               	decf	_ModbusFunction,w
  2666  060B  1D03               	btfss	3,2
  2667  060C  2E10               	goto	l4231
  2668                           
  2669                           ;main.c: 1612: ReadInputStatus();
  2670  060D  318D  2598         	fcall	_ReadInputStatus
  2671  060F  0008               	return
  2672  0610                     l4231:	
  2673                           
  2674                           ;main.c: 1613: else if(ModbusFunction == 2)
  2675  0610  3002               	movlw	2
  2676  0611  0020               	movlb	0	; select bank0
  2677  0612  063B               	xorwf	_ModbusFunction,w
  2678  0613  1D03               	btfss	3,2
  2679  0614  2E18               	goto	l4235
  2680                           
  2681                           ;main.c: 1614: ReadInputStatus();
  2682  0615  318D  2598         	fcall	_ReadInputStatus
  2683  0617  0008               	return
  2684  0618                     l4235:	
  2685                           
  2686                           ;main.c: 1615: else if(ModbusFunction == 3)
  2687  0618  3003               	movlw	3
  2688  0619  0020               	movlb	0	; select bank0
  2689  061A  063B               	xorwf	_ModbusFunction,w
  2690  061B  1D03               	btfss	3,2
  2691  061C  2E20               	goto	l4239
  2692                           
  2693                           ;main.c: 1616: ReadHoldingRegister();
  2694  061D  3184  2434         	fcall	_ReadHoldingRegister
  2695  061F  0008               	return
  2696  0620                     l4239:	
  2697                           
  2698                           ;main.c: 1617: else if(ModbusFunction == 4)
  2699  0620  3004               	movlw	4
  2700  0621  0020               	movlb	0	; select bank0
  2701  0622  063B               	xorwf	_ModbusFunction,w
  2702  0623  1D03               	btfss	3,2
  2703  0624  2E28               	goto	l4243
  2704                           
  2705                           ;main.c: 1618: ReadCurrentRegister();
  2706  0625  3184  24AF         	fcall	_ReadCurrentRegister
  2707  0627  0008               	return
  2708  0628                     l4243:	
  2709                           
  2710                           ;main.c: 1619: else if(ModbusFunction == 5)
  2711  0628  3005               	movlw	5
  2712  0629  0020               	movlb	0	; select bank0
  2713  062A  063B               	xorwf	_ModbusFunction,w
  2714  062B  1D03               	btfss	3,2
  2715  062C  2E30               	goto	l4247
  2716                           
  2717                           ;main.c: 1620: ForceSingleCoil();
  2718  062D  318E  261E         	fcall	_ForceSingleCoil
  2719  062F  0008               	return
  2720  0630                     l4247:	
  2721                           
  2722                           ;main.c: 1621: else if(ModbusFunction == 6)
  2723  0630  3006               	movlw	6
  2724  0631  0020               	movlb	0	; select bank0
  2725  0632  063B               	xorwf	_ModbusFunction,w
  2726  0633  1D03               	btfss	3,2
  2727  0634  2E38               	goto	l4251
  2728                           
  2729                           ;main.c: 1622: PresetSingleRegister();
  2730  0635  3183  2398         	fcall	_PresetSingleRegister
  2731  0637  0008               	return
  2732  0638                     l4251:	
  2733                           
  2734                           ;main.c: 1623: else
  2735                           ;main.c: 1624: SendFrameError(1);
  2736  0638  3001               	movlw	1
  2737  0639  318D  25BF         	fcall	_SendFrameError
  2738  063B  0008               	return
  2739  063C                     __end_of_ExecuteCommand:	
  2740                           
  2741                           	psect	text7
  2742  0D98                     __ptext7:	
  2743 ;; *************** function _ReadInputStatus *****************
  2744 ;; Defined at:
  2745 ;;		line 1417 in file "main.c"
  2746 ;; Parameters:    Size  Location     Type
  2747 ;;		None
  2748 ;; Auto vars:     Size  Location     Type
  2749 ;;		None
  2750 ;; Return value:  Size  Location     Type
  2751 ;;                  1    wreg      void 
  2752 ;; Registers used:
  2753 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2754 ;; Tracked objects:
  2755 ;;		On entry : 0/0
  2756 ;;		On exit  : 0/0
  2757 ;;		Unchanged: 0/0
  2758 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2759 ;;      Params:         0       0       0       0       0       0       0
  2760 ;;      Locals:         0       0       0       0       0       0       0
  2761 ;;      Temps:          0       0       0       0       0       0       0
  2762 ;;      Totals:         0       0       0       0       0       0       0
  2763 ;;Total ram usage:        0 bytes
  2764 ;; Hardware stack levels used:    1
  2765 ;; Hardware stack levels required when called:    4
  2766 ;; This function calls:
  2767 ;;		_GetInputPin
  2768 ;;		_SendFrameError
  2769 ;;		_SendReadByteFrame
  2770 ;; This function is called by:
  2771 ;;		_ExecuteCommand
  2772 ;; This function uses a non-reentrant model
  2773 ;;
  2774                           
  2775                           
  2776                           ;psect for function _ReadInputStatus
  2777  0D98                     _ReadInputStatus:	
  2778                           
  2779                           ;main.c: 1421: if(ModbusAddress < 10)
  2780                           
  2781                           ;incstack = 0
  2782                           ; Regs used in _ReadInputStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2783  0D98  3000               	movlw	0
  2784  0D99  0020               	movlb	0	; select bank0
  2785  0D9A  0227               	subwf	_ModbusAddress+1,w
  2786  0D9B  300A               	movlw	10
  2787  0D9C  1903               	skipnz
  2788  0D9D  0226               	subwf	_ModbusAddress,w
  2789  0D9E  1803               	skipnc
  2790  0D9F  2DA7               	goto	l4107
  2791                           
  2792                           ;main.c: 1422: {
  2793                           ;main.c: 1423: SendReadByteFrame(GetInputPin(ModbusAddress));
  2794  0DA0  0826               	movf	_ModbusAddress,w
  2795  0DA1  318E  265A  318D   	fcall	_GetInputPin
  2796  0DA4  318D  2541         	fcall	_SendReadByteFrame
  2797                           
  2798                           ;main.c: 1424: }
  2799  0DA6  0008               	return
  2800  0DA7                     l4107:	
  2801                           
  2802                           ;main.c: 1426: else
  2803                           ;main.c: 1427: SendFrameError( 2);
  2804  0DA7  3002               	movlw	2
  2805  0DA8  318D  25BF         	fcall	_SendFrameError
  2806  0DAA  0008               	return
  2807  0DAB                     __end_of_ReadInputStatus:	
  2808                           
  2809                           	psect	text8
  2810  0D41                     __ptext8:	
  2811 ;; *************** function _SendReadByteFrame *****************
  2812 ;; Defined at:
  2813 ;;		line 935 in file "main.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;  value           1    wreg     unsigned char 
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;  value           1    0[COMMON] unsigned char 
  2818 ;; Return value:  Size  Location     Type
  2819 ;;                  1    wreg      void 
  2820 ;; Registers used:
  2821 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2827 ;;      Params:         0       0       0       0       0       0       0
  2828 ;;      Locals:         0       0       0       0       0       0       0
  2829 ;;      Temps:          0       0       0       0       0       0       0
  2830 ;;      Totals:         0       0       0       0       0       0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:    3
  2834 ;; This function calls:
  2835 ;;		_InitModbusPacket
  2836 ;;		_SendModbusPacket
  2837 ;; This function is called by:
  2838 ;;		_ReadInputStatus
  2839 ;; This function uses a non-reentrant model
  2840 ;;
  2841                           
  2842                           
  2843                           ;psect for function _SendReadByteFrame
  2844  0D41                     _SendReadByteFrame:	
  2845                           
  2846                           ;incstack = 0
  2847                           ; Regs used in _SendReadByteFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2848  0D41  0020               	movlb	0	;# 
  2849  0D42  00F9               	movwf	SendReadByteFrame@value	;# 
  2850                           
  2851                           ;main.c: 944: InitModbusPacket();
  2852  0D43  318D  2516  318D   	fcall	_InitModbusPacket
  2853  0D46  3001               	movlw	1	;# 
  2854  0D47  0021               	banksel	_ModbusPacketBuffer	;# 
  2855  0D48  00B8               	movwf	(_ModbusPacketBuffer& (0+127)+2)	;# 
  2856  0D49  0020               	movlb	0	;# 
  2857  0D4A  0879               	movf	SendReadByteFrame@value,w	;# 
  2858  0D4B  0021               	banksel	_ModbusPacketBuffer	;# 
  2859  0D4C  00B9               	movwf	(_ModbusPacketBuffer& (0+127)+3)	;# 
  2860                           
  2861                           ;main.c: 958: SendModbusPacket(4);
  2862  0D4D  3004               	movlw	4
  2863  0D4E  318F  27D0         	fcall	_SendModbusPacket
  2864  0D50  0008               	return
  2865  0D51                     __end_of_SendReadByteFrame:	
  2866                           
  2867                           	psect	text9
  2868  0434                     __ptext9:	
  2869 ;; *************** function _ReadHoldingRegister *****************
  2870 ;; Defined at:
  2871 ;;		line 1236 in file "main.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;  temp            2   13[BANK0 ] unsigned short 
  2876 ;;  ctemp1          1   17[BANK0 ] volatile unsigned char 
  2877 ;;  Flag            1   12[BANK0 ] unsigned char 
  2878 ;;  ctemp3          1   16[BANK0 ] volatile unsigned char 
  2879 ;;  ctemp2          1   15[BANK0 ] volatile unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  2889 ;;      Params:         0       0       0       0       0       0       0
  2890 ;;      Locals:         0       6       0       0       0       0       0
  2891 ;;      Temps:          0       2       0       0       0       0       0
  2892 ;;      Totals:         0       8       0       0       0       0       0
  2893 ;;Total ram usage:        8 bytes
  2894 ;; Hardware stack levels used:    1
  2895 ;; Hardware stack levels required when called:    4
  2896 ;; This function calls:
  2897 ;;		_SendFrameError
  2898 ;;		_SendReadFrame
  2899 ;; This function is called by:
  2900 ;;		_ExecuteCommand
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           
  2905                           ;psect for function _ReadHoldingRegister
  2906  0434                     _ReadHoldingRegister:	
  2907                           
  2908                           ;main.c: 1238: volatile unsigned char ctemp1,ctemp2,ctemp3;
  2909                           ;main.c: 1239: unsigned short temp;
  2910                           ;main.c: 1240: char Flag= 0;
  2911                           
  2912                           ;incstack = 0
  2913                           ; Regs used in _ReadHoldingRegister: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2914  0434  0020               	movlb	0	; select bank0
  2915  0435  01DA               	clrf	ReadHoldingRegister@Flag
  2916                           
  2917                           ;main.c: 1241: if((ModbusAddress >= 0x100) && (ModbusAddress <= 0x10a))
  2918  0436  3001               	movlw	1
  2919  0437  0227               	subwf	_ModbusAddress+1,w
  2920  0438  3000               	movlw	0
  2921  0439  1903               	skipnz
  2922  043A  0226               	subwf	_ModbusAddress,w
  2923  043B  1C03               	skipc
  2924  043C  2C4A               	goto	l4041
  2925  043D  3001               	movlw	1
  2926  043E  0227               	subwf	_ModbusAddress+1,w
  2927  043F  300B               	movlw	11
  2928  0440  1903               	skipnz
  2929  0441  0226               	subwf	_ModbusAddress,w
  2930  0442  1803               	skipnc
  2931  0443  2C4A               	goto	l4041
  2932                           
  2933                           ;main.c: 1242: temp = Setting.IOConfig[ModbusAddress - 0x100];
  2934  0444  0826               	movf	_ModbusAddress,w
  2935  0445  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  2936  0446  0086               	movwf	6
  2937  0447  0187               	clrf	7
  2938  0448  0801               	movf	1,w
  2939  0449  2C52               	goto	L1
  2940  044A                     l4041:	
  2941                           
  2942                           ;main.c: 1243: else if(ModbusAddress == 160)
  2943  044A  30A0               	movlw	160
  2944  044B  0626               	xorwf	_ModbusAddress,w
  2945  044C  0427               	iorwf	_ModbusAddress+1,w
  2946  044D  1D03               	btfss	3,2
  2947  044E  2C58               	goto	l4045
  2948                           
  2949                           ;main.c: 1244: temp = Setting.SlaveAddress;
  2950  044F  0021               	movlb	1	; select bank1
  2951  0450  0860               	movf	(_Setting^(0+128)+10),w
  2952  0451  0020               	movlb	0	; select bank0
  2953  0452                     L1:	
  2954  0452  00D8               	movwf	??_ReadHoldingRegister
  2955  0453  01D9               	clrf	??_ReadHoldingRegister+1
  2956  0454  0858               	movf	??_ReadHoldingRegister,w
  2957  0455  00DB               	movwf	ReadHoldingRegister@temp
  2958  0456  0859               	movf	??_ReadHoldingRegister+1,w
  2959  0457  2C69               	goto	L3
  2960  0458                     l4045:	
  2961                           
  2962                           ;main.c: 1245: else if(ModbusAddress == 250)
  2963  0458  30FA               	movlw	250
  2964  0459  0626               	xorwf	_ModbusAddress,w
  2965  045A  0427               	iorwf	_ModbusAddress+1,w
  2966  045B  1D03               	btfss	3,2
  2967  045C  2C61               	goto	l4049
  2968                           
  2969                           ;main.c: 1246: temp = 0x0101;
  2970  045D  3001               	movlw	1
  2971  045E  00DB               	movwf	ReadHoldingRegister@temp
  2972  045F  3001               	movlw	1
  2973  0460  2C69               	goto	L3
  2974  0461                     l4049:	
  2975                           
  2976                           ;main.c: 1247: else if(ModbusAddress == 251)
  2977  0461  30FB               	movlw	251
  2978  0462  0626               	xorwf	_ModbusAddress,w
  2979  0463  0427               	iorwf	_ModbusAddress+1,w
  2980  0464  1D03               	btfss	3,2
  2981  0465  2C6B               	goto	l4053
  2982                           
  2983                           ;main.c: 1248: temp = 0x653B;
  2984  0466  303B               	movlw	59
  2985  0467  00DB               	movwf	ReadHoldingRegister@temp
  2986  0468  3065               	movlw	101
  2987  0469                     L3:	
  2988  0469  00DC               	movwf	ReadHoldingRegister@temp+1
  2989  046A  2CA0               	goto	l4063
  2990  046B                     l4053:	
  2991                           
  2992                           ;main.c: 1249: else if(ModbusAddress == 240)
  2993  046B  30F0               	movlw	240
  2994  046C  0626               	xorwf	_ModbusAddress,w
  2995  046D  0427               	iorwf	_ModbusAddress+1,w
  2996  046E  1D03               	btfss	3,2
  2997  046F  2C94               	goto	l4059
  2998  0470                     l4055:	
  2999                           ;main.c: 1250: {
  3000                           ;main.c: 1251: do{
  3001                           
  3002                           
  3003                           ;main.c: 1252: ctemp1 = TMR1H;
  3004  0470  0817               	movf	23,w	;volatile
  3005  0471  00D8               	movwf	??_ReadHoldingRegister
  3006  0472  0858               	movf	??_ReadHoldingRegister,w
  3007  0473  00DF               	movwf	ReadHoldingRegister@ctemp1	;volatile
  3008                           
  3009                           ;main.c: 1253: ctemp2 = TMR1L;
  3010  0474  0816               	movf	22,w	;volatile
  3011  0475  00D8               	movwf	??_ReadHoldingRegister
  3012  0476  0858               	movf	??_ReadHoldingRegister,w
  3013  0477  00DD               	movwf	ReadHoldingRegister@ctemp2	;volatile
  3014                           
  3015                           ;main.c: 1254: ctemp3 = TMR1H;
  3016  0478  0817               	movf	23,w	;volatile
  3017  0479  00D8               	movwf	??_ReadHoldingRegister
  3018  047A  0858               	movf	??_ReadHoldingRegister,w
  3019  047B  00DE               	movwf	ReadHoldingRegister@ctemp3	;volatile
  3020                           
  3021                           ;main.c: 1255: }while(ctemp1 != ctemp3);
  3022  047C  085F               	movf	ReadHoldingRegister@ctemp1,w	;volatile
  3023  047D  065E               	xorwf	ReadHoldingRegister@ctemp3,w	;volatile
  3024  047E  1D03               	skipz
  3025  047F  2C70               	goto	l4055
  3026                           
  3027                           ;main.c: 1256: temp = ctemp1;
  3028  0480  085F               	movf	ReadHoldingRegister@ctemp1,w	;volatile
  3029  0481  00D8               	movwf	??_ReadHoldingRegister
  3030  0482  01D9               	clrf	??_ReadHoldingRegister+1
  3031  0483  0858               	movf	??_ReadHoldingRegister,w
  3032  0484  00DB               	movwf	ReadHoldingRegister@temp
  3033  0485  0859               	movf	??_ReadHoldingRegister+1,w
  3034  0486  00DC               	movwf	ReadHoldingRegister@temp+1
  3035                           
  3036                           ;main.c: 1257: temp <<=8;
  3037  0487  3008               	movlw	8
  3038  0488                     u4075:	
  3039  0488  35DB               	lslf	ReadHoldingRegister@temp,f
  3040  0489  0DDC               	rlf	ReadHoldingRegister@temp+1,f
  3041  048A  0B89               	decfsz	9,f
  3042  048B  2C88               	goto	u4075
  3043                           
  3044                           ;main.c: 1258: temp |= ctemp2;
  3045  048C  085D               	movf	ReadHoldingRegister@ctemp2,w	;volatile
  3046  048D  00D8               	movwf	??_ReadHoldingRegister
  3047  048E  01D9               	clrf	??_ReadHoldingRegister+1
  3048  048F  0858               	movf	??_ReadHoldingRegister,w
  3049  0490  04DB               	iorwf	ReadHoldingRegister@temp,f
  3050  0491  0859               	movf	??_ReadHoldingRegister+1,w
  3051  0492  04DC               	iorwf	ReadHoldingRegister@temp+1,f
  3052                           
  3053                           ;main.c: 1259: }
  3054  0493  2CA0               	goto	l4063
  3055  0494                     l4059:	
  3056                           
  3057                           ;main.c: 1260: else if(ModbusAddress == 241)
  3058  0494  30F1               	movlw	241
  3059  0495  0626               	xorwf	_ModbusAddress,w
  3060  0496  0427               	iorwf	_ModbusAddress+1,w
  3061  0497  1D03               	btfss	3,2
  3062  0498  2C9E               	goto	l575
  3063                           
  3064                           ;main.c: 1261: {
  3065                           ;main.c: 1262: temp = TimerHiCount;
  3066  0499  0833               	movf	_TimerHiCount+1,w	;volatile
  3067  049A  00DC               	movwf	ReadHoldingRegister@temp+1
  3068  049B  0832               	movf	_TimerHiCount,w	;volatile
  3069  049C  00DB               	movwf	ReadHoldingRegister@temp
  3070                           
  3071                           ;main.c: 1263: }
  3072  049D  2CA0               	goto	l4063
  3073  049E                     l575:	
  3074                           
  3075                           ;main.c: 1265: else
  3076                           ;main.c: 1266: Flag= 1;
  3077  049E  01DA               	clrf	ReadHoldingRegister@Flag
  3078  049F  0ADA               	incf	ReadHoldingRegister@Flag,f
  3079  04A0                     l4063:	
  3080                           
  3081                           ;main.c: 1268: if(Flag)
  3082  04A0  085A               	movf	ReadHoldingRegister@Flag,w
  3083  04A1  1903               	btfsc	3,2
  3084  04A2  2CA7               	goto	l4067
  3085                           
  3086                           ;main.c: 1269: SendFrameError( 2);
  3087  04A3  3002               	movlw	2
  3088  04A4  318D  25BF         	fcall	_SendFrameError
  3089  04A6  0008               	return
  3090  04A7                     l4067:	
  3091                           
  3092                           ;main.c: 1270: else
  3093                           ;main.c: 1271: SendReadFrame(temp);
  3094  04A7  0020               	movlb	0	; select bank0
  3095  04A8  085C               	movf	ReadHoldingRegister@temp+1,w
  3096  04A9  00D7               	movwf	SendReadFrame@value+1
  3097  04AA  085B               	movf	ReadHoldingRegister@temp,w
  3098  04AB  00D6               	movwf	SendReadFrame@value
  3099  04AC  318D  25AB         	fcall	_SendReadFrame
  3100  04AE  0008               	return
  3101  04AF                     __end_of_ReadHoldingRegister:	
  3102                           
  3103                           	psect	text10
  3104  04AF                     __ptext10:	
  3105 ;; *************** function _ReadCurrentRegister *****************
  3106 ;; Defined at:
  3107 ;;		line 1358 in file "main.c"
  3108 ;; Parameters:    Size  Location     Type
  3109 ;;		None
  3110 ;; Auto vars:     Size  Location     Type
  3111 ;;  temp            2   19[BANK0 ] unsigned short 
  3112 ;;  IOn             1   21[BANK0 ] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3122 ;;      Params:         0       0       0       0       0       0       0
  3123 ;;      Locals:         0       3       0       0       0       0       0
  3124 ;;      Temps:          0       3       0       0       0       0       0
  3125 ;;      Totals:         0       6       0       0       0       0       0
  3126 ;;Total ram usage:        6 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:    5
  3129 ;; This function calls:
  3130 ;;		_MultipleRegister
  3131 ;;		_ReadAllCoils
  3132 ;;		_ReadIO
  3133 ;;		_ReadTSensor
  3134 ;;		_ReadVRef
  3135 ;;		_SendBytesFrame
  3136 ;;		_SendFrameError
  3137 ;;		_SendReadFrame
  3138 ;; This function is called by:
  3139 ;;		_ExecuteCommand
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function _ReadCurrentRegister
  3145  04AF                     _ReadCurrentRegister:	
  3146                           
  3147                           ;main.c: 1360: unsigned short temp;
  3148                           ;main.c: 1361: unsigned char IOn;
  3149                           ;main.c: 1364: temp=0;
  3150                           
  3151                           ;incstack = 0
  3152                           ; Regs used in _ReadCurrentRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3153  04AF  0020               	movlb	0	; select bank0
  3154  04B0  01E1               	clrf	ReadCurrentRegister@temp
  3155  04B1  01E2               	clrf	ReadCurrentRegister@temp+1
  3156                           
  3157                           ;main.c: 1365: BadIO=0;
  3158  04B2  01C2               	clrf	_BadIO
  3159                           
  3160                           ;main.c: 1366: if(ModbusAddress<0xA0)
  3161  04B3  3000               	movlw	0
  3162  04B4  0227               	subwf	_ModbusAddress+1,w
  3163  04B5  30A0               	movlw	160
  3164  04B6  1903               	skipnz
  3165  04B7  0226               	subwf	_ModbusAddress,w
  3166  04B8  1803               	skipnc
  3167  04B9  2CDD               	goto	l4085
  3168                           
  3169                           ;main.c: 1367: {
  3170                           ;main.c: 1368: IOn = ModbusAddress >>4;
  3171  04BA  0827               	movf	_ModbusAddress+1,w
  3172  04BB  00DF               	movwf	??_ReadCurrentRegister+1
  3173  04BC  0826               	movf	_ModbusAddress,w
  3174  04BD  00DE               	movwf	??_ReadCurrentRegister
  3175  04BE  3004               	movlw	4
  3176  04BF                     u4115:	
  3177  04BF  36DF               	lsrf	??_ReadCurrentRegister+1,f
  3178  04C0  0CDE               	rrf	??_ReadCurrentRegister,f
  3179  04C1  0B89               	decfsz	9,f
  3180  04C2  2CBF               	goto	u4115
  3181  04C3  085E               	movf	??_ReadCurrentRegister,w
  3182  04C4  00E0               	movwf	??_ReadCurrentRegister+2
  3183  04C5  0860               	movf	??_ReadCurrentRegister+2,w
  3184  04C6  00E3               	movwf	ReadCurrentRegister@IOn
  3185                           
  3186                           ;main.c: 1370: if(MultipleRegister(IOn))
  3187  04C7  0863               	movf	ReadCurrentRegister@IOn,w
  3188  04C8  318D  2531  3184   	fcall	_MultipleRegister
  3189  04CB  3A00               	xorlw	0
  3190  04CC  1903               	skipnz
  3191  04CD  2CD3               	goto	l4083
  3192                           
  3193                           ;main.c: 1371: {
  3194                           ;main.c: 1372: SendBytesFrame(IOn);
  3195  04CE  0020               	movlb	0	; select bank0
  3196  04CF  0863               	movf	ReadCurrentRegister@IOn,w
  3197  04D0  3185  256A         	fcall	_SendBytesFrame
  3198                           
  3199                           ;main.c: 1373: return;
  3200  04D2  0008               	return
  3201  04D3                     l4083:	
  3202                           ;main.c: 1374: }
  3203                           
  3204                           
  3205                           ;main.c: 1375: else
  3206                           ;main.c: 1376: temp= ReadIO(IOn);
  3207  04D3  0020               	movlb	0	; select bank0
  3208  04D4  0863               	movf	ReadCurrentRegister@IOn,w
  3209  04D5  3187  2731  3184   	fcall	_ReadIO
  3210  04D8  0020               	movlb	0	; select bank0
  3211  04D9  0852               	movf	?_ReadIO+1,w
  3212  04DA  00E2               	movwf	ReadCurrentRegister@temp+1
  3213  04DB  0851               	movf	?_ReadIO,w
  3214  04DC  2D06               	goto	L6
  3215  04DD                     l4085:	
  3216                           ;main.c: 1377: }
  3217                           
  3218                           
  3219                           ;main.c: 1378: else if(ModbusAddress==0x1000)
  3220  04DD  3010               	movlw	16
  3221  04DE  0627               	xorwf	_ModbusAddress+1,w
  3222  04DF  0426               	iorwf	_ModbusAddress,w
  3223  04E0  1D03               	btfss	3,2
  3224  04E1  2CEA               	goto	l4089
  3225                           
  3226                           ;main.c: 1379: temp = ReadVRef();
  3227  04E2  318D  2562  3184   	fcall	_ReadVRef
  3228  04E5  0020               	movlb	0	; select bank0
  3229  04E6  0852               	movf	?_ReadVRef+1,w
  3230  04E7  00E2               	movwf	ReadCurrentRegister@temp+1
  3231  04E8  0851               	movf	?_ReadVRef,w
  3232  04E9  2D06               	goto	L6
  3233  04EA                     l4089:	
  3234                           
  3235                           ;main.c: 1380: else if(ModbusAddress==0x1001)
  3236  04EA  0326               	decf	_ModbusAddress,w
  3237  04EB  3010               	movlw	16
  3238  04EC  1903               	skipnz
  3239  04ED  0627               	xorwf	_ModbusAddress+1,w
  3240  04EE  1D03               	btfss	3,2
  3241  04EF  2CF8               	goto	l4093
  3242                           
  3243                           ;main.c: 1381: temp = ReadTSensor();
  3244  04F0  318D  2522  3184   	fcall	_ReadTSensor
  3245  04F3  0020               	movlb	0	; select bank0
  3246  04F4  0852               	movf	?_ReadTSensor+1,w
  3247  04F5  00E2               	movwf	ReadCurrentRegister@temp+1
  3248  04F6  0851               	movf	?_ReadTSensor,w
  3249  04F7  2D06               	goto	L6
  3250  04F8                     l4093:	
  3251                           
  3252                           ;main.c: 1382: else if(ModbusAddress==0x1002)
  3253  04F8  3002               	movlw	2
  3254  04F9  0626               	xorwf	_ModbusAddress,w
  3255  04FA  3010               	movlw	16
  3256  04FB  1903               	skipnz
  3257  04FC  0627               	xorwf	_ModbusAddress+1,w
  3258  04FD  1D03               	btfss	3,2
  3259  04FE  2D08               	goto	l617
  3260                           
  3261                           ;main.c: 1383: temp = ReadAllCoils();
  3262  04FF  318F  2751  3184   	fcall	_ReadAllCoils
  3263  0502  0876               	movf	?_ReadAllCoils+1,w
  3264  0503  0020               	movlb	0	; select bank0
  3265  0504  00E2               	movwf	ReadCurrentRegister@temp+1
  3266  0505  0875               	movf	?_ReadAllCoils,w
  3267  0506                     L6:	
  3268  0506  00E1               	movwf	ReadCurrentRegister@temp
  3269  0507  2D0A               	goto	l4097
  3270  0508                     l617:	
  3271                           
  3272                           ;main.c: 1384: else
  3273                           ;main.c: 1385: BadIO=1;
  3274  0508  01C2               	clrf	_BadIO
  3275  0509  0AC2               	incf	_BadIO,f
  3276  050A                     l4097:	
  3277                           
  3278                           ;main.c: 1387: if(BadIO)
  3279  050A  0020               	movlb	0	; select bank0
  3280  050B  0842               	movf	_BadIO,w
  3281  050C  1903               	btfsc	3,2
  3282  050D  2D12               	goto	l4101
  3283                           
  3284                           ;main.c: 1388: SendFrameError(2);
  3285  050E  3002               	movlw	2
  3286  050F  318D  25BF         	fcall	_SendFrameError
  3287  0511  0008               	return
  3288  0512                     l4101:	
  3289                           
  3290                           ;main.c: 1389: else
  3291                           ;main.c: 1390: SendReadFrame(temp);
  3292  0512  0020               	movlb	0	; select bank0
  3293  0513  0862               	movf	ReadCurrentRegister@temp+1,w
  3294  0514  00D7               	movwf	SendReadFrame@value+1
  3295  0515  0861               	movf	ReadCurrentRegister@temp,w
  3296  0516  00D6               	movwf	SendReadFrame@value
  3297  0517  318D  25AB         	fcall	_SendReadFrame
  3298  0519  0008               	return
  3299  051A                     __end_of_ReadCurrentRegister:	
  3300                           
  3301                           	psect	text11
  3302  0DAB                     __ptext11:	
  3303 ;; *************** function _SendReadFrame *****************
  3304 ;; Defined at:
  3305 ;;		line 971 in file "main.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  value           2    8[BANK0 ] unsigned short 
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3319 ;;      Params:         0       2       0       0       0       0       0
  3320 ;;      Locals:         0       0       0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0
  3322 ;;      Totals:         0       2       0       0       0       0       0
  3323 ;;Total ram usage:        2 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    3
  3326 ;; This function calls:
  3327 ;;		_InitModbusPacket
  3328 ;;		_SendModbusPacket
  3329 ;; This function is called by:
  3330 ;;		_ReadHoldingRegister
  3331 ;;		_ReadCurrentRegister
  3332 ;; This function uses a non-reentrant model
  3333 ;;
  3334                           
  3335                           
  3336                           ;psect for function _SendReadFrame
  3337  0DAB                     _SendReadFrame:	
  3338                           
  3339                           ;incstack = 0
  3340                           ; Regs used in _SendReadFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3341  0DAB  0020               	movlb	0	;# 
  3342  0DAC  00D6               	movwf	SendReadFrame@value	;# 
  3343                           
  3344                           ;main.c: 978: InitModbusPacket();
  3345  0DAD  318D  2516  318D   	fcall	_InitModbusPacket
  3346  0DB0  3002               	movlw	2	;# 
  3347  0DB1  0021               	banksel	_ModbusPacketBuffer	;# 
  3348  0DB2  00B8               	movwf	(_ModbusPacketBuffer& (0+127)+2)	;# 
  3349  0DB3  0020               	movlb	0	;# 
  3350  0DB4  0857               	movf	SendReadFrame@value+1,w	;# 
  3351  0DB5  0021               	banksel	_ModbusPacketBuffer	;# 
  3352  0DB6  00B9               	movwf	(_ModbusPacketBuffer& (0+127)+3)	;# 
  3353  0DB7  0020               	movlb	0	;# 
  3354  0DB8  0856               	movf	SendReadFrame@value,w	;# 
  3355  0DB9  0021               	banksel	_ModbusPacketBuffer	;# 
  3356  0DBA  00BA               	movwf	(_ModbusPacketBuffer& (0+127)+4)	;# 
  3357                           
  3358                           ;main.c: 997: SendModbusPacket(5);
  3359  0DBB  3005               	movlw	5
  3360  0DBC  318F  27D0         	fcall	_SendModbusPacket
  3361  0DBE  0008               	return
  3362  0DBF                     __end_of_SendReadFrame:	
  3363                           
  3364                           	psect	text12
  3365  056A                     __ptext12:	
  3366 ;; *************** function _SendBytesFrame *****************
  3367 ;; Defined at:
  3368 ;;		line 1003 in file "main.c"
  3369 ;; Parameters:    Size  Location     Type
  3370 ;;  _Address        1    wreg     unsigned char 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  _Address        1   14[BANK0 ] unsigned char 
  3373 ;;  NByte           1   15[BANK0 ] unsigned char 
  3374 ;;  _temp           1   13[BANK0 ] unsigned char 
  3375 ;;  loop            1   12[BANK0 ] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3385 ;;      Params:         0       0       0       0       0       0       0
  3386 ;;      Locals:         0       4       0       0       0       0       0
  3387 ;;      Temps:          0       2       0       0       0       0       0
  3388 ;;      Totals:         0       6       0       0       0       0       0
  3389 ;;Total ram usage:        6 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    4
  3392 ;; This function calls:
  3393 ;;		_InitModbusPacket
  3394 ;;		_SendFrameError
  3395 ;;		_SendModbusPacket
  3396 ;;		___bmul
  3397 ;; This function is called by:
  3398 ;;		_ReadCurrentRegister
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           
  3403                           ;psect for function _SendBytesFrame
  3404  056A                     _SendBytesFrame:	
  3405                           
  3406                           ;incstack = 0
  3407                           ; Regs used in _SendBytesFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3408                           ;SendBytesFrame@_Address stored from wreg
  3409  056A  0020               	movlb	0	; select bank0
  3410  056B  00DC               	movwf	SendBytesFrame@_Address
  3411                           
  3412                           ;main.c: 1005: unsigned char loop=0;
  3413  056C  01DA               	clrf	SendBytesFrame@loop
  3414                           
  3415                           ;main.c: 1006: unsigned char NByte=0;
  3416  056D  01DD               	clrf	SendBytesFrame@NByte
  3417                           
  3418                           ;main.c: 1008: unsigned char _temp;
  3419                           ;main.c: 1010: _temp = Setting.IOConfig[_Address];
  3420  056E  085C               	movf	SendBytesFrame@_Address,w
  3421  056F  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  3422  0570  0086               	movwf	6
  3423  0571  0187               	clrf	7
  3424  0572  0801               	movf	1,w
  3425  0573  00D8               	movwf	??_SendBytesFrame
  3426  0574  0858               	movf	??_SendBytesFrame,w
  3427  0575  00DB               	movwf	SendBytesFrame@_temp
  3428                           
  3429                           ;main.c: 1022: if((_temp & 12)== 12)
  3430  0576  300C               	movlw	12
  3431  0577  055B               	andwf	SendBytesFrame@_temp,w
  3432  0578  00D8               	movwf	??_SendBytesFrame
  3433  0579  300C               	movlw	12
  3434  057A  0658               	xorwf	??_SendBytesFrame,w
  3435  057B  1D03               	btfss	3,2
  3436  057C  2D7F               	goto	l3941
  3437                           
  3438                           ;main.c: 1023: NByte = 6;
  3439  057D  3006               	movlw	6
  3440  057E  2D80               	goto	L7
  3441  057F                     l3941:	
  3442                           
  3443                           ;main.c: 1024: else
  3444                           ;main.c: 1025: NByte=4;
  3445  057F  3004               	movlw	4
  3446  0580                     L7:	
  3447  0580  00D8               	movwf	??_SendBytesFrame
  3448  0581  0858               	movf	??_SendBytesFrame,w
  3449  0582  00DD               	movwf	SendBytesFrame@NByte
  3450                           
  3451                           ;main.c: 1027: if(NByte==0)
  3452  0583  085D               	movf	SendBytesFrame@NByte,w
  3453  0584  1D03               	btfss	3,2
  3454  0585  2D8A               	goto	l3947
  3455                           
  3456                           ;main.c: 1028: SendFrameError(2);
  3457  0586  3002               	movlw	2
  3458  0587  318D  25BF         	fcall	_SendFrameError
  3459  0589  0008               	return
  3460  058A                     l3947:	
  3461                           
  3462                           ;main.c: 1029: else
  3463                           ;main.c: 1030: {
  3464                           ;main.c: 1031: InitModbusPacket();
  3465  058A  318D  2516  3185   	fcall	_InitModbusPacket
  3466                           
  3467                           ;main.c: 1033: ModbusPacketBuffer[2]= NByte;
  3468  058D  0020               	movlb	0	; select bank0
  3469  058E  085D               	movf	SendBytesFrame@NByte,w
  3470  058F  00D8               	movwf	??_SendBytesFrame
  3471  0590  0858               	movf	??_SendBytesFrame,w
  3472  0591  0021               	movlb	1	; select bank1
  3473  0592  00B8               	movwf	(_ModbusPacketBuffer^(0+128)+2)
  3474                           
  3475                           ;main.c: 1048: _temp = _Address * sizeof(SensorDataUnion);
  3476  0593  3006               	movlw	6
  3477  0594  0020               	movlb	0	; select bank0
  3478  0595  00D8               	movwf	??_SendBytesFrame
  3479  0596  0858               	movf	??_SendBytesFrame,w
  3480  0597  00F2               	movwf	___bmul@multiplicand
  3481  0598  085C               	movf	SendBytesFrame@_Address,w
  3482  0599  318D  2551  3185   	fcall	___bmul
  3483  059C  0020               	movlb	0	; select bank0
  3484  059D  00D9               	movwf	??_SendBytesFrame+1
  3485  059E  0859               	movf	??_SendBytesFrame+1,w
  3486  059F  00DB               	movwf	SendBytesFrame@_temp
  3487  05A0  3001               	movlw	_IOSensorData/(0+256)	;# 
  3488  05A1  0085               	movwf	5	;# 
  3489  05A2  30A0               	movlw	_IOSensorData& (0+255)	;# 
  3490  05A3  075B               	addwf	SendBytesFrame@_temp,w	;# 
  3491  05A4  0084               	movwf	4	;# 
  3492  05A5  3000               	movlw	_ModbusPacketBuffer/(0+256)	;# 
  3493  05A6  0087               	movwf	7	;# 
  3494  05A7  30B9               	movlw	(_ModbusPacketBuffer& (0+255)+3)	;# 
  3495  05A8  0086               	movwf	6	;# 
  3496  05A9  085D               	movf	SendBytesFrame@NByte,w	;# 
  3497  05AA  00DA               	movwf	SendBytesFrame@loop	;# 
  3498                           
  3499                           ;main.c: 1063: (GIE = 0);
  3500  05AB  138B               	bcf	11,7	;volatile
  3501  05AC                     BYTELOOP:	
  3502                           
  3503                           ;# 
  3504  05AC  0800               	movf	0,w	;# 
  3505  05AD  001E               	movwi fsr1++	;# 
  3506  05AE  0A84               	incf	4,f	;# 
  3507  05AF  0BDA               	decfsz	SendBytesFrame@loop,f	;# 
  3508  05B0  2DAC               	goto	BYTELOOP	;# 
  3509                           
  3510                           ;main.c: 1072: (GIE = 1);
  3511  05B1  178B               	bsf	11,7	;volatile
  3512                           
  3513                           ;main.c: 1074: SendModbusPacket((unsigned char) (NByte+3));
  3514  05B2  0020               	movlb	0	; select bank0
  3515  05B3  085D               	movf	SendBytesFrame@NByte,w
  3516  05B4  3E03               	addlw	3
  3517  05B5  318F  27D0         	fcall	_SendModbusPacket
  3518  05B7  0008               	return
  3519  05B8                     __end_of_SendBytesFrame:	
  3520                           
  3521                           	psect	text13
  3522  0D62                     __ptext13:	
  3523 ;; *************** function _ReadVRef *****************
  3524 ;; Defined at:
  3525 ;;		line 1300 in file "main.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  2    3[BANK0 ] unsigned short 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, status,0, pclath, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3539 ;;      Params:         0       2       0       0       0       0       0
  3540 ;;      Locals:         0       0       0       0       0       0       0
  3541 ;;      Temps:          0       0       0       0       0       0       0
  3542 ;;      Totals:         0       2       0       0       0       0       0
  3543 ;;Total ram usage:        2 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    2
  3546 ;; This function calls:
  3547 ;;		_ReadA2D
  3548 ;; This function is called by:
  3549 ;;		_ReadCurrentRegister
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           
  3554                           ;psect for function _ReadVRef
  3555  0D62                     _ReadVRef:	
  3556                           
  3557                           ;main.c: 1303: FVRCONbits.ADFVR=2;
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _ReadVRef: [wreg+status,2+status,0+pclath+cstack]
  3561  0D62  0022               	movlb	2	; select bank2
  3562  0D63  0817               	movf	23,w	;volatile
  3563  0D64  39FC               	andlw	-4
  3564  0D65  3802               	iorlw	2
  3565  0D66  0097               	movwf	23	;volatile
  3566                           
  3567                           ;main.c: 1305: ADCON1bits.ADPREF=0;
  3568  0D67  30FC               	movlw	-4
  3569  0D68  0021               	movlb	1	; select bank1
  3570  0D69  059E               	andwf	30,f	;volatile
  3571                           
  3572                           ;main.c: 1306: return ReadA2D(31);
  3573  0D6A  301F               	movlw	31
  3574  0D6B  3186  26BB         	fcall	_ReadA2D
  3575  0D6D  0873               	movf	?_ReadA2D+1,w
  3576  0D6E  0020               	movlb	0	; select bank0
  3577  0D6F  00D2               	movwf	?_ReadVRef+1
  3578  0D70  0872               	movf	?_ReadA2D,w
  3579  0D71  00D1               	movwf	?_ReadVRef
  3580  0D72  0008               	return
  3581  0D73                     __end_of_ReadVRef:	
  3582                           
  3583                           	psect	text14
  3584  0D22                     __ptext14:	
  3585 ;; *************** function _ReadTSensor *****************
  3586 ;; Defined at:
  3587 ;;		line 1309 in file "main.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;		None
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;		None
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  2    3[BANK0 ] unsigned short 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 0/0
  3598 ;;		On exit  : 0/0
  3599 ;;		Unchanged: 0/0
  3600 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3601 ;;      Params:         0       2       0       0       0       0       0
  3602 ;;      Locals:         0       0       0       0       0       0       0
  3603 ;;      Temps:          0       0       0       0       0       0       0
  3604 ;;      Totals:         0       2       0       0       0       0       0
  3605 ;;Total ram usage:        2 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    2
  3608 ;; This function calls:
  3609 ;;		_ReadA2D
  3610 ;; This function is called by:
  3611 ;;		_ReadCurrentRegister
  3612 ;; This function uses a non-reentrant model
  3613 ;;
  3614                           
  3615                           
  3616                           ;psect for function _ReadTSensor
  3617  0D22                     _ReadTSensor:	
  3618                           
  3619                           ;main.c: 1312: FVRCONbits.TSEN=1;
  3620                           
  3621                           ;incstack = 0
  3622                           ; Regs used in _ReadTSensor: [wreg+status,2+status,0+pclath+cstack]
  3623  0D22  0022               	movlb	2	; select bank2
  3624  0D23  1697               	bsf	23,5	;volatile
  3625                           
  3626                           ;main.c: 1313: FVRCONbits.TSRNG=0;
  3627  0D24  1217               	bcf	23,4	;volatile
  3628                           
  3629                           ;main.c: 1314: ADCON1bits.ADPREF=0;
  3630  0D25  30FC               	movlw	-4
  3631  0D26  0021               	movlb	1	; select bank1
  3632  0D27  059E               	andwf	30,f	;volatile
  3633                           
  3634                           ;main.c: 1315: return ReadA2D(29);
  3635  0D28  301D               	movlw	29
  3636  0D29  3186  26BB         	fcall	_ReadA2D
  3637  0D2B  0873               	movf	?_ReadA2D+1,w
  3638  0D2C  0020               	movlb	0	; select bank0
  3639  0D2D  00D2               	movwf	?_ReadTSensor+1
  3640  0D2E  0872               	movf	?_ReadA2D,w
  3641  0D2F  00D1               	movwf	?_ReadTSensor
  3642  0D30  0008               	return
  3643  0D31                     __end_of_ReadTSensor:	
  3644                           
  3645                           	psect	text15
  3646  0731                     __ptext15:	
  3647 ;; *************** function _ReadIO *****************
  3648 ;; Defined at:
  3649 ;;		line 1275 in file "main.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  Pin             1    wreg     unsigned char 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  Pin             1    8[BANK0 ] unsigned char 
  3654 ;;  temp            2    0        unsigned short 
  3655 ;;  ioconfig        1    7[BANK0 ] unsigned char 
  3656 ;;  _tempb          1    0        unsigned char 
  3657 ;;  mask            1    0        unsigned char 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;                  2    3[BANK0 ] unsigned short 
  3660 ;; Registers used:
  3661 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3667 ;;      Params:         0       2       0       0       0       0       0
  3668 ;;      Locals:         0       2       0       0       0       0       0
  3669 ;;      Temps:          0       2       0       0       0       0       0
  3670 ;;      Totals:         0       6       0       0       0       0       0
  3671 ;;Total ram usage:        6 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    2
  3674 ;; This function calls:
  3675 ;;		_ReadA2D
  3676 ;;		_ReadIOPin
  3677 ;;		_SetAnalogConfig
  3678 ;; This function is called by:
  3679 ;;		_ReadCurrentRegister
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           
  3684                           ;psect for function _ReadIO
  3685  0731                     _ReadIO:	
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _ReadIO: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3689                           ;ReadIO@Pin stored from wreg
  3690  0731  0020               	movlb	0	; select bank0
  3691  0732  00D6               	movwf	ReadIO@Pin
  3692                           
  3693                           ;main.c: 1278: BadIO=0;
  3694  0733  01C2               	clrf	_BadIO
  3695                           
  3696                           ;main.c: 1279: unsigned char ioconfig = Setting.IOConfig[Pin];
  3697  0734  0856               	movf	ReadIO@Pin,w
  3698  0735  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  3699  0736  0086               	movwf	6
  3700  0737  0187               	clrf	7
  3701  0738  0801               	movf	1,w
  3702  0739  00D3               	movwf	??_ReadIO
  3703  073A  0853               	movf	??_ReadIO,w
  3704  073B  00D5               	movwf	ReadIO@ioconfig
  3705                           
  3706                           ;main.c: 1280: unsigned short temp;
  3707                           ;main.c: 1281: unsigned char mask;
  3708                           ;main.c: 1282: unsigned char _tempb;
  3709                           ;main.c: 1284: if(ioconfig <= 3)
  3710  073C  3004               	movlw	4
  3711  073D  0255               	subwf	ReadIO@ioconfig,w
  3712  073E  1803               	skipnc
  3713  073F  2F55               	goto	l3971
  3714                           
  3715                           ;main.c: 1285: {
  3716                           ;main.c: 1286: SetAnalogConfig(Pin);
  3717  0740  0856               	movf	ReadIO@Pin,w
  3718  0741  3186  267D  3187   	fcall	_SetAnalogConfig
  3719                           
  3720                           ;main.c: 1287: return ReadA2D(CSMASK[Pin]);
  3721  0744  0020               	movlb	0	; select bank0
  3722  0745  0856               	movf	ReadIO@Pin,w
  3723  0746  3E20               	addlw	low (_CSMASK| (0+32768))
  3724  0747  0084               	movwf	4
  3725  0748  3088               	movlw	high (_CSMASK| (0+32768))
  3726  0749  1803               	skipnc
  3727  074A  3E01               	addlw	1
  3728  074B  0085               	movwf	5
  3729  074C  0800               	movf	0,w	;code access
  3730  074D  3186  26BB         	fcall	_ReadA2D
  3731  074F  0873               	movf	?_ReadA2D+1,w
  3732  0750  0020               	movlb	0	; select bank0
  3733  0751  00D2               	movwf	?_ReadIO+1
  3734  0752  0872               	movf	?_ReadA2D,w
  3735  0753  00D1               	movwf	?_ReadIO
  3736  0754  0008               	return
  3737  0755                     l3971:	
  3738                           
  3739                           ;main.c: 1288: }
  3740                           ;main.c: 1291: if(ioconfig <= 6)
  3741  0755  3007               	movlw	7
  3742  0756  0255               	subwf	ReadIO@ioconfig,w
  3743  0757  1803               	skipnc
  3744  0758  2F64               	goto	l3979
  3745                           
  3746                           ;main.c: 1292: {
  3747                           ;main.c: 1293: return ReadIOPin(Pin);
  3748  0759  0856               	movf	ReadIO@Pin,w
  3749  075A  318E  2679         	fcall	_ReadIOPin
  3750  075C  0020               	movlb	0	; select bank0
  3751  075D  00D3               	movwf	??_ReadIO
  3752  075E  01D4               	clrf	??_ReadIO+1
  3753  075F  0853               	movf	??_ReadIO,w
  3754  0760  00D1               	movwf	?_ReadIO
  3755  0761  0854               	movf	??_ReadIO+1,w
  3756  0762  00D2               	movwf	?_ReadIO+1
  3757                           
  3758                           ;main.c: 1294: }
  3759  0763  0008               	return
  3760  0764                     l3979:	
  3761                           
  3762                           ;main.c: 1295: else
  3763                           ;main.c: 1296: return(0xffff);
  3764  0764  30FF               	movlw	255
  3765  0765  00D1               	movwf	?_ReadIO
  3766  0766  30FF               	movlw	255
  3767  0767  00D2               	movwf	?_ReadIO+1
  3768  0768  0008               	return
  3769  0769                     __end_of_ReadIO:	
  3770                           
  3771                           	psect	text16
  3772  0E79                     __ptext16:	
  3773 ;; *************** function _ReadIOPin *****************
  3774 ;; Defined at:
  3775 ;;		line 159 in file "IOCycle.c"
  3776 ;; Parameters:    Size  Location     Type
  3777 ;;  Pin             1    wreg     unsigned char 
  3778 ;; Auto vars:     Size  Location     Type
  3779 ;;  Pin             1    4[COMMON] unsigned char 
  3780 ;;  mask            1    5[COMMON] unsigned char 
  3781 ;;  _tempb          1    3[COMMON] unsigned char 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  1    wreg      unsigned char 
  3784 ;; Registers used:
  3785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3791 ;;      Params:         0       0       0       0       0       0       0
  3792 ;;      Locals:         3       0       0       0       0       0       0
  3793 ;;      Temps:          1       0       0       0       0       0       0
  3794 ;;      Totals:         4       0       0       0       0       0       0
  3795 ;;Total ram usage:        4 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    1
  3798 ;; This function calls:
  3799 ;;		Nothing
  3800 ;; This function is called by:
  3801 ;;		_ReadIO
  3802 ;; This function uses a non-reentrant model
  3803 ;;
  3804                           
  3805                           
  3806                           ;psect for function _ReadIOPin
  3807  0E79                     _ReadIOPin:	
  3808                           
  3809                           ;incstack = 0
  3810                           ; Regs used in _ReadIOPin: [wreg-fsr0h+status,2+status,0+pclath]
  3811                           ;ReadIOPin@Pin stored from wreg
  3812  0E79  00F4               	movwf	ReadIOPin@Pin
  3813                           
  3814                           ;IOCycle.c: 161: unsigned char _tempb;
  3815                           ;IOCycle.c: 162: unsigned char mask = IOMASK[Pin];
  3816  0E7A  0874               	movf	ReadIOPin@Pin,w
  3817  0E7B  3E0B               	addlw	low (_IOMASK| (0+32768))
  3818  0E7C  0084               	movwf	4
  3819  0E7D  3088               	movlw	high (_IOMASK| (0+32768))
  3820  0E7E  1803               	skipnc
  3821  0E7F  3E01               	addlw	1
  3822  0E80  0085               	movwf	5
  3823  0E81  0800               	movf	0,w	;code access
  3824  0E82  00F2               	movwf	??_ReadIOPin
  3825  0E83  0872               	movf	??_ReadIOPin,w
  3826  0E84  00F5               	movwf	ReadIOPin@mask
  3827                           
  3828                           ;IOCycle.c: 163: if(Pin<5)
  3829  0E85  3005               	movlw	5
  3830  0E86  0274               	subwf	ReadIOPin@Pin,w
  3831  0E87  1803               	skipnc
  3832  0E88  2E8C               	goto	l2549
  3833                           
  3834                           ;IOCycle.c: 164: _tempb = (unsigned char) (PORTB & mask);
  3835  0E89  0020               	movlb	0	; select bank0
  3836  0E8A  080D               	movf	13,w	;volatile
  3837  0E8B  2E8E               	goto	L8
  3838  0E8C                     l2549:	
  3839                           
  3840                           ;IOCycle.c: 165: else
  3841                           ;IOCycle.c: 166: _tempb = (unsigned char) (PORTA & mask);
  3842  0E8C  0020               	movlb	0	; select bank0
  3843  0E8D  080C               	movf	12,w	;volatile
  3844  0E8E                     L8:	
  3845  0E8E  0575               	andwf	ReadIOPin@mask,w
  3846  0E8F  00F2               	movwf	??_ReadIOPin
  3847  0E90  0872               	movf	??_ReadIOPin,w
  3848  0E91  00F3               	movwf	ReadIOPin@_tempb
  3849                           
  3850                           ;IOCycle.c: 167: if(_tempb==0)
  3851  0E92  0873               	movf	ReadIOPin@_tempb,w
  3852  0E93  1D03               	btfss	3,2
  3853  0E94  2E97               	goto	l2555
  3854                           
  3855                           ;IOCycle.c: 168: return 0;
  3856  0E95  3000               	movlw	0
  3857  0E96  0008               	return
  3858  0E97                     l2555:	
  3859                           
  3860                           ;IOCycle.c: 169: return 1;
  3861  0E97  3001               	movlw	1
  3862  0E98  0008               	return
  3863  0E99                     __end_of_ReadIOPin:	
  3864                           
  3865                           	psect	text17
  3866  06BB                     __ptext17:	
  3867 ;; *************** function _ReadA2D *****************
  3868 ;; Defined at:
  3869 ;;		line 616 in file "main.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  channel         1    wreg     unsigned char 
  3872 ;; Auto vars:     Size  Location     Type
  3873 ;;  channel         1    0[BANK0 ] unsigned char 
  3874 ;;  value           2    1[BANK0 ] struct .
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  2    2[COMMON] unsigned short 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  3884 ;;      Params:         2       0       0       0       0       0       0
  3885 ;;      Locals:         0       3       0       0       0       0       0
  3886 ;;      Temps:          1       0       0       0       0       0       0
  3887 ;;      Totals:         3       3       0       0       0       0       0
  3888 ;;Total ram usage:        6 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    1
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		_ReadIO
  3895 ;;		_ReadVRef
  3896 ;;		_ReadTSensor
  3897 ;; This function uses a non-reentrant model
  3898 ;;
  3899                           
  3900                           
  3901                           ;psect for function _ReadA2D
  3902  06BB                     _ReadA2D:	
  3903                           
  3904                           ;incstack = 0
  3905                           ; Regs used in _ReadA2D: [wreg+status,2+status,0]
  3906                           ;ReadA2D@channel stored from wreg
  3907  06BB  0020               	movlb	0	; select bank0
  3908  06BC  00CE               	movwf	ReadA2D@channel
  3909                           
  3910                           ;main.c: 619: ByteShortUnion value;
  3911                           ;main.c: 620: ADIE=0;
  3912  06BD  0021               	movlb	1	; select bank1
  3913  06BE  1311               	bcf	17,6	;volatile
  3914                           
  3915                           ;main.c: 621: ADIF=0;
  3916  06BF  0020               	movlb	0	; select bank0
  3917  06C0  1311               	bcf	17,6	;volatile
  3918                           
  3919                           ;main.c: 622: ADON=1;
  3920  06C1  0021               	movlb	1	; select bank1
  3921  06C2  141D               	bsf	29,0	;volatile
  3922                           
  3923                           ;main.c: 623: ADCON0bits.ADON=1;
  3924  06C3  141D               	bsf	29,0	;volatile
  3925                           
  3926                           ;main.c: 624: ADCON0bits.CHS=channel;
  3927  06C4  0020               	movlb	0	; select bank0
  3928  06C5  084E               	movf	ReadA2D@channel,w
  3929  06C6  00F4               	movwf	??_ReadA2D
  3930  06C7  0DF4               	rlf	??_ReadA2D,f
  3931  06C8  0DF4               	rlf	??_ReadA2D,f
  3932  06C9  0021               	movlb	1	; select bank1
  3933  06CA  081D               	movf	29,w	;volatile
  3934  06CB  0674               	xorwf	??_ReadA2D,w
  3935  06CC  3983               	andlw	-125
  3936  06CD  0674               	xorwf	??_ReadA2D,w
  3937  06CE  009D               	movwf	29	;volatile
  3938                           
  3939                           ;main.c: 625: _delay((unsigned long)((1)*(32000000/4000.0)));
  3940  06CF  300B               	movlw	11
  3941  06D0  00F4               	movwf	??_ReadA2D
  3942  06D1  3062               	movlw	98
  3943  06D2                     u4647:	
  3944  06D2  0B89               	decfsz	9,f
  3945  06D3  2ED2               	goto	u4647
  3946  06D4  0BF4               	decfsz	??_ReadA2D,f
  3947  06D5  2ED2               	goto	u4647
  3948  06D6  3200               	nop2
  3949                           
  3950                           ;main.c: 626: ADCON0bits.ADGO=1;
  3951  06D7  0021               	movlb	1	; select bank1
  3952  06D8  149D               	bsf	29,1	;volatile
  3953  06D9                     l461:	
  3954                           ;main.c: 627: while(ADCON0bits.ADGO==1);
  3955                           
  3956  06D9  189D               	btfsc	29,1	;volatile
  3957  06DA  2ED9               	goto	l461
  3958                           
  3959                           ;main.c: 628: _delay((unsigned long)((1)*(32000000/4000.0)));
  3960  06DB  300B               	movlw	11
  3961  06DC  00F4               	movwf	??_ReadA2D
  3962  06DD  3062               	movlw	98
  3963  06DE                     u4657:	
  3964  06DE  0B89               	decfsz	9,f
  3965  06DF  2EDE               	goto	u4657
  3966  06E0  0BF4               	decfsz	??_ReadA2D,f
  3967  06E1  2EDE               	goto	u4657
  3968  06E2  3200               	nop2
  3969                           
  3970                           ;main.c: 629: ADCON0bits.ADGO=1;
  3971  06E3  0021               	movlb	1	; select bank1
  3972  06E4  149D               	bsf	29,1	;volatile
  3973  06E5                     l464:	
  3974                           ;main.c: 630: while(ADCON0bits.ADGO==1);
  3975                           
  3976  06E5  189D               	btfsc	29,1	;volatile
  3977  06E6  2EE5               	goto	l464
  3978                           
  3979                           ;main.c: 631: value.BYTE[1]=ADRESH;
  3980  06E7  081C               	movf	28,w	;volatile
  3981  06E8  00F4               	movwf	??_ReadA2D
  3982  06E9  0874               	movf	??_ReadA2D,w
  3983  06EA  0020               	movlb	0	; select bank0
  3984  06EB  00D0               	movwf	ReadA2D@value+1
  3985                           
  3986                           ;main.c: 632: value.BYTE[0]=ADRESL;
  3987  06EC  0021               	movlb	1	; select bank1
  3988  06ED  081B               	movf	27,w	;volatile
  3989  06EE  00F4               	movwf	??_ReadA2D
  3990  06EF  0874               	movf	??_ReadA2D,w
  3991  06F0  0020               	movlb	0	; select bank0
  3992  06F1  00CF               	movwf	ReadA2D@value
  3993                           
  3994                           ;main.c: 633: return value.USHORT;
  3995  06F2  0850               	movf	ReadA2D@value+1,w
  3996  06F3  00F3               	movwf	?_ReadA2D+1
  3997  06F4  084F               	movf	ReadA2D@value,w
  3998  06F5  00F2               	movwf	?_ReadA2D
  3999  06F6  0008               	return
  4000  06F7                     __end_of_ReadA2D:	
  4001                           
  4002                           	psect	text18
  4003  0F51                     __ptext18:	
  4004 ;; *************** function _ReadAllCoils *****************
  4005 ;; Defined at:
  4006 ;;		line 1339 in file "main.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  stemp           2    2[BANK0 ] unsigned short 
  4011 ;;  loop            1    4[BANK0 ] unsigned char 
  4012 ;; Return value:  Size  Location     Type
  4013 ;;                  2    5[COMMON] unsigned short 
  4014 ;; Registers used:
  4015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4016 ;; Tracked objects:
  4017 ;;		On entry : 0/0
  4018 ;;		On exit  : 0/0
  4019 ;;		Unchanged: 0/0
  4020 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4021 ;;      Params:         2       0       0       0       0       0       0
  4022 ;;      Locals:         0       3       0       0       0       0       0
  4023 ;;      Temps:          0       2       0       0       0       0       0
  4024 ;;      Totals:         2       5       0       0       0       0       0
  4025 ;;Total ram usage:        7 bytes
  4026 ;; Hardware stack levels used:    1
  4027 ;; Hardware stack levels required when called:    2
  4028 ;; This function calls:
  4029 ;;		_GetInputPin
  4030 ;; This function is called by:
  4031 ;;		_ReadCurrentRegister
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           
  4036                           ;psect for function _ReadAllCoils
  4037  0F51                     _ReadAllCoils:	
  4038                           
  4039                           ;main.c: 1341: unsigned short stemp=0;
  4040                           
  4041                           ;incstack = 0
  4042                           ; Regs used in _ReadAllCoils: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4043  0F51  0020               	movlb	0	; select bank0
  4044  0F52  01D0               	clrf	ReadAllCoils@stemp
  4045  0F53  01D1               	clrf	ReadAllCoils@stemp+1
  4046                           
  4047                           ;main.c: 1342: unsigned char loop;
  4048                           ;main.c: 1344: for(loop=0;loop<10;loop++)
  4049  0F54  01D2               	clrf	ReadAllCoils@loop
  4050  0F55  300A               	movlw	10
  4051  0F56  0252               	subwf	ReadAllCoils@loop,w
  4052  0F57  1803               	btfsc	3,0
  4053  0F58  2F75               	goto	l4011
  4054  0F59                     l4003:	
  4055                           
  4056                           ;main.c: 1345: {
  4057                           ;main.c: 1346: stemp *=2;
  4058  0F59  3001               	movlw	1
  4059  0F5A                     u3955:	
  4060  0F5A  35D0               	lslf	ReadAllCoils@stemp,f
  4061  0F5B  0DD1               	rlf	ReadAllCoils@stemp+1,f
  4062  0F5C  0B89               	decfsz	9,f
  4063  0F5D  2F5A               	goto	u3955
  4064                           
  4065                           ;main.c: 1347: stemp |= (unsigned short) GetInputPin( (unsigned char) ((10 -1)-loop));
  4066  0F5E  0852               	movf	ReadAllCoils@loop,w
  4067  0F5F  3E01               	addlw	1
  4068  0F60  3AFF               	xorlw	255
  4069  0F61  3E01               	addlw	1
  4070  0F62  3E0A               	addlw	10
  4071  0F63  318E  265A  318F   	fcall	_GetInputPin
  4072  0F66  0020               	movlb	0	; select bank0
  4073  0F67  00CE               	movwf	??_ReadAllCoils
  4074  0F68  01CF               	clrf	??_ReadAllCoils+1
  4075  0F69  084E               	movf	??_ReadAllCoils,w
  4076  0F6A  04D0               	iorwf	ReadAllCoils@stemp,f
  4077  0F6B  084F               	movf	??_ReadAllCoils+1,w
  4078  0F6C  04D1               	iorwf	ReadAllCoils@stemp+1,f
  4079  0F6D  3001               	movlw	1
  4080  0F6E  00CE               	movwf	??_ReadAllCoils
  4081  0F6F  084E               	movf	??_ReadAllCoils,w
  4082  0F70  07D2               	addwf	ReadAllCoils@loop,f
  4083  0F71  300A               	movlw	10
  4084  0F72  0252               	subwf	ReadAllCoils@loop,w
  4085  0F73  1C03               	skipc
  4086  0F74  2F59               	goto	l4003
  4087  0F75                     l4011:	
  4088                           
  4089                           ;main.c: 1348: }
  4090                           ;main.c: 1349: return stemp;
  4091  0F75  0851               	movf	ReadAllCoils@stemp+1,w
  4092  0F76  00F6               	movwf	?_ReadAllCoils+1
  4093  0F77  0850               	movf	ReadAllCoils@stemp,w
  4094  0F78  00F5               	movwf	?_ReadAllCoils
  4095  0F79  0008               	return
  4096  0F7A                     __end_of_ReadAllCoils:	
  4097                           
  4098                           	psect	text19
  4099  0E5A                     __ptext19:	
  4100 ;; *************** function _GetInputPin *****************
  4101 ;; Defined at:
  4102 ;;		line 1327 in file "main.c"
  4103 ;; Parameters:    Size  Location     Type
  4104 ;;  thePin          1    wreg     unsigned char 
  4105 ;; Auto vars:     Size  Location     Type
  4106 ;;  thePin          1    4[COMMON] unsigned char 
  4107 ;;  _tmp            1    3[COMMON] unsigned char 
  4108 ;; Return value:  Size  Location     Type
  4109 ;;                  1    wreg      unsigned char 
  4110 ;; Registers used:
  4111 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4112 ;; Tracked objects:
  4113 ;;		On entry : 0/0
  4114 ;;		On exit  : 0/0
  4115 ;;		Unchanged: 0/0
  4116 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4117 ;;      Params:         0       0       0       0       0       0       0
  4118 ;;      Locals:         2       0       0       0       0       0       0
  4119 ;;      Temps:          1       0       0       0       0       0       0
  4120 ;;      Totals:         3       0       0       0       0       0       0
  4121 ;;Total ram usage:        3 bytes
  4122 ;; Hardware stack levels used:    1
  4123 ;; Hardware stack levels required when called:    1
  4124 ;; This function calls:
  4125 ;;		Nothing
  4126 ;; This function is called by:
  4127 ;;		_ReadAllCoils
  4128 ;;		_ReadInputStatus
  4129 ;; This function uses a non-reentrant model
  4130 ;;
  4131                           
  4132                           
  4133                           ;psect for function _GetInputPin
  4134  0E5A                     _GetInputPin:	
  4135                           
  4136                           ;incstack = 0
  4137                           ; Regs used in _GetInputPin: [wreg-fsr0h+status,2+status,0+pclath]
  4138                           ;GetInputPin@thePin stored from wreg
  4139  0E5A  00F4               	movwf	GetInputPin@thePin
  4140                           
  4141                           ;main.c: 1329: unsigned char _tmp;
  4142                           ;main.c: 1331: if(thePin < 5)
  4143  0E5B  3005               	movlw	5
  4144  0E5C  0274               	subwf	GetInputPin@thePin,w
  4145  0E5D  1803               	skipnc
  4146  0E5E  2E62               	goto	l2723
  4147                           
  4148                           ;main.c: 1332: _tmp = PORTB;
  4149  0E5F  0020               	movlb	0	; select bank0
  4150  0E60  080D               	movf	13,w	;volatile
  4151  0E61  2E64               	goto	L9
  4152  0E62                     l2723:	
  4153                           
  4154                           ;main.c: 1333: else
  4155                           ;main.c: 1334: _tmp = PORTA;
  4156  0E62  0020               	movlb	0	; select bank0
  4157  0E63  080C               	movf	12,w	;volatile
  4158  0E64                     L9:	
  4159  0E64  00F2               	movwf	??_GetInputPin
  4160  0E65  0872               	movf	??_GetInputPin,w
  4161  0E66  00F3               	movwf	GetInputPin@_tmp
  4162                           
  4163                           ;main.c: 1335: _tmp &= IOMASK[thePin];
  4164  0E67  0874               	movf	GetInputPin@thePin,w
  4165  0E68  3E0B               	addlw	low (_IOMASK| (0+32768))
  4166  0E69  0084               	movwf	4
  4167  0E6A  3088               	movlw	high (_IOMASK| (0+32768))
  4168  0E6B  1803               	skipnc
  4169  0E6C  3E01               	addlw	1
  4170  0E6D  0085               	movwf	5
  4171  0E6E  0800               	movf	0,w	;code access
  4172  0E6F  00F2               	movwf	??_GetInputPin
  4173  0E70  0872               	movf	??_GetInputPin,w
  4174  0E71  05F3               	andwf	GetInputPin@_tmp,f
  4175                           
  4176                           ;main.c: 1336: return ( (unsigned char) (_tmp==0 ?0 : 1));
  4177  0E72  0873               	movf	GetInputPin@_tmp,w
  4178  0E73  1903               	btfsc	3,2
  4179  0E74  2E77               	goto	u2100
  4180  0E75  3001               	movlw	1
  4181  0E76  0008               	return
  4182  0E77                     u2100:	
  4183  0E77  3000               	movlw	0
  4184  0E78  0008               	return
  4185  0E79                     __end_of_GetInputPin:	
  4186                           
  4187                           	psect	text20
  4188  0D31                     __ptext20:	
  4189 ;; *************** function _MultipleRegister *****************
  4190 ;; Defined at:
  4191 ;;		line 1319 in file "main.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  _Address        1    wreg     unsigned char 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  _Address        1    3[COMMON] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      unsigned char 
  4198 ;; Registers used:
  4199 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4205 ;;      Params:         0       0       0       0       0       0       0
  4206 ;;      Locals:         1       0       0       0       0       0       0
  4207 ;;      Temps:          1       0       0       0       0       0       0
  4208 ;;      Totals:         2       0       0       0       0       0       0
  4209 ;;Total ram usage:        2 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:    1
  4212 ;; This function calls:
  4213 ;;		Nothing
  4214 ;; This function is called by:
  4215 ;;		_ReadCurrentRegister
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           
  4220                           ;psect for function _MultipleRegister
  4221  0D31                     _MultipleRegister:	
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _MultipleRegister: [wreg+fsr1l+fsr1h+status,2+status,0]
  4225                           ;MultipleRegister@_Address stored from wreg
  4226  0D31  00F3               	movwf	MultipleRegister@_Address
  4227                           
  4228                           ;main.c: 1321: if((Setting.IOConfig[_Address] & (12)) == 12)
  4229  0D32  0873               	movf	MultipleRegister@_Address,w
  4230  0D33  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  4231  0D34  0086               	movwf	6
  4232  0D35  0187               	clrf	7
  4233  0D36  300C               	movlw	12
  4234  0D37  0501               	andwf	1,w
  4235  0D38  00F2               	movwf	??_MultipleRegister
  4236  0D39  300C               	movlw	12
  4237  0D3A  0672               	xorwf	??_MultipleRegister,w
  4238  0D3B  1D03               	btfss	3,2
  4239  0D3C  2D3F               	goto	l2937
  4240                           
  4241                           ;main.c: 1322: return 1;
  4242  0D3D  3001               	movlw	1
  4243  0D3E  0008               	return
  4244  0D3F                     l2937:	
  4245                           
  4246                           ;main.c: 1323: return 0;
  4247  0D3F  3000               	movlw	0
  4248  0D40  0008               	return
  4249  0D41                     __end_of_MultipleRegister:	
  4250                           
  4251                           	psect	text21
  4252  0398                     __ptext21:	
  4253 ;; *************** function _PresetSingleRegister *****************
  4254 ;; Defined at:
  4255 ;;		line 1509 in file "main.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;		None
  4258 ;; Auto vars:     Size  Location     Type
  4259 ;;  temp            1   14[BANK0 ] unsigned char 
  4260 ;;  oldConfig       1   13[BANK0 ] unsigned char 
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4270 ;;      Params:         0       0       0       0       0       0       0
  4271 ;;      Locals:         0       2       0       0       0       0       0
  4272 ;;      Temps:          0       1       0       0       0       0       0
  4273 ;;      Totals:         0       3       0       0       0       0       0
  4274 ;;Total ram usage:        3 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    5
  4277 ;; This function calls:
  4278 ;;		_SaveSetting
  4279 ;;		_SendFrameError
  4280 ;;		_SendPresetFrame
  4281 ;;		_SetIOConfig
  4282 ;;		_WriteAllCoils
  4283 ;; This function is called by:
  4284 ;;		_ExecuteCommand
  4285 ;; This function uses a non-reentrant model
  4286 ;;
  4287                           
  4288                           
  4289                           ;psect for function _PresetSingleRegister
  4290  0398                     _PresetSingleRegister:	
  4291                           
  4292                           ;main.c: 1511: unsigned char oldConfig;
  4293                           ;main.c: 1512: unsigned char temp;
  4294                           ;main.c: 1514: if(ModbusAddress == 0x1002)
  4295                           
  4296                           ;incstack = 0
  4297                           ; Regs used in _PresetSingleRegister: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4298  0398  3002               	movlw	2
  4299  0399  0020               	movlb	0	; select bank0
  4300  039A  0626               	xorwf	_ModbusAddress,w
  4301  039B  3010               	movlw	16
  4302  039C  1903               	skipnz
  4303  039D  0627               	xorwf	_ModbusAddress+1,w
  4304  039E  1D03               	btfss	3,2
  4305  039F  2BA3               	goto	l4121
  4306                           
  4307                           ;main.c: 1515: {
  4308                           ;main.c: 1516: WriteAllCoils();
  4309  03A0  318E  26E0         	fcall	_WriteAllCoils
  4310                           
  4311                           ;main.c: 1517: }
  4312  03A2  0008               	return
  4313  03A3                     l4121:	
  4314                           
  4315                           ;main.c: 1518: else if(ModbusAddress == 0x1ff)
  4316  03A3  0020               	movlb	0	; select bank0
  4317  03A4  0A26               	incf	_ModbusAddress,w
  4318  03A5  1D03               	skipz
  4319  03A6  2BB9               	goto	l4127
  4320  03A7  0327               	decf	_ModbusAddress+1,w
  4321  03A8  1D03               	btfss	3,2
  4322  03A9  2BB9               	goto	l4127
  4323                           
  4324                           ;main.c: 1519: {
  4325                           ;main.c: 1520: EnableConfigChange= (ModbusData == 0x5678);
  4326  03AA  3078               	movlw	120
  4327  03AB  0624               	xorwf	_ModbusData,w
  4328  03AC  3056               	movlw	86
  4329  03AD  1903               	skipnz
  4330  03AE  0625               	xorwf	_ModbusData+1,w
  4331  03AF  1D03               	btfss	3,2
  4332  03B0  2BB4               	goto	u4230
  4333  03B1  0020               	movlb	0	; select bank0
  4334  03B2  14EA               	bsf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4335  03B3  2BB6               	goto	l4125
  4336  03B4                     u4230:	
  4337  03B4  0020               	movlb	0	; select bank0
  4338  03B5  10EA               	bcf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4339  03B6                     l4125:	
  4340                           
  4341                           ;main.c: 1521: SendPresetFrame();
  4342  03B6  318D  25D5         	fcall	_SendPresetFrame
  4343                           
  4344                           ;main.c: 1522: }
  4345  03B8  0008               	return
  4346  03B9                     l4127:	
  4347                           
  4348                           ;main.c: 1523: else if(ModbusAddress == 0xAA55)
  4349  03B9  3055               	movlw	85
  4350  03BA  0020               	movlb	0	; select bank0
  4351  03BB  0626               	xorwf	_ModbusAddress,w
  4352  03BC  30AA               	movlw	170
  4353  03BD  1903               	skipnz
  4354  03BE  0627               	xorwf	_ModbusAddress+1,w
  4355  03BF  1D03               	btfss	3,2
  4356  03C0  2BD3               	goto	l4139
  4357                           
  4358                           ;main.c: 1524: {
  4359                           ;main.c: 1526: if(ModbusData == 0x1234)
  4360  03C1  3034               	movlw	52
  4361  03C2  0624               	xorwf	_ModbusData,w
  4362  03C3  3012               	movlw	18
  4363  03C4  1903               	skipnz
  4364  03C5  0625               	xorwf	_ModbusData+1,w
  4365  03C6  1D03               	btfss	3,2
  4366  03C7  2BCF               	goto	l4137
  4367                           
  4368                           ;main.c: 1527: {
  4369                           ;main.c: 1528: ForceReset=1;
  4370  03C8  146A               	bsf	_ForceReset/(0+8),_ForceReset& (0+7)
  4371                           
  4372                           ;main.c: 1529: WDTCON = 0b00010001;
  4373  03C9  3011               	movlw	17
  4374  03CA  0021               	movlb	1	; select bank1
  4375  03CB  0097               	movwf	23	;volatile
  4376                           
  4377                           ;main.c: 1530: SendPresetFrame();
  4378  03CC  318D  25D5         	fcall	_SendPresetFrame
  4379                           
  4380                           ;main.c: 1533: }
  4381  03CE  0008               	return
  4382  03CF                     l4137:	
  4383                           
  4384                           ;main.c: 1534: else
  4385                           ;main.c: 1535: SendFrameError(2);
  4386  03CF  3002               	movlw	2
  4387  03D0  318D  25BF         	fcall	_SendFrameError
  4388                           
  4389                           ;main.c: 1536: }
  4390  03D2  0008               	return
  4391  03D3                     l4139:	
  4392                           
  4393                           ;main.c: 1537: else if((ModbusAddress >=0x100) && (ModbusAddress <= 0x109))
  4394  03D3  3001               	movlw	1
  4395  03D4  0020               	movlb	0	; select bank0
  4396  03D5  0227               	subwf	_ModbusAddress+1,w
  4397  03D6  3000               	movlw	0
  4398  03D7  1903               	skipnz
  4399  03D8  0226               	subwf	_ModbusAddress,w
  4400  03D9  1C03               	skipc
  4401  03DA  2C1D               	goto	l4169
  4402  03DB  3001               	movlw	1
  4403  03DC  0227               	subwf	_ModbusAddress+1,w
  4404  03DD  300A               	movlw	10
  4405  03DE  1903               	skipnz
  4406  03DF  0226               	subwf	_ModbusAddress,w
  4407  03E0  1803               	skipnc
  4408  03E1  2C1D               	goto	l4169
  4409                           
  4410                           ;main.c: 1538: {
  4411                           ;main.c: 1539: if(EnableConfigChange)
  4412  03E2  1CEA               	btfss	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4413  03E3  2C1A               	goto	l4167
  4414                           
  4415                           ;main.c: 1540: {
  4416                           ;main.c: 1541: temp = ModbusAddress - 0x100;
  4417  03E4  0826               	movf	_ModbusAddress,w
  4418  03E5  00DA               	movwf	??_PresetSingleRegister
  4419  03E6  085A               	movf	??_PresetSingleRegister,w
  4420  03E7  00DC               	movwf	PresetSingleRegister@temp
  4421                           
  4422                           ;main.c: 1542: BadIO=0;
  4423  03E8  01C2               	clrf	_BadIO
  4424                           
  4425                           ;main.c: 1543: oldConfig=Setting.IOConfig[temp];
  4426  03E9  085C               	movf	PresetSingleRegister@temp,w
  4427  03EA  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  4428  03EB  0086               	movwf	6
  4429  03EC  0187               	clrf	7
  4430  03ED  0801               	movf	1,w
  4431  03EE  00DA               	movwf	??_PresetSingleRegister
  4432  03EF  085A               	movf	??_PresetSingleRegister,w
  4433  03F0  00DB               	movwf	PresetSingleRegister@oldConfig
  4434                           
  4435                           ;main.c: 1544: Setting.IOConfig[temp]=ModbusData;
  4436  03F1  0824               	movf	_ModbusData,w
  4437  03F2  00DA               	movwf	??_PresetSingleRegister
  4438  03F3  085C               	movf	PresetSingleRegister@temp,w
  4439  03F4  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  4440  03F5  0086               	movwf	6
  4441  03F6  0187               	clrf	7
  4442  03F7  085A               	movf	??_PresetSingleRegister,w
  4443  03F8  0081               	movwf	1
  4444                           
  4445                           ;main.c: 1545: SetIOConfig(temp);
  4446  03F9  085C               	movf	PresetSingleRegister@temp,w
  4447  03FA  3182  229E  3183   	fcall	_SetIOConfig
  4448                           
  4449                           ;main.c: 1546: if(BadIO)
  4450  03FD  0020               	movlb	0	; select bank0
  4451  03FE  0842               	movf	_BadIO,w
  4452  03FF  1903               	btfsc	3,2
  4453  0400  2C12               	goto	l4163
  4454                           
  4455                           ;main.c: 1547: {
  4456                           ;main.c: 1548: Setting.IOConfig[temp]=oldConfig;
  4457  0401  085B               	movf	PresetSingleRegister@oldConfig,w
  4458  0402  00DA               	movwf	??_PresetSingleRegister
  4459  0403  085C               	movf	PresetSingleRegister@temp,w
  4460  0404  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  4461  0405  0086               	movwf	6
  4462  0406  0187               	clrf	7
  4463  0407  085A               	movf	??_PresetSingleRegister,w
  4464  0408  0081               	movwf	1
  4465                           
  4466                           ;main.c: 1549: SetIOConfig(temp);
  4467  0409  085C               	movf	PresetSingleRegister@temp,w
  4468  040A  3182  229E  3183   	fcall	_SetIOConfig
  4469                           
  4470                           ;main.c: 1550: SendFrameError(2);
  4471  040D  3002               	movlw	2
  4472  040E  318D  25BF  3183   	fcall	_SendFrameError
  4473                           
  4474                           ;main.c: 1551: }
  4475  0411  2C17               	goto	l4165
  4476  0412                     l4163:	
  4477                           
  4478                           ;main.c: 1552: else
  4479                           ;main.c: 1553: {
  4480                           ;main.c: 1554: SendPresetFrame();
  4481  0412  318D  25D5  3183   	fcall	_SendPresetFrame
  4482                           
  4483                           ;main.c: 1555: SaveSetting();
  4484  0415  318E  263B         	fcall	_SaveSetting
  4485  0417                     l4165:	
  4486                           
  4487                           ;main.c: 1556: }
  4488                           ;main.c: 1557: EnableConfigChange=1;
  4489  0417  0020               	movlb	0	; select bank0
  4490  0418  14EA               	bsf	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4491                           
  4492                           ;main.c: 1558: }
  4493  0419  0008               	return
  4494  041A                     l4167:	
  4495                           
  4496                           ;main.c: 1559: else
  4497                           ;main.c: 1560: SendPresetFrame();
  4498  041A  318D  25D5         	fcall	_SendPresetFrame
  4499                           
  4500                           ;main.c: 1561: }
  4501  041C  0008               	return
  4502  041D                     l4169:	
  4503                           
  4504                           ;main.c: 1583: else if(ModbusAddress == 160)
  4505  041D  30A0               	movlw	160
  4506  041E  0020               	movlb	0	; select bank0
  4507  041F  0626               	xorwf	_ModbusAddress,w
  4508  0420  0427               	iorwf	_ModbusAddress+1,w
  4509  0421  1D03               	btfss	3,2
  4510  0422  2C30               	goto	l4179
  4511                           
  4512                           ;main.c: 1584: {
  4513                           ;main.c: 1585: if(EnableConfigChange)
  4514  0423  1CEA               	btfss	_EnableConfigChange/(0+8),_EnableConfigChange& (0+7)
  4515  0424  2C2D               	goto	l4177
  4516                           
  4517                           ;main.c: 1586: {
  4518                           ;main.c: 1587: Setting.SlaveAddress=ModbusData;
  4519  0425  0824               	movf	_ModbusData,w
  4520  0426  00DA               	movwf	??_PresetSingleRegister
  4521  0427  085A               	movf	??_PresetSingleRegister,w
  4522  0428  0021               	movlb	1	; select bank1
  4523  0429  00E0               	movwf	(_Setting^(0+128)+10)
  4524                           
  4525                           ;main.c: 1588: SaveSetting();
  4526  042A  318E  263B  3183   	fcall	_SaveSetting
  4527  042D                     l4177:	
  4528                           
  4529                           ;main.c: 1589: }
  4530                           ;main.c: 1590: SendPresetFrame();
  4531  042D  318D  25D5         	fcall	_SendPresetFrame
  4532                           
  4533                           ;main.c: 1591: }
  4534  042F  0008               	return
  4535  0430                     l4179:	
  4536                           
  4537                           ;main.c: 1592: else
  4538                           ;main.c: 1593: SendFrameError( 2);
  4539  0430  3002               	movlw	2
  4540  0431  318D  25BF         	fcall	_SendFrameError
  4541  0433  0008               	return
  4542  0434                     __end_of_PresetSingleRegister:	
  4543                           
  4544                           	psect	text22
  4545  0EE0                     __ptext22:	
  4546 ;; *************** function _WriteAllCoils *****************
  4547 ;; Defined at:
  4548 ;;		line 1472 in file "main.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;		None
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  stemp           2    9[BANK0 ] unsigned short 
  4553 ;;  loop            1   11[BANK0 ] unsigned char 
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      void 
  4556 ;; Registers used:
  4557 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4563 ;;      Params:         0       0       0       0       0       0       0
  4564 ;;      Locals:         0       3       0       0       0       0       0
  4565 ;;      Temps:          0       1       0       0       0       0       0
  4566 ;;      Totals:         0       4       0       0       0       0       0
  4567 ;;Total ram usage:        4 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    4
  4570 ;; This function calls:
  4571 ;;		_SendPresetFrame
  4572 ;;		_SetSingleCoil
  4573 ;; This function is called by:
  4574 ;;		_PresetSingleRegister
  4575 ;; This function uses a non-reentrant model
  4576 ;;
  4577                           
  4578                           
  4579                           ;psect for function _WriteAllCoils
  4580  0EE0                     _WriteAllCoils:	
  4581                           
  4582                           ;main.c: 1474: unsigned char loop;
  4583                           ;main.c: 1475: unsigned short stemp;
  4584                           ;main.c: 1477: stemp= ModbusData;
  4585                           
  4586                           ;incstack = 0
  4587                           ; Regs used in _WriteAllCoils: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4588  0EE0  0020               	movlb	0	; select bank0
  4589  0EE1  0825               	movf	_ModbusData+1,w
  4590  0EE2  00D8               	movwf	WriteAllCoils@stemp+1
  4591  0EE3  0824               	movf	_ModbusData,w
  4592  0EE4  00D7               	movwf	WriteAllCoils@stemp
  4593                           
  4594                           ;main.c: 1478: for(loop=0;loop<10;loop++)
  4595  0EE5  01D9               	clrf	WriteAllCoils@loop
  4596  0EE6  300A               	movlw	10
  4597  0EE7  0259               	subwf	WriteAllCoils@loop,w
  4598  0EE8  1803               	btfsc	3,0
  4599  0EE9  2F01               	goto	l4031
  4600  0EEA                     l4023:	
  4601                           
  4602                           ;main.c: 1479: {
  4603                           ;main.c: 1480: SetSingleCoil(loop,(stemp & 1));
  4604  0EEA  0857               	movf	WriteAllCoils@stemp,w
  4605  0EEB  3901               	andlw	1
  4606  0EEC  00D6               	movwf	??_WriteAllCoils
  4607  0EED  0856               	movf	??_WriteAllCoils,w
  4608  0EEE  00CE               	movwf	SetSingleCoil@value
  4609  0EEF  0859               	movf	WriteAllCoils@loop,w
  4610  0EF0  318D  2573  318E   	fcall	_SetSingleCoil
  4611                           
  4612                           ;main.c: 1481: stemp/=2;
  4613  0EF3  3001               	movlw	1
  4614  0EF4  0020               	movlb	0	; select bank0
  4615  0EF5                     u3985:	
  4616  0EF5  36D8               	lsrf	WriteAllCoils@stemp+1,f
  4617  0EF6  0CD7               	rrf	WriteAllCoils@stemp,f
  4618  0EF7  0B89               	decfsz	9,f
  4619  0EF8  2EF5               	goto	u3985
  4620  0EF9  3001               	movlw	1
  4621  0EFA  00D6               	movwf	??_WriteAllCoils
  4622  0EFB  0856               	movf	??_WriteAllCoils,w
  4623  0EFC  07D9               	addwf	WriteAllCoils@loop,f
  4624  0EFD  300A               	movlw	10
  4625  0EFE  0259               	subwf	WriteAllCoils@loop,w
  4626  0EFF  1C03               	skipc
  4627  0F00  2EEA               	goto	l4023
  4628  0F01                     l4031:	
  4629                           
  4630                           ;main.c: 1482: }
  4631                           ;main.c: 1483: SendPresetFrame();
  4632  0F01  318D  25D5         	fcall	_SendPresetFrame
  4633  0F03  0008               	return
  4634  0F04                     __end_of_WriteAllCoils:	
  4635                           
  4636                           	psect	text23
  4637  029E                     __ptext23:	
  4638 ;; *************** function _SetIOConfig *****************
  4639 ;; Defined at:
  4640 ;;		line 494 in file "main.c"
  4641 ;; Parameters:    Size  Location     Type
  4642 ;;  Pin             1    wreg     unsigned char 
  4643 ;; Auto vars:     Size  Location     Type
  4644 ;;  Pin             1    1[BANK0 ] unsigned char 
  4645 ;;  ioconfig        1    0[BANK0 ] struct .
  4646 ;;  loop            1    0        unsigned char 
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  1    wreg      void 
  4649 ;; Registers used:
  4650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  4656 ;;      Params:         0       0       0       0       0       0       0
  4657 ;;      Locals:         0       2       0       0       0       0       0
  4658 ;;      Temps:          1       0       0       0       0       0       0
  4659 ;;      Totals:         1       2       0       0       0       0       0
  4660 ;;Total ram usage:        3 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    2
  4663 ;; This function calls:
  4664 ;;		_ResetIOCycle
  4665 ;;		_SetAnalogConfig
  4666 ;;		_SetIOChange
  4667 ;;		_SetInputConfig
  4668 ;;		_SetOutputConfig
  4669 ;;		_SetPullUp
  4670 ;;		_SetTimeCaptureConfig
  4671 ;;		___bmul
  4672 ;; This function is called by:
  4673 ;;		_PresetSingleRegister
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           
  4679                           ;psect for function _SetIOConfig
  4680  029E                     _SetIOConfig:	
  4681                           
  4682                           ;incstack = 0
  4683                           ; Regs used in _SetIOConfig: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4684                           ;SetIOConfig@Pin stored from wreg
  4685  029E  0020               	movlb	0	; select bank0
  4686  029F  00CF               	movwf	SetIOConfig@Pin
  4687                           
  4688                           ;main.c: 496: unsigned char loop;
  4689                           ;main.c: 497: ConfigUnion ioconfig;
  4690                           ;main.c: 499: const unsigned char ValidCCP[10]={1,0,0,1,0,0,0,0,1,1};
  4691                           ;main.c: 501: ioconfig.Config = Setting.IOConfig[Pin];
  4692  02A0  084F               	movf	SetIOConfig@Pin,w
  4693  02A1  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  4694  02A2  0086               	movwf	6
  4695  02A3  0187               	clrf	7
  4696  02A4  0801               	movf	1,w
  4697  02A5  00F6               	movwf	??_SetIOConfig
  4698  02A6  0876               	movf	??_SetIOConfig,w
  4699  02A7  00CE               	movwf	SetIOConfig@ioconfig
  4700                           
  4701                           ;main.c: 502: ResetIOCycle();
  4702  02A8  318D  2585  3182   	fcall	_ResetIOCycle
  4703                           
  4704                           ;main.c: 506: IOSensorData[Pin].DWORD=0;
  4705  02AB  3006               	movlw	6
  4706  02AC  00F6               	movwf	??_SetIOConfig
  4707  02AD  0876               	movf	??_SetIOConfig,w
  4708  02AE  00F2               	movwf	___bmul@multiplicand
  4709  02AF  0020               	movlb	0	; select bank0
  4710  02B0  084F               	movf	SetIOConfig@Pin,w
  4711  02B1  318D  2551  3182   	fcall	___bmul
  4712  02B4  3EA0               	addlw	160
  4713  02B5  0086               	movwf	6
  4714  02B6  3001               	movlw	1	; select bank3/4
  4715  02B7  0087               	movwf	7
  4716  02B8  3000               	movlw	0
  4717  02B9  3FC0               	movwi [0]fsr1
  4718  02BA  3000               	movlw	0
  4719  02BB  3FC1               	movwi [1]fsr1
  4720  02BC  3FC2               	movwi [2]fsr1
  4721  02BD  3FC3               	movwi [3]fsr1
  4722                           
  4723                           ;main.c: 507: IOSensorData[Pin].WORD[2]=0;
  4724  02BE  3006               	movlw	6
  4725  02BF  00F6               	movwf	??_SetIOConfig
  4726  02C0  0876               	movf	??_SetIOConfig,w
  4727  02C1  00F2               	movwf	___bmul@multiplicand
  4728  02C2  0020               	movlb	0	; select bank0
  4729  02C3  084F               	movf	SetIOConfig@Pin,w
  4730  02C4  318D  2551  3182   	fcall	___bmul
  4731  02C7  3E04               	addlw	4
  4732  02C8  3EA0               	addlw	160
  4733  02C9  0086               	movwf	6
  4734  02CA  3001               	movlw	1	; select bank3/4
  4735  02CB  0087               	movwf	7
  4736  02CC  3000               	movlw	0
  4737  02CD  3FC0               	movwi [0]fsr1
  4738  02CE  3FC1               	movwi [1]fsr1
  4739                           
  4740                           ;main.c: 510: if(Pin<5)
  4741  02CF  3005               	movlw	5
  4742  02D0  0020               	movlb	0	; select bank0
  4743  02D1  024F               	subwf	SetIOConfig@Pin,w
  4744  02D2  1803               	skipnc
  4745  02D3  2ADF               	goto	l3845
  4746                           
  4747                           ;main.c: 511: {
  4748                           ;main.c: 512: IOCounterFlag.Byte & = NOT_IOMASK[Pin];
  4749  02D4  084F               	movf	SetIOConfig@Pin,w
  4750  02D5  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  4751  02D6  0084               	movwf	4
  4752  02D7  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  4753  02D8  1803               	skipnc
  4754  02D9  3E01               	addlw	1
  4755  02DA  0085               	movwf	5
  4756  02DB  0800               	movf	0,w	;code access
  4757  02DC  00F6               	movwf	??_SetIOConfig
  4758  02DD  0876               	movf	??_SetIOConfig,w
  4759  02DE  05F1               	andwf	113,f	;volatile
  4760  02DF                     l3845:	
  4761                           
  4762                           ;main.c: 513: }
  4763                           ;main.c: 515: if(Pin==0)
  4764  02DF  084F               	movf	SetIOConfig@Pin,w
  4765  02E0  1D03               	btfss	3,2
  4766  02E1  2AE6               	goto	l3851
  4767                           
  4768                           ;main.c: 516: {
  4769                           ;main.c: 517: CCP1CON=0;
  4770  02E2  0025               	movlb	5	; select bank5
  4771  02E3  0193               	clrf	19	;volatile
  4772                           
  4773                           ;main.c: 518: CCP1IE=0;
  4774  02E4  0021               	movlb	1	; select bank1
  4775  02E5  1111               	bcf	17,2	;volatile
  4776  02E6                     l3851:	
  4777                           
  4778                           ;main.c: 519: }
  4779                           ;main.c: 520: if(Pin==3)
  4780  02E6  3003               	movlw	3
  4781  02E7  0020               	movlb	0	; select bank0
  4782  02E8  064F               	xorwf	SetIOConfig@Pin,w
  4783  02E9  1D03               	btfss	3,2
  4784  02EA  2AEF               	goto	l3857
  4785                           
  4786                           ;main.c: 521: {
  4787                           ;main.c: 522: CCP2CON=0;
  4788  02EB  0025               	movlb	5	; select bank5
  4789  02EC  019A               	clrf	26	;volatile
  4790                           
  4791                           ;main.c: 523: CCP2IE=0;
  4792  02ED  0021               	movlb	1	; select bank1
  4793  02EE  1012               	bcf	18,0	;volatile
  4794  02EF                     l3857:	
  4795                           
  4796                           ;main.c: 524: }
  4797                           ;main.c: 525: if(Pin==8)
  4798  02EF  3008               	movlw	8
  4799  02F0  0020               	movlb	0	; select bank0
  4800  02F1  064F               	xorwf	SetIOConfig@Pin,w
  4801  02F2  1D03               	btfss	3,2
  4802  02F3  2AF8               	goto	l3863
  4803                           
  4804                           ;main.c: 526: {
  4805                           ;main.c: 527: CCP3CON=0;
  4806  02F4  0026               	movlb	6	; select bank6
  4807  02F5  0193               	clrf	19	;volatile
  4808                           
  4809                           ;main.c: 528: CCP3IE=0;
  4810  02F6  0021               	movlb	1	; select bank1
  4811  02F7  1213               	bcf	19,4	;volatile
  4812  02F8                     l3863:	
  4813                           
  4814                           ;main.c: 529: }
  4815                           ;main.c: 530: if(Pin==9)
  4816  02F8  3009               	movlw	9
  4817  02F9  0020               	movlb	0	; select bank0
  4818  02FA  064F               	xorwf	SetIOConfig@Pin,w
  4819  02FB  1D03               	btfss	3,2
  4820  02FC  2B01               	goto	l3869
  4821                           
  4822                           ;main.c: 531: {
  4823                           ;main.c: 532: CCP4CON=0;
  4824  02FD  0026               	movlb	6	; select bank6
  4825  02FE  019A               	clrf	26	;volatile
  4826                           
  4827                           ;main.c: 533: CCP4IE=0;
  4828  02FF  0021               	movlb	1	; select bank1
  4829  0300  1293               	bcf	19,5	;volatile
  4830  0301                     l3869:	
  4831                           
  4832                           ;main.c: 534: }
  4833                           ;main.c: 536: if(Pin<5)
  4834  0301  3005               	movlw	5
  4835  0302  0020               	movlb	0	; select bank0
  4836  0303  024F               	subwf	SetIOConfig@Pin,w
  4837  0304  1803               	skipnc
  4838  0305  2B12               	goto	l3873
  4839                           
  4840                           ;main.c: 537: {
  4841                           ;main.c: 538: SetPullUp(Pin,1);
  4842  0306  01F2               	clrf	SetPullUp@PullUp
  4843  0307  0AF2               	incf	SetPullUp@PullUp,f
  4844  0308  084F               	movf	SetIOConfig@Pin,w
  4845  0309  318F  2704  3182   	fcall	_SetPullUp
  4846                           
  4847                           ;main.c: 539: SetIOChange(Pin,0);
  4848  030C  01F2               	clrf	SetIOChange@value
  4849  030D  0020               	movlb	0	; select bank0
  4850  030E  084F               	movf	SetIOConfig@Pin,w
  4851  030F  318F  277A  3182   	fcall	_SetIOChange
  4852  0312                     l3873:	
  4853                           
  4854                           ;main.c: 540: }
  4855                           ;main.c: 542: if(ioconfig.Config<4)
  4856  0312  3004               	movlw	4
  4857  0313  0020               	movlb	0	; select bank0
  4858  0314  024E               	subwf	SetIOConfig@ioconfig,w
  4859  0315  1803               	skipnc
  4860  0316  2B25               	goto	l3881
  4861                           
  4862                           ;main.c: 543: {
  4863                           ;main.c: 544: if(Pin<5)
  4864  0317  3005               	movlw	5
  4865  0318  024F               	subwf	SetIOConfig@Pin,w
  4866  0319  1803               	skipnc
  4867  031A  2B20               	goto	l3879
  4868                           
  4869                           ;main.c: 545: SetPullUp(Pin,0);
  4870  031B  01F2               	clrf	SetPullUp@PullUp
  4871  031C  084F               	movf	SetIOConfig@Pin,w
  4872  031D  318F  2704  3182   	fcall	_SetPullUp
  4873  0320                     l3879:	
  4874                           
  4875                           ;main.c: 546: SetAnalogConfig(Pin);
  4876  0320  0020               	movlb	0	; select bank0
  4877  0321  084F               	movf	SetIOConfig@Pin,w
  4878  0322  3186  267D         	fcall	_SetAnalogConfig
  4879                           
  4880                           ;main.c: 547: }
  4881  0324  0008               	return
  4882  0325                     l3881:	
  4883                           
  4884                           ;main.c: 548: else if(ioconfig.Config==6)
  4885  0325  3006               	movlw	6
  4886  0326  0020               	movlb	0	; select bank0
  4887  0327  064E               	xorwf	SetIOConfig@ioconfig,w
  4888  0328  1D03               	btfss	3,2
  4889  0329  2B2E               	goto	l3885
  4890                           
  4891                           ;main.c: 549: {
  4892                           ;main.c: 550: SetOutputConfig(Pin);
  4893  032A  084F               	movf	SetIOConfig@Pin,w
  4894  032B  318F  27A4         	fcall	_SetOutputConfig
  4895                           
  4896                           ;main.c: 551: }
  4897  032D  0008               	return
  4898  032E                     l3885:	
  4899                           
  4900                           ;main.c: 552: else if(ioconfig.Config == 12)
  4901  032E  300C               	movlw	12
  4902  032F  0020               	movlb	0	; select bank0
  4903  0330  064E               	xorwf	SetIOConfig@ioconfig,w
  4904  0331  1D03               	btfss	3,2
  4905  0332  2B57               	goto	l3899
  4906                           
  4907                           ;main.c: 553: {
  4908                           ;main.c: 554: if(ValidCCP[Pin] ==0)
  4909  0333  084F               	movf	SetIOConfig@Pin,w
  4910  0334  3E16               	addlw	low (SetIOConfig@ValidCCP| (0+32768))
  4911  0335  0084               	movwf	4
  4912  0336  3088               	movlw	high (SetIOConfig@ValidCCP| (0+32768))
  4913  0337  1803               	skipnc
  4914  0338  3E01               	addlw	1
  4915  0339  0085               	movwf	5
  4916  033A  0012               	moviw fsr0++
  4917  033B  1D03               	btfss	3,2
  4918  033C  2B40               	goto	l3891
  4919                           
  4920                           ;main.c: 555: {
  4921                           ;main.c: 556: BadIO=1;
  4922  033D  01C2               	clrf	_BadIO
  4923  033E  0AC2               	incf	_BadIO,f
  4924                           
  4925                           ;main.c: 557: return;
  4926  033F  0008               	return
  4927  0340                     l3891:	
  4928                           
  4929                           ;main.c: 558: }
  4930                           ;main.c: 559: SetInputConfig(Pin);
  4931  0340  084F               	movf	SetIOConfig@Pin,w
  4932  0341  3187  27A1  3182   	fcall	_SetInputConfig
  4933                           
  4934                           ;main.c: 560: if(Pin<5)
  4935  0344  3005               	movlw	5
  4936  0345  0020               	movlb	0	; select bank0
  4937  0346  024F               	subwf	SetIOConfig@Pin,w
  4938  0347  1803               	skipnc
  4939  0348  2B4F               	goto	l3897
  4940                           
  4941                           ;main.c: 561: SetPullUp(Pin,1);
  4942  0349  01F2               	clrf	SetPullUp@PullUp
  4943  034A  0AF2               	incf	SetPullUp@PullUp,f
  4944  034B  084F               	movf	SetIOConfig@Pin,w
  4945  034C  318F  2704  3182   	fcall	_SetPullUp
  4946  034F                     l3897:	
  4947                           
  4948                           ;main.c: 562: SetTimeCaptureConfig(Pin,0);
  4949  034F  3000               	movlw	0
  4950  0350  00F2               	movwf	SetTimeCaptureConfig@detection
  4951  0351  00F3               	movwf	SetTimeCaptureConfig@detection+1
  4952  0352  0020               	movlb	0	; select bank0
  4953  0353  084F               	movf	SetIOConfig@Pin,w
  4954  0354  3185  251A         	fcall	_SetTimeCaptureConfig
  4955                           
  4956                           ;main.c: 564: }
  4957  0356  0008               	return
  4958  0357                     l3899:	
  4959                           
  4960                           ;main.c: 565: else if(ioconfig.Config == 13)
  4961  0357  300D               	movlw	13
  4962  0358  0020               	movlb	0	; select bank0
  4963  0359  064E               	xorwf	SetIOConfig@ioconfig,w
  4964  035A  1D03               	btfss	3,2
  4965  035B  2B80               	goto	l3913
  4966                           
  4967                           ;main.c: 566: {
  4968                           ;main.c: 567: if(ValidCCP[Pin] ==0)
  4969  035C  084F               	movf	SetIOConfig@Pin,w
  4970  035D  3E16               	addlw	low (SetIOConfig@ValidCCP| (0+32768))
  4971  035E  0084               	movwf	4
  4972  035F  3088               	movlw	high (SetIOConfig@ValidCCP| (0+32768))
  4973  0360  1803               	skipnc
  4974  0361  3E01               	addlw	1
  4975  0362  0085               	movwf	5
  4976  0363  0012               	moviw fsr0++
  4977  0364  1D03               	btfss	3,2
  4978  0365  2B69               	goto	l3905
  4979                           
  4980                           ;main.c: 568: {
  4981                           ;main.c: 569: BadIO=1;
  4982  0366  01C2               	clrf	_BadIO
  4983  0367  0AC2               	incf	_BadIO,f
  4984                           
  4985                           ;main.c: 570: return;
  4986  0368  0008               	return
  4987  0369                     l3905:	
  4988                           
  4989                           ;main.c: 571: }
  4990                           ;main.c: 572: SetInputConfig(Pin);
  4991  0369  084F               	movf	SetIOConfig@Pin,w
  4992  036A  3187  27A1  3182   	fcall	_SetInputConfig
  4993                           
  4994                           ;main.c: 573: if(Pin < 5)
  4995  036D  3005               	movlw	5
  4996  036E  0020               	movlb	0	; select bank0
  4997  036F  024F               	subwf	SetIOConfig@Pin,w
  4998  0370  1803               	skipnc
  4999  0371  2B77               	goto	l3911
  5000                           
  5001                           ;main.c: 574: SetPullUp(Pin,0);
  5002  0372  01F2               	clrf	SetPullUp@PullUp
  5003  0373  084F               	movf	SetIOConfig@Pin,w
  5004  0374  318F  2704  3182   	fcall	_SetPullUp
  5005  0377                     l3911:	
  5006                           
  5007                           ;main.c: 575: SetTimeCaptureConfig(Pin,1);
  5008  0377  3001               	movlw	1
  5009  0378  00F2               	movwf	SetTimeCaptureConfig@detection
  5010  0379  3000               	movlw	0
  5011  037A  00F3               	movwf	SetTimeCaptureConfig@detection+1
  5012  037B  0020               	movlb	0	; select bank0
  5013  037C  084F               	movf	SetIOConfig@Pin,w
  5014  037D  3185  251A         	fcall	_SetTimeCaptureConfig
  5015                           
  5016                           ;main.c: 576: }
  5017  037F  0008               	return
  5018  0380                     l3913:	
  5019                           
  5020                           ;main.c: 577: else if(ioconfig.Config == 4)
  5021  0380  3004               	movlw	4
  5022  0381  0020               	movlb	0	; select bank0
  5023  0382  064E               	xorwf	SetIOConfig@ioconfig,w
  5024  0383  1D03               	btfss	3,2
  5025  0384  2B93               	goto	l3919
  5026                           
  5027                           ;main.c: 578: {
  5028                           ;main.c: 579: if(Pin<5)
  5029  0385  3005               	movlw	5
  5030  0386  024F               	subwf	SetIOConfig@Pin,w
  5031  0387  1803               	skipnc
  5032  0388  2B8E               	goto	l457
  5033                           
  5034                           ;main.c: 580: SetPullUp(Pin,0);
  5035  0389  01F2               	clrf	SetPullUp@PullUp
  5036  038A  084F               	movf	SetIOConfig@Pin,w
  5037  038B  318F  2704  3182   	fcall	_SetPullUp
  5038  038E                     l457:	
  5039                           
  5040                           ;main.c: 581: SetInputConfig(Pin);
  5041  038E  0020               	movlb	0	; select bank0
  5042  038F  084F               	movf	SetIOConfig@Pin,w
  5043  0390  3187  27A1         	fcall	_SetInputConfig
  5044                           
  5045                           ;main.c: 582: }
  5046  0392  0008               	return
  5047  0393                     l3919:	
  5048                           
  5049                           ;main.c: 607: else
  5050                           ;main.c: 608: SetInputConfig(Pin);
  5051  0393  0020               	movlb	0	; select bank0
  5052  0394  084F               	movf	SetIOConfig@Pin,w
  5053  0395  3187  27A1         	fcall	_SetInputConfig
  5054  0397  0008               	return
  5055  0398                     __end_of_SetIOConfig:	
  5056                           
  5057                           	psect	text24
  5058  051A                     __ptext24:	
  5059 ;; *************** function _SetTimeCaptureConfig *****************
  5060 ;; Defined at:
  5061 ;;		line 52 in file "TimeCapture.c"
  5062 ;; Parameters:    Size  Location     Type
  5063 ;;  Pin             1    wreg     unsigned char 
  5064 ;;  detection       2    2[COMMON] unsigned int 
  5065 ;; Auto vars:     Size  Location     Type
  5066 ;;  Pin             1    4[COMMON] unsigned char 
  5067 ;; Return value:  Size  Location     Type
  5068 ;;                  1    wreg      void 
  5069 ;; Registers used:
  5070 ;;		wreg, status,2, status,0
  5071 ;; Tracked objects:
  5072 ;;		On entry : 0/0
  5073 ;;		On exit  : 0/0
  5074 ;;		Unchanged: 0/0
  5075 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5076 ;;      Params:         2       0       0       0       0       0       0
  5077 ;;      Locals:         1       0       0       0       0       0       0
  5078 ;;      Temps:          0       0       0       0       0       0       0
  5079 ;;      Totals:         3       0       0       0       0       0       0
  5080 ;;Total ram usage:        3 bytes
  5081 ;; Hardware stack levels used:    1
  5082 ;; Hardware stack levels required when called:    1
  5083 ;; This function calls:
  5084 ;;		Nothing
  5085 ;; This function is called by:
  5086 ;;		_SetIOConfig
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           
  5091                           ;psect for function _SetTimeCaptureConfig
  5092  051A                     _SetTimeCaptureConfig:	
  5093                           
  5094                           ;incstack = 0
  5095                           ; Regs used in _SetTimeCaptureConfig: [wreg+status,2+status,0]
  5096                           ;SetTimeCaptureConfig@Pin stored from wreg
  5097  051A  00F4               	movwf	SetTimeCaptureConfig@Pin
  5098                           
  5099                           ;TimeCapture.c: 54: if(Pin == 0)
  5100  051B  0874               	movf	SetTimeCaptureConfig@Pin,w
  5101  051C  1D03               	btfss	3,2
  5102  051D  2D2E               	goto	l3741
  5103                           
  5104                           ;TimeCapture.c: 55: {
  5105                           ;TimeCapture.c: 56: if(detection)
  5106  051E  0872               	movf	SetTimeCaptureConfig@detection,w
  5107  051F  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5108  0520  1903               	btfsc	3,2
  5109  0521  2D24               	goto	l3733
  5110                           
  5111                           ;TimeCapture.c: 57: CCP1CON = 0b00000101;
  5112  0522  3005               	movlw	5
  5113  0523  2D25               	goto	L10
  5114  0524                     l3733:	
  5115                           
  5116                           ;TimeCapture.c: 58: else
  5117                           ;TimeCapture.c: 59: CCP1CON = 0b00000100;
  5118  0524  3004               	movlw	4
  5119  0525                     L10:	
  5120  0525  0025               	movlb	5	; select bank5
  5121  0526  0093               	movwf	19	;volatile
  5122                           
  5123                           ;TimeCapture.c: 61: TimeCapture1Count=0;
  5124  0527  0020               	movlb	0	; select bank0
  5125  0528  01B0               	clrf	_TimeCapture1Count	;volatile
  5126  0529  01B1               	clrf	_TimeCapture1Count+1	;volatile
  5127                           
  5128                           ;TimeCapture.c: 62: CCP1IF = 0;
  5129  052A  1111               	bcf	17,2	;volatile
  5130                           
  5131                           ;TimeCapture.c: 63: CCP1IE =1;
  5132  052B  0021               	movlb	1	; select bank1
  5133  052C  1511               	bsf	17,2	;volatile
  5134                           
  5135                           ;TimeCapture.c: 65: }
  5136  052D  0008               	return
  5137  052E                     l3741:	
  5138                           
  5139                           ;TimeCapture.c: 66: else if(Pin == 3)
  5140  052E  3003               	movlw	3
  5141  052F  0674               	xorwf	SetTimeCaptureConfig@Pin,w
  5142  0530  1D03               	btfss	3,2
  5143  0531  2D42               	goto	l3755
  5144                           
  5145                           ;TimeCapture.c: 67: {
  5146                           ;TimeCapture.c: 68: if(detection)
  5147  0532  0872               	movf	SetTimeCaptureConfig@detection,w
  5148  0533  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5149  0534  1903               	btfsc	3,2
  5150  0535  2D38               	goto	l3747
  5151                           
  5152                           ;TimeCapture.c: 69: CCP2CON = 0b00000101;
  5153  0536  3005               	movlw	5
  5154  0537  2D39               	goto	L11
  5155  0538                     l3747:	
  5156                           
  5157                           ;TimeCapture.c: 70: else
  5158                           ;TimeCapture.c: 71: CCP2CON = 0b00000100;
  5159  0538  3004               	movlw	4
  5160  0539                     L11:	
  5161  0539  0025               	movlb	5	; select bank5
  5162  053A  009A               	movwf	26	;volatile
  5163                           
  5164                           ;TimeCapture.c: 73: TimeCapture2Count=0;
  5165  053B  0020               	movlb	0	; select bank0
  5166  053C  01AE               	clrf	_TimeCapture2Count	;volatile
  5167  053D  01AF               	clrf	_TimeCapture2Count+1	;volatile
  5168                           
  5169                           ;TimeCapture.c: 74: CCP2IF = 0;
  5170  053E  1012               	bcf	18,0	;volatile
  5171                           
  5172                           ;TimeCapture.c: 75: CCP2IE =1;
  5173  053F  0021               	movlb	1	; select bank1
  5174  0540  1412               	bsf	18,0	;volatile
  5175                           
  5176                           ;TimeCapture.c: 77: }
  5177  0541  0008               	return
  5178  0542                     l3755:	
  5179                           
  5180                           ;TimeCapture.c: 78: else if(Pin == 8)
  5181  0542  3008               	movlw	8
  5182  0543  0674               	xorwf	SetTimeCaptureConfig@Pin,w
  5183  0544  1D03               	btfss	3,2
  5184  0545  2D56               	goto	l3769
  5185                           
  5186                           ;TimeCapture.c: 79: {
  5187                           ;TimeCapture.c: 80: if(detection)
  5188  0546  0872               	movf	SetTimeCaptureConfig@detection,w
  5189  0547  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5190  0548  1903               	btfsc	3,2
  5191  0549  2D4C               	goto	l3761
  5192                           
  5193                           ;TimeCapture.c: 81: CCP3CON = 0b00000101;
  5194  054A  3005               	movlw	5
  5195  054B  2D4D               	goto	L12
  5196  054C                     l3761:	
  5197                           
  5198                           ;TimeCapture.c: 82: else
  5199                           ;TimeCapture.c: 83: CCP3CON = 0b00000100;
  5200  054C  3004               	movlw	4
  5201  054D                     L12:	
  5202  054D  0026               	movlb	6	; select bank6
  5203  054E  0093               	movwf	19	;volatile
  5204                           
  5205                           ;TimeCapture.c: 85: TimeCapture3Count=0;
  5206  054F  0020               	movlb	0	; select bank0
  5207  0550  01AC               	clrf	_TimeCapture3Count	;volatile
  5208  0551  01AD               	clrf	_TimeCapture3Count+1	;volatile
  5209                           
  5210                           ;TimeCapture.c: 86: CCP3IF = 0;
  5211  0552  1213               	bcf	19,4	;volatile
  5212                           
  5213                           ;TimeCapture.c: 87: CCP3IE =1;
  5214  0553  0021               	movlb	1	; select bank1
  5215  0554  1613               	bsf	19,4	;volatile
  5216                           
  5217                           ;TimeCapture.c: 90: }
  5218  0555  0008               	return
  5219  0556                     l3769:	
  5220                           
  5221                           ;TimeCapture.c: 91: else if(Pin ==9)
  5222  0556  3009               	movlw	9
  5223  0557  0674               	xorwf	SetTimeCaptureConfig@Pin,w
  5224  0558  1D03               	btfss	3,2
  5225  0559  0008               	return
  5226                           
  5227                           ;TimeCapture.c: 92: {
  5228                           ;TimeCapture.c: 93: if(detection)
  5229  055A  0872               	movf	SetTimeCaptureConfig@detection,w
  5230  055B  0473               	iorwf	SetTimeCaptureConfig@detection+1,w
  5231  055C  1903               	btfsc	3,2
  5232  055D  2D60               	goto	l3775
  5233                           
  5234                           ;TimeCapture.c: 94: CCP4CON = 0b00000101;
  5235  055E  3005               	movlw	5
  5236  055F  2D61               	goto	L13
  5237  0560                     l3775:	
  5238                           
  5239                           ;TimeCapture.c: 95: else
  5240                           ;TimeCapture.c: 96: CCP4CON = 0b00000100;
  5241  0560  3004               	movlw	4
  5242  0561                     L13:	
  5243  0561  0026               	movlb	6	; select bank6
  5244  0562  009A               	movwf	26	;volatile
  5245                           
  5246                           ;TimeCapture.c: 98: TimeCapture4Count=0;
  5247  0563  0020               	movlb	0	; select bank0
  5248  0564  01AA               	clrf	_TimeCapture4Count	;volatile
  5249  0565  01AB               	clrf	_TimeCapture4Count+1	;volatile
  5250                           
  5251                           ;TimeCapture.c: 99: CCP4IF = 0;
  5252  0566  1293               	bcf	19,5	;volatile
  5253                           
  5254                           ;TimeCapture.c: 100: CCP4IE =1;
  5255  0567  0021               	movlb	1	; select bank1
  5256  0568  1693               	bsf	19,5	;volatile
  5257  0569  0008               	return
  5258  056A                     __end_of_SetTimeCaptureConfig:	
  5259                           ;TimeCapture.c: 103: }
  5260                           ;TimeCapture.c: 104: return;
  5261                           
  5262                           
  5263                           	psect	text25
  5264  0F04                     __ptext25:	
  5265 ;; *************** function _SetPullUp *****************
  5266 ;; Defined at:
  5267 ;;		line 463 in file "main.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  Pin             1    wreg     unsigned char 
  5270 ;;  PullUp          1    2[COMMON] unsigned char 
  5271 ;; Auto vars:     Size  Location     Type
  5272 ;;  Pin             1    4[COMMON] unsigned char 
  5273 ;; Return value:  Size  Location     Type
  5274 ;;                  1    wreg      void 
  5275 ;; Registers used:
  5276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5277 ;; Tracked objects:
  5278 ;;		On entry : 0/0
  5279 ;;		On exit  : 0/0
  5280 ;;		Unchanged: 0/0
  5281 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5282 ;;      Params:         1       0       0       0       0       0       0
  5283 ;;      Locals:         1       0       0       0       0       0       0
  5284 ;;      Temps:          1       0       0       0       0       0       0
  5285 ;;      Totals:         3       0       0       0       0       0       0
  5286 ;;Total ram usage:        3 bytes
  5287 ;; Hardware stack levels used:    1
  5288 ;; Hardware stack levels required when called:    1
  5289 ;; This function calls:
  5290 ;;		Nothing
  5291 ;; This function is called by:
  5292 ;;		_SetIOConfig
  5293 ;; This function uses a non-reentrant model
  5294 ;;
  5295                           
  5296                           
  5297                           ;psect for function _SetPullUp
  5298  0F04                     _SetPullUp:	
  5299                           
  5300                           ;incstack = 0
  5301                           ; Regs used in _SetPullUp: [wreg-fsr0h+status,2+status,0+pclath]
  5302                           ;SetPullUp@Pin stored from wreg
  5303  0F04  00F4               	movwf	SetPullUp@Pin
  5304                           
  5305                           ;main.c: 465: if(Pin<5)
  5306  0F05  3005               	movlw	5
  5307  0F06  0274               	subwf	SetPullUp@Pin,w
  5308  0F07  1803               	skipnc
  5309  0F08  2F26               	goto	l422
  5310                           
  5311                           ;main.c: 466: {
  5312                           ;main.c: 467: if(PullUp)
  5313  0F09  0872               	movf	SetPullUp@PullUp,w
  5314  0F0A  1903               	btfsc	3,2
  5315  0F0B  2F19               	goto	l3717
  5316                           
  5317                           ;main.c: 468: WPUB |= IOMASK[Pin];
  5318  0F0C  0874               	movf	SetPullUp@Pin,w
  5319  0F0D  3E0B               	addlw	low (_IOMASK| (0+32768))
  5320  0F0E  0084               	movwf	4
  5321  0F0F  3088               	movlw	high (_IOMASK| (0+32768))
  5322  0F10  1803               	skipnc
  5323  0F11  3E01               	addlw	1
  5324  0F12  0085               	movwf	5
  5325  0F13  0800               	movf	0,w	;code access
  5326  0F14  00F3               	movwf	??_SetPullUp
  5327  0F15  0873               	movf	??_SetPullUp,w
  5328  0F16  0024               	movlb	4	; select bank4
  5329  0F17  048D               	iorwf	13,f	;volatile
  5330  0F18  0008               	return
  5331  0F19                     l3717:	
  5332                           
  5333                           ;main.c: 469: else
  5334                           ;main.c: 470: WPUB &= NOT_IOMASK[Pin];
  5335  0F19  0874               	movf	SetPullUp@Pin,w
  5336  0F1A  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5337  0F1B  0084               	movwf	4
  5338  0F1C  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5339  0F1D  1803               	skipnc
  5340  0F1E  3E01               	addlw	1
  5341  0F1F  0085               	movwf	5
  5342  0F20  0800               	movf	0,w	;code access
  5343  0F21  00F3               	movwf	??_SetPullUp
  5344  0F22  0873               	movf	??_SetPullUp,w
  5345  0F23  0024               	movlb	4	; select bank4
  5346  0F24  058D               	andwf	13,f	;volatile
  5347                           
  5348                           ;main.c: 471: }
  5349  0F25  0008               	return
  5350  0F26                     l422:	
  5351                           
  5352                           ;main.c: 472: else BadIO=1;
  5353  0F26  0020               	movlb	0	; select bank0
  5354  0F27  01C2               	clrf	_BadIO
  5355  0F28  0AC2               	incf	_BadIO,f
  5356  0F29  0008               	return
  5357  0F2A                     __end_of_SetPullUp:	
  5358                           
  5359                           	psect	text26
  5360  0FA4                     __ptext26:	
  5361 ;; *************** function _SetOutputConfig *****************
  5362 ;; Defined at:
  5363 ;;		line 393 in file "main.c"
  5364 ;; Parameters:    Size  Location     Type
  5365 ;;  Pin             1    wreg     unsigned char 
  5366 ;; Auto vars:     Size  Location     Type
  5367 ;;  Pin             1    5[COMMON] unsigned char 
  5368 ;;  _tmp            1    4[COMMON] unsigned char 
  5369 ;;  ioconfig        1    3[COMMON] unsigned char 
  5370 ;; Return value:  Size  Location     Type
  5371 ;;                  1    wreg      void 
  5372 ;; Registers used:
  5373 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5374 ;; Tracked objects:
  5375 ;;		On entry : 0/0
  5376 ;;		On exit  : 0/0
  5377 ;;		Unchanged: 0/0
  5378 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5379 ;;      Params:         0       0       0       0       0       0       0
  5380 ;;      Locals:         3       0       0       0       0       0       0
  5381 ;;      Temps:          1       0       0       0       0       0       0
  5382 ;;      Totals:         4       0       0       0       0       0       0
  5383 ;;Total ram usage:        4 bytes
  5384 ;; Hardware stack levels used:    1
  5385 ;; Hardware stack levels required when called:    1
  5386 ;; This function calls:
  5387 ;;		Nothing
  5388 ;; This function is called by:
  5389 ;;		_SetIOConfig
  5390 ;; This function uses a non-reentrant model
  5391 ;;
  5392                           
  5393                           
  5394                           ;psect for function _SetOutputConfig
  5395  0FA4                     _SetOutputConfig:	
  5396                           
  5397                           ;incstack = 0
  5398                           ; Regs used in _SetOutputConfig: [wreg-fsr1h+status,2+status,0+pclath]
  5399                           ;SetOutputConfig@Pin stored from wreg
  5400  0FA4  00F5               	movwf	SetOutputConfig@Pin
  5401                           
  5402                           ;main.c: 396: unsigned char ioconfig = Setting.IOConfig[Pin];
  5403  0FA5  0875               	movf	SetOutputConfig@Pin,w
  5404  0FA6  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  5405  0FA7  0086               	movwf	6
  5406  0FA8  0187               	clrf	7
  5407  0FA9  0801               	movf	1,w
  5408  0FAA  00F2               	movwf	??_SetOutputConfig
  5409  0FAB  0872               	movf	??_SetOutputConfig,w
  5410  0FAC  00F3               	movwf	SetOutputConfig@ioconfig
  5411                           
  5412                           ;main.c: 397: unsigned char _tmp= NOT_IOMASK[Pin];
  5413  0FAD  0875               	movf	SetOutputConfig@Pin,w
  5414  0FAE  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5415  0FAF  0084               	movwf	4
  5416  0FB0  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5417  0FB1  1803               	skipnc
  5418  0FB2  3E01               	addlw	1
  5419  0FB3  0085               	movwf	5
  5420  0FB4  0800               	movf	0,w	;code access
  5421  0FB5  00F2               	movwf	??_SetOutputConfig
  5422  0FB6  0872               	movf	??_SetOutputConfig,w
  5423  0FB7  00F4               	movwf	SetOutputConfig@_tmp
  5424                           
  5425                           ;main.c: 398: if(Pin<5)
  5426  0FB8  3005               	movlw	5
  5427  0FB9  0275               	subwf	SetOutputConfig@Pin,w
  5428  0FBA  1803               	skipnc
  5429  0FBB  2FC6               	goto	l417
  5430  0FBC  0874               	movf	SetOutputConfig@_tmp,w	;# 
  5431  0FBD  00F2               	movwf	??_SetOutputConfig	;# 
  5432  0FBE  0872               	movf	??_SetOutputConfig,w	;# 
  5433  0FBF  0020               	movlb	0	;# 
  5434  0FC0  058D               	andwf	13,f	;# 
  5435  0FC1  0021               	movlb	1	;# 
  5436  0FC2  058D               	andwf	13,f	;# 
  5437  0FC3  0023               	movlb	3	;# 
  5438  0FC4  058D               	andwf	13,f	;# 
  5439                           
  5440                           ;main.c: 414: }
  5441  0FC5  0008               	return
  5442  0FC6                     l417:	
  5443  0FC6  0874               	movf	SetOutputConfig@_tmp,w	;# 
  5444  0FC7  00F2               	movwf	??_SetOutputConfig	;# 
  5445  0FC8  0872               	movf	??_SetOutputConfig,w	;# 
  5446  0FC9  0020               	movlb	0	;# 
  5447  0FCA  058C               	andwf	12,f	;# 
  5448  0FCB  0021               	movlb	1	;# 
  5449  0FCC  058C               	andwf	12,f	;# 
  5450  0FCD  0023               	movlb	3	;# 
  5451  0FCE  058C               	andwf	12,f	;# 
  5452  0FCF  0008               	return
  5453  0FD0                     __end_of_SetOutputConfig:	
  5454                           
  5455                           	psect	text27
  5456  07A1                     __ptext27:	
  5457 ;; *************** function _SetInputConfig *****************
  5458 ;; Defined at:
  5459 ;;		line 476 in file "main.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  Pin             1    wreg     unsigned char 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  Pin             1    5[COMMON] unsigned char 
  5464 ;;  _ntmp           1    4[COMMON] unsigned char 
  5465 ;;  _tmp            1    3[COMMON] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      void 
  5468 ;; Registers used:
  5469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5475 ;;      Params:         0       0       0       0       0       0       0
  5476 ;;      Locals:         3       0       0       0       0       0       0
  5477 ;;      Temps:          1       0       0       0       0       0       0
  5478 ;;      Totals:         4       0       0       0       0       0       0
  5479 ;;Total ram usage:        4 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    1
  5482 ;; This function calls:
  5483 ;;		Nothing
  5484 ;; This function is called by:
  5485 ;;		_SetIOConfig
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           
  5490                           ;psect for function _SetInputConfig
  5491  07A1                     _SetInputConfig:	
  5492                           
  5493                           ;incstack = 0
  5494                           ; Regs used in _SetInputConfig: [wreg-fsr0h+status,2+status,0+pclath]
  5495                           ;SetInputConfig@Pin stored from wreg
  5496  07A1  00F5               	movwf	SetInputConfig@Pin
  5497                           
  5498                           ;main.c: 478: unsigned char _tmp = IOMASK[Pin];
  5499  07A2  0875               	movf	SetInputConfig@Pin,w
  5500  07A3  3E0B               	addlw	low (_IOMASK| (0+32768))
  5501  07A4  0084               	movwf	4
  5502  07A5  3088               	movlw	high (_IOMASK| (0+32768))
  5503  07A6  1803               	skipnc
  5504  07A7  3E01               	addlw	1
  5505  07A8  0085               	movwf	5
  5506  07A9  0800               	movf	0,w	;code access
  5507  07AA  00F2               	movwf	??_SetInputConfig
  5508  07AB  0872               	movf	??_SetInputConfig,w
  5509  07AC  00F3               	movwf	SetInputConfig@_tmp
  5510                           
  5511                           ;main.c: 479: unsigned char _ntmp= NOT_IOMASK[Pin];
  5512  07AD  0875               	movf	SetInputConfig@Pin,w
  5513  07AE  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5514  07AF  0084               	movwf	4
  5515  07B0  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5516  07B1  1803               	skipnc
  5517  07B2  3E01               	addlw	1
  5518  07B3  0085               	movwf	5
  5519  07B4  0800               	movf	0,w	;code access
  5520  07B5  00F2               	movwf	??_SetInputConfig
  5521  07B6  0872               	movf	??_SetInputConfig,w
  5522  07B7  00F4               	movwf	SetInputConfig@_ntmp
  5523                           
  5524                           ;main.c: 480: if(Pin<5)
  5525  07B8  3005               	movlw	5
  5526  07B9  0275               	subwf	SetInputConfig@Pin,w
  5527  07BA  1803               	skipnc
  5528  07BB  2FC7               	goto	l3725
  5529                           
  5530                           ;main.c: 481: {
  5531                           ;main.c: 482: TRISB |= _tmp;
  5532  07BC  0873               	movf	SetInputConfig@_tmp,w
  5533  07BD  00F2               	movwf	??_SetInputConfig
  5534  07BE  0872               	movf	??_SetInputConfig,w
  5535  07BF  0021               	movlb	1	; select bank1
  5536  07C0  048D               	iorwf	13,f	;volatile
  5537                           
  5538                           ;main.c: 483: ANSELB &= _ntmp;
  5539  07C1  0874               	movf	SetInputConfig@_ntmp,w
  5540  07C2  00F2               	movwf	??_SetInputConfig
  5541  07C3  0872               	movf	??_SetInputConfig,w
  5542  07C4  0023               	movlb	3	; select bank3
  5543  07C5  058D               	andwf	13,f	;volatile
  5544                           
  5545                           ;main.c: 484: }
  5546  07C6  0008               	return
  5547  07C7                     l3725:	
  5548                           
  5549                           ;main.c: 485: else
  5550                           ;main.c: 486: {
  5551                           ;main.c: 487: TRISA |= _tmp;
  5552  07C7  0873               	movf	SetInputConfig@_tmp,w
  5553  07C8  00F2               	movwf	??_SetInputConfig
  5554  07C9  0872               	movf	??_SetInputConfig,w
  5555  07CA  0021               	movlb	1	; select bank1
  5556  07CB  048C               	iorwf	12,f	;volatile
  5557                           
  5558                           ;main.c: 488: ANSELA &= _ntmp;
  5559  07CC  0874               	movf	SetInputConfig@_ntmp,w
  5560  07CD  00F2               	movwf	??_SetInputConfig
  5561  07CE  0872               	movf	??_SetInputConfig,w
  5562  07CF  0023               	movlb	3	; select bank3
  5563  07D0  058C               	andwf	12,f	;volatile
  5564  07D1  0008               	return
  5565  07D2                     __end_of_SetInputConfig:	
  5566                           
  5567                           	psect	text28
  5568  0F7A                     __ptext28:	
  5569 ;; *************** function _SetIOChange *****************
  5570 ;; Defined at:
  5571 ;;		line 215 in file "IOCycle.c"
  5572 ;; Parameters:    Size  Location     Type
  5573 ;;  Pin             1    wreg     unsigned char 
  5574 ;;  value           1    2[COMMON] unsigned char 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  Pin             1    5[COMMON] unsigned char 
  5577 ;;  _temp           1    4[COMMON] unsigned char 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      void 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  5582 ;; Tracked objects:
  5583 ;;		On entry : 0/0
  5584 ;;		On exit  : 0/0
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5587 ;;      Params:         1       0       0       0       0       0       0
  5588 ;;      Locals:         2       0       0       0       0       0       0
  5589 ;;      Temps:          1       0       0       0       0       0       0
  5590 ;;      Totals:         4       0       0       0       0       0       0
  5591 ;;Total ram usage:        4 bytes
  5592 ;; Hardware stack levels used:    1
  5593 ;; Hardware stack levels required when called:    1
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_SetIOConfig
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _SetIOChange
  5603  0F7A                     _SetIOChange:	
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _SetIOChange: [wreg-fsr0h+status,2+status,0+pclath]
  5607                           ;SetIOChange@Pin stored from wreg
  5608  0F7A  00F5               	movwf	SetIOChange@Pin
  5609                           
  5610                           ;IOCycle.c: 217: unsigned char _temp;
  5611                           ;IOCycle.c: 218: if(Pin<5)
  5612  0F7B  3005               	movlw	5
  5613  0F7C  0275               	subwf	SetIOChange@Pin,w
  5614  0F7D  1803               	skipnc
  5615  0F7E  0008               	return
  5616                           
  5617                           ;IOCycle.c: 219: if(value==0)
  5618  0F7F  0872               	movf	SetIOChange@value,w
  5619  0F80  1D03               	btfss	3,2
  5620  0F81  2F93               	goto	l3683
  5621                           
  5622                           ;IOCycle.c: 220: {
  5623                           ;IOCycle.c: 221: _temp = NOT_IOMASK[Pin];
  5624  0F82  0875               	movf	SetIOChange@Pin,w
  5625  0F83  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  5626  0F84  0084               	movwf	4
  5627  0F85  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  5628  0F86  1803               	skipnc
  5629  0F87  3E01               	addlw	1
  5630  0F88  0085               	movwf	5
  5631  0F89  0800               	movf	0,w	;code access
  5632  0F8A  00F3               	movwf	??_SetIOChange
  5633  0F8B  0873               	movf	??_SetIOChange,w
  5634  0F8C  00F4               	movwf	SetIOChange@_temp
  5635                           
  5636                           ;IOCycle.c: 222: (GIE = 0);
  5637  0F8D  138B               	bcf	11,7	;volatile
  5638  0F8E  0874               	movf	SetIOChange@_temp,w	;# 
  5639  0F8F  0027               	movlb	7	;# 
  5640  0F90  0595               	andwf	21,f	;# 
  5641                           
  5642                           ;IOCycle.c: 229: (GIE = 1);
  5643  0F91  178B               	bsf	11,7	;volatile
  5644                           
  5645                           ;IOCycle.c: 230: }
  5646  0F92  0008               	return
  5647  0F93                     l3683:	
  5648                           
  5649                           ;IOCycle.c: 231: else
  5650                           ;IOCycle.c: 232: {
  5651                           ;IOCycle.c: 233: _temp= IOMASK[Pin];
  5652  0F93  0875               	movf	SetIOChange@Pin,w
  5653  0F94  3E0B               	addlw	low (_IOMASK| (0+32768))
  5654  0F95  0084               	movwf	4
  5655  0F96  3088               	movlw	high (_IOMASK| (0+32768))
  5656  0F97  1803               	skipnc
  5657  0F98  3E01               	addlw	1
  5658  0F99  0085               	movwf	5
  5659  0F9A  0800               	movf	0,w	;code access
  5660  0F9B  00F3               	movwf	??_SetIOChange
  5661  0F9C  0873               	movf	??_SetIOChange,w
  5662  0F9D  00F4               	movwf	SetIOChange@_temp
  5663                           
  5664                           ;IOCycle.c: 234: (GIE = 0);
  5665  0F9E  138B               	bcf	11,7	;volatile
  5666  0F9F  0874               	movf	SetIOChange@_temp,w	;# 
  5667  0FA0  0027               	movlb	7	;# 
  5668  0FA1  0495               	iorwf	21,f	;# 
  5669                           
  5670                           ;IOCycle.c: 241: (GIE = 1);
  5671  0FA2  178B               	bsf	11,7	;volatile
  5672  0FA3  0008               	return
  5673  0FA4                     __end_of_SetIOChange:	
  5674                           
  5675                           	psect	text29
  5676  067D                     __ptext29:	
  5677 ;; *************** function _SetAnalogConfig *****************
  5678 ;; Defined at:
  5679 ;;		line 361 in file "main.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  Pin             1    wreg     unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  Pin             1    4[COMMON] unsigned char 
  5684 ;;  _tmp            1    5[COMMON] unsigned char 
  5685 ;;  ioconfig        1    3[COMMON] unsigned char 
  5686 ;; Return value:  Size  Location     Type
  5687 ;;                  1    wreg      void 
  5688 ;; Registers used:
  5689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  5690 ;; Tracked objects:
  5691 ;;		On entry : 0/0
  5692 ;;		On exit  : 0/0
  5693 ;;		Unchanged: 0/0
  5694 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5695 ;;      Params:         0       0       0       0       0       0       0
  5696 ;;      Locals:         3       0       0       0       0       0       0
  5697 ;;      Temps:          1       0       0       0       0       0       0
  5698 ;;      Totals:         4       0       0       0       0       0       0
  5699 ;;Total ram usage:        4 bytes
  5700 ;; Hardware stack levels used:    1
  5701 ;; Hardware stack levels required when called:    1
  5702 ;; This function calls:
  5703 ;;		Nothing
  5704 ;; This function is called by:
  5705 ;;		_SetIOConfig
  5706 ;;		_ReadIO
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           
  5711                           ;psect for function _SetAnalogConfig
  5712  067D                     _SetAnalogConfig:	
  5713                           
  5714                           ;incstack = 0
  5715                           ; Regs used in _SetAnalogConfig: [wreg-fsr1h+status,2+status,0+pclath]
  5716                           ;SetAnalogConfig@Pin stored from wreg
  5717  067D  00F4               	movwf	SetAnalogConfig@Pin
  5718                           
  5719                           ;main.c: 365: unsigned char ioconfig = Setting.IOConfig[Pin];
  5720  067E  0874               	movf	SetAnalogConfig@Pin,w
  5721  067F  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  5722  0680  0086               	movwf	6
  5723  0681  0187               	clrf	7
  5724  0682  0801               	movf	1,w
  5725  0683  00F2               	movwf	??_SetAnalogConfig
  5726  0684  0872               	movf	??_SetAnalogConfig,w
  5727  0685  00F3               	movwf	SetAnalogConfig@ioconfig
  5728                           
  5729                           ;main.c: 366: unsigned char _tmp= IOMASK[Pin];
  5730  0686  0874               	movf	SetAnalogConfig@Pin,w
  5731  0687  3E0B               	addlw	low (_IOMASK| (0+32768))
  5732  0688  0084               	movwf	4
  5733  0689  3088               	movlw	high (_IOMASK| (0+32768))
  5734  068A  1803               	skipnc
  5735  068B  3E01               	addlw	1
  5736  068C  0085               	movwf	5
  5737  068D  0800               	movf	0,w	;code access
  5738  068E  00F2               	movwf	??_SetAnalogConfig
  5739  068F  0872               	movf	??_SetAnalogConfig,w
  5740  0690  00F5               	movwf	SetAnalogConfig@_tmp
  5741                           
  5742                           ;main.c: 367: if(Pin<5)
  5743  0691  3005               	movlw	5
  5744  0692  0274               	subwf	SetAnalogConfig@Pin,w
  5745  0693  1803               	skipnc
  5746  0694  2EA0               	goto	l3697
  5747                           
  5748                           ;main.c: 368: {
  5749                           ;main.c: 369: TRISB |= _tmp;
  5750  0695  0875               	movf	SetAnalogConfig@_tmp,w
  5751  0696  00F2               	movwf	??_SetAnalogConfig
  5752  0697  0872               	movf	??_SetAnalogConfig,w
  5753  0698  0021               	movlb	1	; select bank1
  5754  0699  048D               	iorwf	13,f	;volatile
  5755                           
  5756                           ;main.c: 370: ANSELB |= _tmp;
  5757  069A  0875               	movf	SetAnalogConfig@_tmp,w
  5758  069B  00F2               	movwf	??_SetAnalogConfig
  5759  069C  0872               	movf	??_SetAnalogConfig,w
  5760  069D  0023               	movlb	3	; select bank3
  5761  069E  048D               	iorwf	13,f	;volatile
  5762                           
  5763                           ;main.c: 371: }
  5764  069F  2EAA               	goto	l411
  5765  06A0                     l3697:	
  5766                           
  5767                           ;main.c: 372: else
  5768                           ;main.c: 373: {
  5769                           ;main.c: 374: TRISA |= _tmp;
  5770  06A0  0875               	movf	SetAnalogConfig@_tmp,w
  5771  06A1  00F2               	movwf	??_SetAnalogConfig
  5772  06A2  0872               	movf	??_SetAnalogConfig,w
  5773  06A3  0021               	movlb	1	; select bank1
  5774  06A4  048C               	iorwf	12,f	;volatile
  5775                           
  5776                           ;main.c: 375: ANSELA |= _tmp;
  5777  06A5  0875               	movf	SetAnalogConfig@_tmp,w
  5778  06A6  00F2               	movwf	??_SetAnalogConfig
  5779  06A7  0872               	movf	??_SetAnalogConfig,w
  5780  06A8  0023               	movlb	3	; select bank3
  5781  06A9  048C               	iorwf	12,f	;volatile
  5782  06AA                     l411:	
  5783                           
  5784                           ;main.c: 376: }
  5785                           ;main.c: 380: FVRCONbits.ADFVR = ioconfig;
  5786  06AA  0022               	movlb	2	; select bank2
  5787  06AB  0817               	movf	23,w	;volatile
  5788  06AC  0673               	xorwf	SetAnalogConfig@ioconfig,w
  5789  06AD  39FC               	andlw	-4
  5790  06AE  0673               	xorwf	SetAnalogConfig@ioconfig,w
  5791  06AF  0097               	movwf	23	;volatile
  5792                           
  5793                           ;main.c: 383: if(ioconfig== 0)
  5794  06B0  0873               	movf	SetAnalogConfig@ioconfig,w
  5795  06B1  1D03               	btfss	3,2
  5796  06B2  2EB7               	goto	l3701
  5797                           
  5798                           ;main.c: 384: ADCON1bits.ADPREF=0;
  5799  06B3  30FC               	movlw	-4
  5800  06B4  0021               	movlb	1	; select bank1
  5801  06B5  059E               	andwf	30,f	;volatile
  5802  06B6  0008               	return
  5803  06B7                     l3701:	
  5804                           
  5805                           ;main.c: 385: else
  5806                           ;main.c: 386: ADCON1bits.ADPREF=3;
  5807  06B7  3003               	movlw	3
  5808  06B8  0021               	movlb	1	; select bank1
  5809  06B9  049E               	iorwf	30,f	;volatile
  5810  06BA  0008               	return
  5811  06BB                     __end_of_SetAnalogConfig:	
  5812                           
  5813                           	psect	text30
  5814  0D85                     __ptext30:	
  5815 ;; *************** function _ResetIOCycle *****************
  5816 ;; Defined at:
  5817 ;;		line 123 in file "IOCycle.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;		None
  5820 ;; Auto vars:     Size  Location     Type
  5821 ;;  loop            1    3[COMMON] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  1    wreg      void 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 0/0
  5828 ;;		On exit  : 0/0
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5831 ;;      Params:         0       0       0       0       0       0       0
  5832 ;;      Locals:         1       0       0       0       0       0       0
  5833 ;;      Temps:          1       0       0       0       0       0       0
  5834 ;;      Totals:         2       0       0       0       0       0       0
  5835 ;;Total ram usage:        2 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    1
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_SetIOConfig
  5842 ;;		_main
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           
  5847                           ;psect for function _ResetIOCycle
  5848  0D85                     _ResetIOCycle:	
  5849                           
  5850                           ;IOCycle.c: 125: unsigned char loop;
  5851                           ;IOCycle.c: 127: for(loop=0;loop<10;loop++)
  5852                           
  5853                           ;incstack = 0
  5854                           ; Regs used in _ResetIOCycle: [wreg+status,2+status,0]
  5855  0D85  01F3               	clrf	ResetIOCycle@loop
  5856  0D86                     L14:	
  5857  0D86  300A               	movlw	10
  5858  0D87  0273               	subwf	ResetIOCycle@loop,w
  5859  0D88  1803               	btfsc	3,0
  5860  0D89  0008               	return
  5861                           
  5862                           ;IOCycle.c: 128: {
  5863                           ;IOCycle.c: 130: CurrentIOCycle= 0;
  5864  0D8A  0020               	movlb	0	; select bank0
  5865  0D8B  01CA               	clrf	_CurrentIOCycle
  5866                           
  5867                           ;IOCycle.c: 131: CurrentIOSensor.Config = Setting.IOConfig[0];
  5868  0D8C  0021               	movlb	1	; select bank1
  5869  0D8D  0856               	movf	_Setting^(0+128),w
  5870  0D8E  00F2               	movwf	??_ResetIOCycle
  5871  0D8F  0872               	movf	??_ResetIOCycle,w
  5872  0D90  0020               	movlb	0	; select bank0
  5873  0D91  00CC               	movwf	_CurrentIOSensor
  5874                           
  5875                           ;IOCycle.c: 132: CurrentIOPin=0;
  5876  0D92  01CB               	clrf	_CurrentIOPin
  5877  0D93  3001               	movlw	1
  5878  0D94  00F2               	movwf	??_ResetIOCycle
  5879  0D95  0872               	movf	??_ResetIOCycle,w
  5880  0D96  07F3               	addwf	ResetIOCycle@loop,f
  5881  0D97  2D86               	goto	L14
  5882  0D98                     __end_of_ResetIOCycle:	
  5883                           
  5884                           	psect	text31
  5885  0E3B                     __ptext31:	
  5886 ;; *************** function _SaveSetting *****************
  5887 ;; Defined at:
  5888 ;;		line 345 in file "main.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  idx             1    1[BANK0 ] unsigned char 
  5893 ;;  pointer         1    0[BANK0 ] PTR unsigned char 
  5894 ;;		 -> Setting(11), 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  1    wreg      void 
  5897 ;; Registers used:
  5898 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5904 ;;      Params:         0       0       0       0       0       0       0
  5905 ;;      Locals:         0       2       0       0       0       0       0
  5906 ;;      Temps:          1       0       0       0       0       0       0
  5907 ;;      Totals:         1       2       0       0       0       0       0
  5908 ;;Total ram usage:        3 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    2
  5911 ;; This function calls:
  5912 ;;		_eeprom_write
  5913 ;; This function is called by:
  5914 ;;		_PresetSingleRegister
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           
  5919                           ;psect for function _SaveSetting
  5920  0E3B                     _SaveSetting:	
  5921                           
  5922                           ;main.c: 347: unsigned char idx;
  5923                           ;main.c: 348: unsigned char * pointer = (unsigned char *) &Setting;
  5924                           
  5925                           ;incstack = 0
  5926                           ; Regs used in _SaveSetting: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5927  0E3B  30D6               	movlw	(low (_Setting| 0))& (0+255)
  5928  0E3C  00F6               	movwf	??_SaveSetting
  5929  0E3D  0876               	movf	??_SaveSetting,w
  5930  0E3E  0020               	movlb	0	; select bank0
  5931  0E3F  00CE               	movwf	SaveSetting@pointer
  5932                           
  5933                           ;main.c: 350: for(idx=0; idx < sizeof(Setting);idx++)
  5934  0E40  01CF               	clrf	SaveSetting@idx
  5935  0E41                     L15:	
  5936  0E41  300B               	movlw	11
  5937  0E42  024F               	subwf	SaveSetting@idx,w
  5938  0E43  1803               	btfsc	3,0
  5939  0E44  0008               	return
  5940                           
  5941                           ;main.c: 351: eeprom_write(idx, *(pointer++));
  5942  0E45  084E               	movf	SaveSetting@pointer,w
  5943  0E46  0086               	movwf	6
  5944  0E47  0187               	clrf	7
  5945  0E48  0801               	movf	1,w
  5946  0E49  00F6               	movwf	??_SaveSetting
  5947  0E4A  0876               	movf	??_SaveSetting,w
  5948  0E4B  00F2               	movwf	eeprom_write@value
  5949  0E4C  084F               	movf	SaveSetting@idx,w
  5950  0E4D  318E  2699  318E   	fcall	_eeprom_write
  5951  0E50  3001               	movlw	1
  5952  0E51  00F6               	movwf	??_SaveSetting
  5953  0E52  0876               	movf	??_SaveSetting,w
  5954  0E53  0020               	movlb	0	; select bank0
  5955  0E54  07CE               	addwf	SaveSetting@pointer,f
  5956  0E55  3001               	movlw	1
  5957  0E56  00F6               	movwf	??_SaveSetting
  5958  0E57  0876               	movf	??_SaveSetting,w
  5959  0E58  07CF               	addwf	SaveSetting@idx,f
  5960  0E59  2E41               	goto	L15
  5961  0E5A                     __end_of_SaveSetting:	
  5962                           
  5963                           	psect	text32
  5964  0E99                     __ptext32:	
  5965 ;; *************** function _eeprom_write *****************
  5966 ;; Defined at:
  5967 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic\eewrite.c"
  5968 ;; Parameters:    Size  Location     Type
  5969 ;;  addr            1    wreg     unsigned char 
  5970 ;;  value           1    2[COMMON] unsigned char 
  5971 ;; Auto vars:     Size  Location     Type
  5972 ;;  addr            1    5[COMMON] unsigned char 
  5973 ;; Return value:  Size  Location     Type
  5974 ;;                  1    wreg      void 
  5975 ;; Registers used:
  5976 ;;		wreg, status,2, status,0
  5977 ;; Tracked objects:
  5978 ;;		On entry : 0/0
  5979 ;;		On exit  : 0/0
  5980 ;;		Unchanged: 0/0
  5981 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  5982 ;;      Params:         1       0       0       0       0       0       0
  5983 ;;      Locals:         1       0       0       0       0       0       0
  5984 ;;      Temps:          2       0       0       0       0       0       0
  5985 ;;      Totals:         4       0       0       0       0       0       0
  5986 ;;Total ram usage:        4 bytes
  5987 ;; Hardware stack levels used:    1
  5988 ;; Hardware stack levels required when called:    1
  5989 ;; This function calls:
  5990 ;;		Nothing
  5991 ;; This function is called by:
  5992 ;;		_SaveSetting
  5993 ;; This function uses a non-reentrant model
  5994 ;;
  5995                           
  5996                           
  5997                           ;psect for function _eeprom_write
  5998  0E99                     _eeprom_write:	
  5999                           
  6000                           ;incstack = 0
  6001                           ; Regs used in _eeprom_write: [wreg+status,2+status,0]
  6002                           ;eeprom_write@addr stored from wreg
  6003  0E99  00F5               	movwf	eeprom_write@addr
  6004  0E9A                     l815:	
  6005  0E9A  0023               	movlb	3	; select bank3
  6006  0E9B  1895               	btfsc	21,1	;volsfr
  6007  0E9C  2E9A               	goto	l815
  6008  0E9D  0875               	movf	eeprom_write@addr,w
  6009  0E9E  00F3               	movwf	??_eeprom_write
  6010  0E9F  01F4               	clrf	??_eeprom_write+1
  6011  0EA0  0873               	movf	??_eeprom_write,w
  6012  0EA1  0091               	movwf	17	;volatile
  6013  0EA2  0874               	movf	??_eeprom_write+1,w
  6014  0EA3  0092               	movwf	18	;volatile
  6015  0EA4  0872               	movf	eeprom_write@value,w
  6016  0EA5  0093               	movwf	19	;volatile
  6017  0EA6  303F               	movlw	63
  6018  0EA7  00F3               	movwf	??_eeprom_write
  6019  0EA8  0873               	movf	??_eeprom_write,w
  6020  0EA9  0595               	andwf	21,f	;volsfr
  6021  0EAA  0020               	movlb	0	; select bank0
  6022  0EAB  1003               	bcf	3,0	;volatile
  6023  0EAC  1B8B               	btfsc	11,7	;volatile
  6024  0EAD  1403               	bsf	3,0	;volatile
  6025  0EAE  138B               	bcf	11,7	;volatile
  6026  0EAF  0023               	movlb	3	; select bank3
  6027  0EB0  1515               	bsf	21,2	;volsfr
  6028  0EB1  3055               	movlw	85
  6029  0EB2  0096               	movwf	22	;volsfr
  6030  0EB3  30AA               	movlw	170
  6031  0EB4  0096               	movwf	22	;volsfr
  6032  0EB5  1495               	bsf	21,1	;volsfr
  6033  0EB6  1115               	bcf	21,2	;volsfr
  6034  0EB7  0020               	movlb	0	; select bank0
  6035  0EB8  1C03               	btfss	3,0	;volatile
  6036  0EB9  0008               	return
  6037  0EBA  178B               	bsf	11,7	;volatile
  6038  0EBB  0008               	return
  6039  0EBC                     __end_of_eeprom_write:	
  6040                           
  6041                           	psect	text33
  6042  0E1E                     __ptext33:	
  6043 ;; *************** function _ForceSingleCoil *****************
  6044 ;; Defined at:
  6045 ;;		line 1486 in file "main.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;		None
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6059 ;;      Params:         0       0       0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0
  6061 ;;      Temps:          0       1       0       0       0       0       0
  6062 ;;      Totals:         0       1       0       0       0       0       0
  6063 ;;Total ram usage:        1 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    4
  6066 ;; This function calls:
  6067 ;;		_SendFrameError
  6068 ;;		_SendPresetFrame
  6069 ;;		_SetSingleCoil
  6070 ;; This function is called by:
  6071 ;;		_ExecuteCommand
  6072 ;; This function uses a non-reentrant model
  6073 ;;
  6074                           
  6075                           
  6076                           ;psect for function _ForceSingleCoil
  6077  0E1E                     _ForceSingleCoil:	
  6078                           
  6079                           ;main.c: 1488: if(ModbusAddress < 10)
  6080                           
  6081                           ;incstack = 0
  6082                           ; Regs used in _ForceSingleCoil: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6083  0E1E  3000               	movlw	0
  6084  0E1F  0020               	movlb	0	; select bank0
  6085  0E20  0227               	subwf	_ModbusAddress+1,w
  6086  0E21  300A               	movlw	10
  6087  0E22  1903               	skipnz
  6088  0E23  0226               	subwf	_ModbusAddress,w
  6089  0E24  1803               	skipnc
  6090  0E25  2E37               	goto	l4115
  6091                           
  6092                           ;main.c: 1489: {
  6093                           ;main.c: 1491: SetSingleCoil(ModbusAddress, (unsigned char) ( ModbusData ==0 ? 0 : 1));
  6094  0E26  0824               	movf	_ModbusData,w
  6095  0E27  0425               	iorwf	_ModbusData+1,w
  6096  0E28  1903               	btfsc	3,2
  6097  0E29  2E2C               	goto	u4190
  6098  0E2A  3001               	movlw	1
  6099  0E2B  2E2D               	goto	u4200
  6100  0E2C                     u4190:	
  6101  0E2C  3000               	movlw	0
  6102  0E2D                     u4200:	
  6103  0E2D  00D8               	movwf	??_ForceSingleCoil
  6104  0E2E  0858               	movf	??_ForceSingleCoil,w
  6105  0E2F  00CE               	movwf	SetSingleCoil@value
  6106  0E30  0826               	movf	_ModbusAddress,w
  6107  0E31  318D  2573  318E   	fcall	_SetSingleCoil
  6108                           
  6109                           ;main.c: 1492: SendPresetFrame();
  6110  0E34  318D  25D5         	fcall	_SendPresetFrame
  6111                           
  6112                           ;main.c: 1494: }
  6113  0E36  0008               	return
  6114  0E37                     l4115:	
  6115                           
  6116                           ;main.c: 1495: else
  6117                           ;main.c: 1496: SendFrameError( 2);
  6118  0E37  3002               	movlw	2
  6119  0E38  318D  25BF         	fcall	_SendFrameError
  6120  0E3A  0008               	return
  6121  0E3B                     __end_of_ForceSingleCoil:	
  6122                           
  6123                           	psect	text34
  6124  0D73                     __ptext34:	
  6125 ;; *************** function _SetSingleCoil *****************
  6126 ;; Defined at:
  6127 ;;		line 1464 in file "main.c"
  6128 ;; Parameters:    Size  Location     Type
  6129 ;;  thePin          1    wreg     unsigned char 
  6130 ;;  value           1    0[BANK0 ] unsigned char 
  6131 ;; Auto vars:     Size  Location     Type
  6132 ;;  thePin          1    2[BANK0 ] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  1    wreg      void 
  6135 ;; Registers used:
  6136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6142 ;;      Params:         0       1       0       0       0       0       0
  6143 ;;      Locals:         0       1       0       0       0       0       0
  6144 ;;      Temps:          0       1       0       0       0       0       0
  6145 ;;      Totals:         0       3       0       0       0       0       0
  6146 ;;Total ram usage:        3 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    2
  6149 ;; This function calls:
  6150 ;;		_WriteIO
  6151 ;; This function is called by:
  6152 ;;		_WriteAllCoils
  6153 ;;		_ForceSingleCoil
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           
  6158                           ;psect for function _SetSingleCoil
  6159  0D73                     _SetSingleCoil:	
  6160                           
  6161                           ;incstack = 0
  6162                           ; Regs used in _SetSingleCoil: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6163                           ;SetSingleCoil@thePin stored from wreg
  6164  0D73  0020               	movlb	0	; select bank0
  6165  0D74  00D0               	movwf	SetSingleCoil@thePin
  6166                           
  6167                           ;main.c: 1467: if(Setting.IOConfig[thePin] != 6)
  6168  0D75  0850               	movf	SetSingleCoil@thePin,w
  6169  0D76  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  6170  0D77  0086               	movwf	6
  6171  0D78  0187               	clrf	7
  6172  0D79  3006               	movlw	6
  6173  0D7A  0601               	xorwf	1,w
  6174  0D7B  1D03               	btfss	3,2
  6175  0D7C  0008               	return
  6176                           
  6177                           ;main.c: 1469: WriteIO(thePin,value);
  6178                           
  6179                           ;main.c: 1468: return;
  6180  0D7D  084E               	movf	SetSingleCoil@value,w
  6181  0D7E  00CF               	movwf	??_SetSingleCoil
  6182  0D7F  084F               	movf	??_SetSingleCoil,w
  6183  0D80  00F2               	movwf	WriteIO@value
  6184  0D81  0850               	movf	SetSingleCoil@thePin,w
  6185  0D82  3186  263C         	fcall	_WriteIO
  6186  0D84  0008               	return
  6187  0D85                     __end_of_SetSingleCoil:	
  6188                           
  6189                           	psect	text35
  6190  063C                     __ptext35:	
  6191 ;; *************** function _WriteIO *****************
  6192 ;; Defined at:
  6193 ;;		line 172 in file "IOCycle.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;  Pin             1    wreg     unsigned char 
  6196 ;;  value           1    2[COMMON] unsigned char 
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  Pin             1    6[COMMON] unsigned char 
  6199 ;;  nmask           1    5[COMMON] unsigned char 
  6200 ;;  mask            1    4[COMMON] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      void 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6210 ;;      Params:         1       0       0       0       0       0       0
  6211 ;;      Locals:         3       0       0       0       0       0       0
  6212 ;;      Temps:          1       0       0       0       0       0       0
  6213 ;;      Totals:         5       0       0       0       0       0       0
  6214 ;;Total ram usage:        5 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    1
  6217 ;; This function calls:
  6218 ;;		Nothing
  6219 ;; This function is called by:
  6220 ;;		_SetSingleCoil
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function _WriteIO
  6226  063C                     _WriteIO:	
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _WriteIO: [wreg-fsr0h+status,2+status,0+pclath]
  6230                           ;WriteIO@Pin stored from wreg
  6231  063C  00F6               	movwf	WriteIO@Pin
  6232                           
  6233                           ;IOCycle.c: 175: unsigned char mask = IOMASK[Pin];
  6234  063D  0876               	movf	WriteIO@Pin,w
  6235  063E  3E0B               	addlw	low (_IOMASK| (0+32768))
  6236  063F  0084               	movwf	4
  6237  0640  3088               	movlw	high (_IOMASK| (0+32768))
  6238  0641  1803               	skipnc
  6239  0642  3E01               	addlw	1
  6240  0643  0085               	movwf	5
  6241  0644  0800               	movf	0,w	;code access
  6242  0645  00F3               	movwf	??_WriteIO
  6243  0646  0873               	movf	??_WriteIO,w
  6244  0647  00F4               	movwf	WriteIO@mask
  6245                           
  6246                           ;IOCycle.c: 176: unsigned char nmask = NOT_IOMASK[Pin];
  6247  0648  0876               	movf	WriteIO@Pin,w
  6248  0649  3E00               	addlw	low (_NOT_IOMASK| (0+32768))
  6249  064A  0084               	movwf	4
  6250  064B  3088               	movlw	high (_NOT_IOMASK| (0+32768))
  6251  064C  1803               	skipnc
  6252  064D  3E01               	addlw	1
  6253  064E  0085               	movwf	5
  6254  064F  0800               	movf	0,w	;code access
  6255  0650  00F3               	movwf	??_WriteIO
  6256  0651  0873               	movf	??_WriteIO,w
  6257  0652  00F5               	movwf	WriteIO@nmask
  6258                           
  6259                           ;IOCycle.c: 178: if(Pin <5)
  6260  0653  3005               	movlw	5
  6261  0654  0276               	subwf	WriteIO@Pin,w
  6262  0655  1803               	skipnc
  6263  0656  2E6A               	goto	l2493
  6264                           
  6265                           ;IOCycle.c: 179: {
  6266                           ;IOCycle.c: 180: if(value==0)
  6267  0657  0872               	movf	WriteIO@value,w
  6268  0658  1D03               	btfss	3,2
  6269  0659  2E62               	goto	l109
  6270                           
  6271                           ;IOCycle.c: 181: {
  6272                           ;IOCycle.c: 182: (GIE = 0);
  6273  065A  138B               	bcf	11,7	;volatile
  6274                           
  6275                           ;IOCycle.c: 183: PORTB &= nmask;
  6276  065B  0875               	movf	WriteIO@nmask,w
  6277  065C  00F3               	movwf	??_WriteIO
  6278  065D  0873               	movf	??_WriteIO,w
  6279  065E  0020               	movlb	0	; select bank0
  6280  065F  058D               	andwf	13,f	;volatile
  6281                           
  6282                           ;IOCycle.c: 184: (GIE = 1);
  6283  0660  178B               	bsf	11,7	;volatile
  6284                           
  6285                           ;IOCycle.c: 185: }
  6286  0661  0008               	return
  6287  0662                     l109:	
  6288                           
  6289                           ;IOCycle.c: 186: else
  6290                           ;IOCycle.c: 187: {
  6291                           ;IOCycle.c: 188: (GIE = 0);
  6292  0662  138B               	bcf	11,7	;volatile
  6293                           
  6294                           ;IOCycle.c: 189: PORTB |= mask;
  6295  0663  0874               	movf	WriteIO@mask,w
  6296  0664  00F3               	movwf	??_WriteIO
  6297  0665  0873               	movf	??_WriteIO,w
  6298  0666  0020               	movlb	0	; select bank0
  6299  0667  048D               	iorwf	13,f	;volatile
  6300                           
  6301                           ;IOCycle.c: 190: (GIE = 1);
  6302  0668  178B               	bsf	11,7	;volatile
  6303                           
  6304                           ;IOCycle.c: 191: }
  6305                           ;IOCycle.c: 193: }
  6306  0669  0008               	return
  6307  066A                     l2493:	
  6308                           
  6309                           ;IOCycle.c: 194: else
  6310                           ;IOCycle.c: 195: {
  6311                           ;IOCycle.c: 196: if(value==0)
  6312  066A  0872               	movf	WriteIO@value,w
  6313  066B  1D03               	btfss	3,2
  6314  066C  2E75               	goto	l112
  6315                           
  6316                           ;IOCycle.c: 197: {
  6317                           ;IOCycle.c: 198: (GIE = 0);
  6318  066D  138B               	bcf	11,7	;volatile
  6319                           
  6320                           ;IOCycle.c: 199: PORTA &= nmask;
  6321  066E  0875               	movf	WriteIO@nmask,w
  6322  066F  00F3               	movwf	??_WriteIO
  6323  0670  0873               	movf	??_WriteIO,w
  6324  0671  0020               	movlb	0	; select bank0
  6325  0672  058C               	andwf	12,f	;volatile
  6326                           
  6327                           ;IOCycle.c: 200: (GIE = 1);
  6328  0673  178B               	bsf	11,7	;volatile
  6329                           
  6330                           ;IOCycle.c: 201: }
  6331  0674  0008               	return
  6332  0675                     l112:	
  6333                           
  6334                           ;IOCycle.c: 202: else
  6335                           ;IOCycle.c: 203: {
  6336                           ;IOCycle.c: 204: (GIE = 0);
  6337  0675  138B               	bcf	11,7	;volatile
  6338                           
  6339                           ;IOCycle.c: 205: PORTA |= mask;
  6340  0676  0874               	movf	WriteIO@mask,w
  6341  0677  00F3               	movwf	??_WriteIO
  6342  0678  0873               	movf	??_WriteIO,w
  6343  0679  0020               	movlb	0	; select bank0
  6344  067A  048C               	iorwf	12,f	;volatile
  6345                           
  6346                           ;IOCycle.c: 206: (GIE = 1);
  6347  067B  178B               	bsf	11,7	;volatile
  6348  067C  0008               	return
  6349  067D                     __end_of_WriteIO:	
  6350                           
  6351                           	psect	text36
  6352  0DD5                     __ptext36:	
  6353 ;; *************** function _SendPresetFrame *****************
  6354 ;; Defined at:
  6355 ;;		line 1093 in file "main.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6369 ;;      Params:         0       0       0       0       0       0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    3
  6376 ;; This function calls:
  6377 ;;		_InitModbusPacket
  6378 ;;		_SendModbusPacket
  6379 ;; This function is called by:
  6380 ;;		_WriteAllCoils
  6381 ;;		_ForceSingleCoil
  6382 ;;		_PresetSingleRegister
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function _SendPresetFrame
  6388  0DD5                     _SendPresetFrame:	
  6389                           
  6390                           ;main.c: 1095: InitModbusPacket();
  6391                           
  6392                           ;incstack = 0
  6393                           ; Regs used in _SendPresetFrame: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6394  0DD5  318D  2516  318D   	fcall	_InitModbusPacket
  6395  0DD8  0020               	banksel	_ModbusAddress	;# 
  6396  0DD9  0827               	movf	_ModbusAddress+1,w	;# 
  6397  0DDA  0021               	banksel	_ModbusPacketBuffer	;# 
  6398  0DDB  00B8               	movwf	(_ModbusPacketBuffer& (0+127)+2)	;# 
  6399  0DDC  0020               	banksel	_ModbusAddress	;# 
  6400  0DDD  0826               	movf	_ModbusAddress,w	;# 
  6401  0DDE  0021               	banksel	_ModbusPacketBuffer	;# 
  6402  0DDF  00B9               	movwf	(_ModbusPacketBuffer& (0+127)+3)	;# 
  6403  0DE0  0020               	banksel	_ModbusData	;# 
  6404  0DE1  0825               	movf	_ModbusData+1,w	;# 
  6405  0DE2  0021               	banksel	_ModbusPacketBuffer	;# 
  6406  0DE3  00BA               	movwf	(_ModbusPacketBuffer& (0+127)+4)	;# 
  6407  0DE4  0020               	banksel	_ModbusData	;# 
  6408  0DE5  0824               	movf	_ModbusData,w	;# 
  6409  0DE6  0021               	banksel	_ModbusPacketBuffer	;# 
  6410  0DE7  00BB               	movwf	(_ModbusPacketBuffer& (0+127)+5)	;# 
  6411                           
  6412                           ;main.c: 1128: SendModbusPacket(6);
  6413  0DE8  3006               	movlw	6
  6414  0DE9  318F  27D0         	fcall	_SendModbusPacket
  6415  0DEB  0008               	return
  6416  0DEC                     __end_of_SendPresetFrame:	
  6417                           
  6418                           	psect	text37
  6419  0DBF                     __ptext37:	
  6420 ;; *************** function _SendFrameError *****************
  6421 ;; Defined at:
  6422 ;;		line 914 in file "main.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  ErrorCode       1    wreg     unsigned char 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  ErrorCode       1    9[BANK0 ] unsigned char 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  1    wreg      void 
  6429 ;; Registers used:
  6430 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6436 ;;      Params:         0       0       0       0       0       0       0
  6437 ;;      Locals:         0       1       0       0       0       0       0
  6438 ;;      Temps:          0       1       0       0       0       0       0
  6439 ;;      Totals:         0       2       0       0       0       0       0
  6440 ;;Total ram usage:        2 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    3
  6443 ;; This function calls:
  6444 ;;		_InitModbusPacket
  6445 ;;		_SendModbusPacket
  6446 ;; This function is called by:
  6447 ;;		_SendBytesFrame
  6448 ;;		_ReadHoldingRegister
  6449 ;;		_ReadCurrentRegister
  6450 ;;		_ReadInputStatus
  6451 ;;		_ForceSingleCoil
  6452 ;;		_PresetSingleRegister
  6453 ;;		_ExecuteCommand
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function _SendFrameError
  6459  0DBF                     _SendFrameError:	
  6460                           
  6461                           ;incstack = 0
  6462                           ; Regs used in _SendFrameError: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6463                           ;SendFrameError@ErrorCode stored from wreg
  6464  0DBF  0020               	movlb	0	; select bank0
  6465  0DC0  00D7               	movwf	SendFrameError@ErrorCode
  6466                           
  6467                           ;main.c: 916: InitModbusPacket();
  6468  0DC1  318D  2516  318D   	fcall	_InitModbusPacket
  6469                           
  6470                           ;main.c: 917: ModbusPacketBuffer[1]= (unsigned char) (ModbusFunction | 0x80);
  6471  0DC4  0020               	movlb	0	; select bank0
  6472  0DC5  083B               	movf	_ModbusFunction,w
  6473  0DC6  3880               	iorlw	128
  6474  0DC7  00D6               	movwf	??_SendFrameError
  6475  0DC8  0856               	movf	??_SendFrameError,w
  6476  0DC9  0021               	movlb	1	; select bank1
  6477  0DCA  00B7               	movwf	(_ModbusPacketBuffer^(0+128)+1)
  6478                           
  6479                           ;main.c: 918: ModbusPacketBuffer[2]= ErrorCode;
  6480  0DCB  0020               	movlb	0	; select bank0
  6481  0DCC  0857               	movf	SendFrameError@ErrorCode,w
  6482  0DCD  00D6               	movwf	??_SendFrameError
  6483  0DCE  0856               	movf	??_SendFrameError,w
  6484  0DCF  0021               	movlb	1	; select bank1
  6485  0DD0  00B8               	movwf	(_ModbusPacketBuffer^(0+128)+2)
  6486                           
  6487                           ;main.c: 919: SendModbusPacket(3);
  6488  0DD1  3003               	movlw	3
  6489  0DD2  318F  27D0         	fcall	_SendModbusPacket
  6490  0DD4  0008               	return
  6491  0DD5                     __end_of_SendFrameError:	
  6492                           
  6493                           	psect	text38
  6494  0FD0                     __ptext38:	
  6495 ;; *************** function _SendModbusPacket *****************
  6496 ;; Defined at:
  6497 ;;		line 886 in file "main.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;  BufferSize      1    wreg     unsigned char 
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;  BufferSize      1    4[BANK0 ] unsigned char 
  6502 ;;  CRC             2    5[BANK0 ] unsigned short 
  6503 ;;  loop            1    7[BANK0 ] unsigned char 
  6504 ;; Return value:  Size  Location     Type
  6505 ;;                  1    wreg      void 
  6506 ;; Registers used:
  6507 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6508 ;; Tracked objects:
  6509 ;;		On entry : 0/0
  6510 ;;		On exit  : 0/0
  6511 ;;		Unchanged: 0/0
  6512 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6513 ;;      Params:         0       0       0       0       0       0       0
  6514 ;;      Locals:         0       4       0       0       0       0       0
  6515 ;;      Temps:          1       0       0       0       0       0       0
  6516 ;;      Totals:         1       4       0       0       0       0       0
  6517 ;;Total ram usage:        5 bytes
  6518 ;; Hardware stack levels used:    1
  6519 ;; Hardware stack levels required when called:    2
  6520 ;; This function calls:
  6521 ;;		_CRC16
  6522 ;;		_putch
  6523 ;; This function is called by:
  6524 ;;		_SendFrameError
  6525 ;;		_SendReadByteFrame
  6526 ;;		_SendReadFrame
  6527 ;;		_SendBytesFrame
  6528 ;;		_SendPresetFrame
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           
  6533                           ;psect for function _SendModbusPacket
  6534  0FD0                     _SendModbusPacket:	
  6535                           
  6536                           ;incstack = 0
  6537                           ; Regs used in _SendModbusPacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6538                           ;SendModbusPacket@BufferSize stored from wreg
  6539  0FD0  0020               	movlb	0	; select bank0
  6540  0FD1  00D2               	movwf	SendModbusPacket@BufferSize
  6541                           
  6542                           ;main.c: 888: unsigned short CRC;
  6543                           ;main.c: 889: unsigned char loop;
  6544                           ;main.c: 891: if(ModbusSlave==0) return;
  6545  0FD2  083A               	movf	_ModbusSlave,w
  6546  0FD3  1903               	btfsc	3,2
  6547  0FD4  0008               	return
  6548                           
  6549                           ;main.c: 893: CRC = CRC16(ModbusPacketBuffer,BufferSize);
  6550  0FD5  0852               	movf	SendModbusPacket@BufferSize,w
  6551  0FD6  00F6               	movwf	??_SendModbusPacket
  6552  0FD7  0876               	movf	??_SendModbusPacket,w
  6553  0FD8  00F2               	movwf	CRC16@num
  6554  0FD9  30B6               	movlw	(low (_ModbusPacketBuffer| 0))& (0+255)
  6555  0FDA  3185  25B8  318F   	fcall	_CRC16
  6556  0FDD  0873               	movf	?_CRC16+1,w
  6557  0FDE  0020               	movlb	0	; select bank0
  6558  0FDF  00D4               	movwf	SendModbusPacket@CRC+1
  6559  0FE0  0872               	movf	?_CRC16,w
  6560  0FE1  00D3               	movwf	SendModbusPacket@CRC
  6561                           
  6562                           ;main.c: 895: ModbusOnTransmit=1;
  6563  0FE2  156A               	bsf	_ModbusOnTransmit/(0+8),_ModbusOnTransmit& (0+7)
  6564                           
  6565                           ;main.c: 896: RB0=1;
  6566  0FE3  140D               	bsf	13,0	;volatile
  6567                           
  6568                           ;main.c: 898: for(loop=0;loop<BufferSize;loop++)
  6569  0FE4  01D5               	clrf	SendModbusPacket@loop
  6570  0FE5                     l3651:	
  6571  0FE5  0852               	movf	SendModbusPacket@BufferSize,w
  6572  0FE6  0255               	subwf	SendModbusPacket@loop,w
  6573  0FE7  1803               	btfsc	3,0
  6574  0FE8  2FF7               	goto	l3653
  6575                           
  6576                           ;main.c: 899: putch(ModbusPacketBuffer[loop]);
  6577  0FE9  0855               	movf	SendModbusPacket@loop,w
  6578  0FEA  3EB6               	addlw	(low (_ModbusPacketBuffer| 0))& (0+255)
  6579  0FEB  0086               	movwf	6
  6580  0FEC  0187               	clrf	7
  6581  0FED  0801               	movf	1,w
  6582  0FEE  318E  26BC  318F   	fcall	_putch
  6583  0FF1  3001               	movlw	1
  6584  0FF2  00F6               	movwf	??_SendModbusPacket
  6585  0FF3  0876               	movf	??_SendModbusPacket,w
  6586  0FF4  0020               	movlb	0	; select bank0
  6587  0FF5  07D5               	addwf	SendModbusPacket@loop,f
  6588  0FF6  2FE5               	goto	l3651
  6589  0FF7                     l3653:	
  6590                           
  6591                           ;main.c: 901: putch(CRC & 0xFF);
  6592  0FF7  0853               	movf	SendModbusPacket@CRC,w
  6593  0FF8  318E  26BC  318F   	fcall	_putch
  6594                           
  6595                           ;main.c: 902: putch(CRC >> 8);
  6596  0FFB  0020               	movlb	0	; select bank0
  6597  0FFC  0854               	movf	SendModbusPacket@CRC+1,w
  6598  0FFD  318E  26BC         	fcall	_putch
  6599  0FFF  0008               	return
  6600  1000                     __end_of_SendModbusPacket:	
  6601                           
  6602                           	psect	text39
  6603  0EBC                     __ptext39:	
  6604 ;; *************** function _putch *****************
  6605 ;; Defined at:
  6606 ;;		line 835 in file "main.c"
  6607 ;; Parameters:    Size  Location     Type
  6608 ;;  char_out        1    wreg     unsigned char 
  6609 ;; Auto vars:     Size  Location     Type
  6610 ;;  char_out        1    3[COMMON] unsigned char 
  6611 ;;  temp            1    4[COMMON] unsigned char 
  6612 ;; Return value:  Size  Location     Type
  6613 ;;                  1    wreg      void 
  6614 ;; Registers used:
  6615 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6616 ;; Tracked objects:
  6617 ;;		On entry : 0/0
  6618 ;;		On exit  : 0/0
  6619 ;;		Unchanged: 0/0
  6620 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6621 ;;      Params:         0       0       0       0       0       0       0
  6622 ;;      Locals:         2       0       0       0       0       0       0
  6623 ;;      Temps:          1       0       0       0       0       0       0
  6624 ;;      Totals:         3       0       0       0       0       0       0
  6625 ;;Total ram usage:        3 bytes
  6626 ;; Hardware stack levels used:    1
  6627 ;; Hardware stack levels required when called:    1
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_SendModbusPacket
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           
  6636                           ;psect for function _putch
  6637  0EBC                     _putch:	
  6638                           
  6639                           ;incstack = 0
  6640                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0]
  6641                           ;putch@char_out stored from wreg
  6642  0EBC  00F3               	movwf	putch@char_out
  6643                           
  6644                           ;main.c: 837: unsigned char temp;
  6645                           ;main.c: 839: SerialSum+= (unsigned char) char_out;
  6646  0EBD  0873               	movf	putch@char_out,w
  6647  0EBE  00F2               	movwf	??_putch
  6648  0EBF  0872               	movf	??_putch,w
  6649  0EC0  0020               	movlb	0	; select bank0
  6650  0EC1  07BD               	addwf	_SerialSum,f
  6651                           
  6652                           ;main.c: 841: temp = (unsigned char) (InFiFo + 1);
  6653  0EC2  0840               	movf	_InFiFo,w	;volatile
  6654  0EC3  3E01               	addlw	1
  6655  0EC4  00F2               	movwf	??_putch
  6656  0EC5  0872               	movf	??_putch,w
  6657  0EC6  00F4               	movwf	putch@temp
  6658                           
  6659                           ;main.c: 842: if(temp >= 32)
  6660  0EC7  3020               	movlw	32
  6661  0EC8  0274               	subwf	putch@temp,w
  6662  0EC9  1803               	btfsc	3,0
  6663                           
  6664                           ;main.c: 843: temp = 0;
  6665  0ECA  01F4               	clrf	putch@temp
  6666  0ECB                     l3627:	
  6667                           ;main.c: 846: while(temp == OutFiFo);
  6668                           
  6669  0ECB  0874               	movf	putch@temp,w
  6670  0ECC  0678               	xorwf	_OutFiFo,w	;volatile
  6671  0ECD  1903               	skipnz
  6672  0ECE  2ECB               	goto	l3627
  6673                           
  6674                           ;main.c: 849: SerialBuffer[InFiFo]=char_out;
  6675  0ECF  0873               	movf	putch@char_out,w
  6676  0ED0  00F2               	movwf	??_putch
  6677  0ED1  0020               	movlb	0	; select bank0
  6678  0ED2  0840               	movf	_InFiFo,w
  6679  0ED3  3E40               	addlw	(low (_SerialBuffer| (0+256)))& (0+255)
  6680  0ED4  0086               	movwf	6
  6681  0ED5  3001               	movlw	1	; select bank2/3
  6682  0ED6  0087               	movwf	7
  6683  0ED7  0872               	movf	??_putch,w
  6684  0ED8  0081               	movwf	1
  6685                           
  6686                           ;main.c: 851: InFiFo= temp;
  6687  0ED9  0874               	movf	putch@temp,w
  6688  0EDA  00F2               	movwf	??_putch
  6689  0EDB  0872               	movf	??_putch,w
  6690  0EDC  00C0               	movwf	_InFiFo	;volatile
  6691                           
  6692                           ;main.c: 854: TXIE=1;
  6693  0EDD  0021               	movlb	1	; select bank1
  6694  0EDE  1611               	bsf	17,4	;volatile
  6695  0EDF  0008               	return
  6696  0EE0                     __end_of_putch:	
  6697                           
  6698                           	psect	text40
  6699  0D16                     __ptext40:	
  6700 ;; *************** function _InitModbusPacket *****************
  6701 ;; Defined at:
  6702 ;;		line 907 in file "main.c"
  6703 ;; Parameters:    Size  Location     Type
  6704 ;;		None
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;		None
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  1    wreg      void 
  6709 ;; Registers used:
  6710 ;;		wreg
  6711 ;; Tracked objects:
  6712 ;;		On entry : 0/0
  6713 ;;		On exit  : 0/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6716 ;;      Params:         0       0       0       0       0       0       0
  6717 ;;      Locals:         0       0       0       0       0       0       0
  6718 ;;      Temps:          1       0       0       0       0       0       0
  6719 ;;      Totals:         1       0       0       0       0       0       0
  6720 ;;Total ram usage:        1 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    1
  6723 ;; This function calls:
  6724 ;;		Nothing
  6725 ;; This function is called by:
  6726 ;;		_SendFrameError
  6727 ;;		_SendReadByteFrame
  6728 ;;		_SendReadFrame
  6729 ;;		_SendBytesFrame
  6730 ;;		_SendPresetFrame
  6731 ;; This function uses a non-reentrant model
  6732 ;;
  6733                           
  6734                           
  6735                           ;psect for function _InitModbusPacket
  6736  0D16                     _InitModbusPacket:	
  6737                           
  6738                           ;main.c: 909: ModbusPacketBuffer[0]=Setting.SlaveAddress;
  6739                           
  6740                           ;incstack = 0
  6741                           ; Regs used in _InitModbusPacket: [wreg]
  6742  0D16  0021               	movlb	1	; select bank1
  6743  0D17  0860               	movf	(_Setting^(0+128)+10),w
  6744  0D18  00F2               	movwf	??_InitModbusPacket
  6745  0D19  0872               	movf	??_InitModbusPacket,w
  6746  0D1A  00B6               	movwf	_ModbusPacketBuffer^(0+128)
  6747                           
  6748                           ;main.c: 910: ModbusPacketBuffer[1]=ModbusFunction;
  6749  0D1B  0020               	movlb	0	; select bank0
  6750  0D1C  083B               	movf	_ModbusFunction,w
  6751  0D1D  00F2               	movwf	??_InitModbusPacket
  6752  0D1E  0872               	movf	??_InitModbusPacket,w
  6753  0D1F  0021               	movlb	1	; select bank1
  6754  0D20  00B7               	movwf	(_ModbusPacketBuffer^(0+128)+1)
  6755  0D21  0008               	return
  6756  0D22                     __end_of_InitModbusPacket:	
  6757                           
  6758                           	psect	text41
  6759  0769                     __ptext41:	
  6760 ;; *************** function _DoIOCycle *****************
  6761 ;; Defined at:
  6762 ;;		line 81 in file "IOCycle.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;		None
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  SensorPt        1    6[COMMON] PTR struct .
  6767 ;;		 -> IOSensorData(60), 
  6768 ;;  loop            1    0        unsigned char 
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  1    wreg      void 
  6771 ;; Registers used:
  6772 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6778 ;;      Params:         0       0       0       0       0       0       0
  6779 ;;      Locals:         1       0       0       0       0       0       0
  6780 ;;      Temps:          0       2       0       0       0       0       0
  6781 ;;      Totals:         1       2       0       0       0       0       0
  6782 ;;Total ram usage:        3 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    2
  6785 ;; This function calls:
  6786 ;;		_DealWithError
  6787 ;;		_ScanNextIOPin
  6788 ;;		___bmul
  6789 ;; This function is called by:
  6790 ;;		_main
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _DoIOCycle
  6796  0769                     _DoIOCycle:	
  6797                           
  6798                           ;IOCycle.c: 85: SensorDataUnion *SensorPt;
  6799                           ;IOCycle.c: 87: unsigned char loop;
  6800                           ;IOCycle.c: 89: if(CurrentIOCycle== 99)
  6801                           
  6802                           ;incstack = 0
  6803                           ; Regs used in _DoIOCycle: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6804  0769  3063               	movlw	99
  6805  076A  0020               	movlb	0	; select bank0
  6806  076B  064A               	xorwf	_CurrentIOCycle,w
  6807  076C  1D03               	btfss	3,2
  6808  076D  2F9E               	goto	l4197
  6809                           
  6810                           ;IOCycle.c: 90: {
  6811                           ;IOCycle.c: 91: if(CurrentIOStatus==0)
  6812  076E  084D               	movf	_CurrentIOStatus,w
  6813  076F  1D03               	btfss	3,2
  6814  0770  2F74               	goto	l80
  6815                           
  6816                           ;IOCycle.c: 92: DealWithError();
  6817  0771  318D  2505  3187   	fcall	_DealWithError
  6818  0774                     l80:	
  6819                           
  6820                           ;IOCycle.c: 96: SensorPt = &IOSensorData[CurrentIOPin];
  6821  0774  3006               	movlw	6
  6822  0775  0020               	movlb	0	; select bank0
  6823  0776  00CE               	movwf	??_DoIOCycle
  6824  0777  084E               	movf	??_DoIOCycle,w
  6825  0778  00F2               	movwf	___bmul@multiplicand
  6826  0779  084B               	movf	_CurrentIOPin,w
  6827  077A  318D  2551  3187   	fcall	___bmul
  6828  077D  3EA0               	addlw	160
  6829  077E  0020               	movlb	0	; select bank0
  6830  077F  00CF               	movwf	??_DoIOCycle+1
  6831  0780  084F               	movf	??_DoIOCycle+1,w
  6832  0781  00F6               	movwf	DoIOCycle@SensorPt
  6833                           
  6834                           ;IOCycle.c: 101: if(CurrentIOStatus==0xff)
  6835  0782  0A4D               	incf	_CurrentIOStatus,w
  6836  0783  1D03               	btfss	3,2
  6837  0784  2F8E               	goto	l4191
  6838                           
  6839                           ;IOCycle.c: 102: SensorPt->WORD[0]=0xffff;
  6840  0785  0876               	movf	DoIOCycle@SensorPt,w
  6841  0786  0086               	movwf	6
  6842  0787  3001               	movlw	1	; select bank2/3
  6843  0788  0087               	movwf	7
  6844  0789  30FF               	movlw	255
  6845  078A  3FC0               	movwi [0]fsr1
  6846  078B  30FF               	movlw	255
  6847  078C  3FC1               	movwi [1]fsr1
  6848  078D  2F9B               	goto	l4195
  6849  078E                     l4191:	
  6850                           
  6851                           ;IOCycle.c: 103: else
  6852                           ;IOCycle.c: 104: {
  6853                           ;IOCycle.c: 105: SensorPt->BYTE[0]=0;
  6854  078E  0876               	movf	DoIOCycle@SensorPt,w
  6855  078F  0086               	movwf	6
  6856  0790  3001               	movlw	1	; select bank2/3
  6857  0791  0087               	movwf	7
  6858  0792  0181               	clrf	1
  6859                           
  6860                           ;IOCycle.c: 106: SensorPt->BYTE[1]=CurrentIOStatus;
  6861  0793  084D               	movf	_CurrentIOStatus,w
  6862  0794  00CE               	movwf	??_DoIOCycle
  6863  0795  0A76               	incf	DoIOCycle@SensorPt,w
  6864  0796  0086               	movwf	6
  6865  0797  3001               	movlw	1	; select bank2/3
  6866  0798  0087               	movwf	7
  6867  0799  084E               	movf	??_DoIOCycle,w
  6868  079A  0081               	movwf	1
  6869  079B                     l4195:	
  6870                           
  6871                           ;IOCycle.c: 107: }
  6872                           ;IOCycle.c: 110: ScanNextIOPin();
  6873  079B  318F  272A         	fcall	_ScanNextIOPin
  6874                           
  6875                           ;IOCycle.c: 112: }
  6876  079D  0008               	return
  6877  079E                     l4197:	
  6878                           
  6879                           ;IOCycle.c: 113: else
  6880                           ;IOCycle.c: 115: {
  6881                           ;IOCycle.c: 117: ScanNextIOPin();
  6882  079E  318F  272A         	fcall	_ScanNextIOPin
  6883  07A0  0008               	return
  6884  07A1                     __end_of_DoIOCycle:	
  6885                           
  6886                           	psect	text42
  6887  0D51                     __ptext42:	
  6888 ;; *************** function ___bmul *****************
  6889 ;; Defined at:
  6890 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul8.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;  multiplier      1    wreg     unsigned char 
  6893 ;;  multiplicand    1    2[COMMON] unsigned char 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;  multiplier      1    5[COMMON] unsigned char 
  6896 ;;  product         1    4[COMMON] unsigned char 
  6897 ;; Return value:  Size  Location     Type
  6898 ;;                  1    wreg      unsigned char 
  6899 ;; Registers used:
  6900 ;;		wreg, status,2, status,0
  6901 ;; Tracked objects:
  6902 ;;		On entry : 0/0
  6903 ;;		On exit  : 0/0
  6904 ;;		Unchanged: 0/0
  6905 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6906 ;;      Params:         1       0       0       0       0       0       0
  6907 ;;      Locals:         2       0       0       0       0       0       0
  6908 ;;      Temps:          1       0       0       0       0       0       0
  6909 ;;      Totals:         4       0       0       0       0       0       0
  6910 ;;Total ram usage:        4 bytes
  6911 ;; Hardware stack levels used:    1
  6912 ;; Hardware stack levels required when called:    1
  6913 ;; This function calls:
  6914 ;;		Nothing
  6915 ;; This function is called by:
  6916 ;;		_DoIOCycle
  6917 ;;		_SetIOConfig
  6918 ;;		_SendBytesFrame
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           
  6923                           ;psect for function ___bmul
  6924  0D51                     ___bmul:	
  6925                           
  6926                           ;incstack = 0
  6927                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6928                           ;___bmul@multiplier stored from wreg
  6929  0D51  00F5               	movwf	___bmul@multiplier
  6930  0D52  01F4               	clrf	___bmul@product
  6931  0D53                     l3821:	
  6932  0D53  1C75               	btfss	___bmul@multiplier,0
  6933  0D54  2D59               	goto	l3825
  6934  0D55  0872               	movf	___bmul@multiplicand,w
  6935  0D56  00F3               	movwf	??___bmul
  6936  0D57  0873               	movf	??___bmul,w
  6937  0D58  07F4               	addwf	___bmul@product,f
  6938  0D59                     l3825:	
  6939  0D59  1003               	clrc
  6940  0D5A  0DF2               	rlf	___bmul@multiplicand,f
  6941  0D5B  1003               	clrc
  6942  0D5C  0CF5               	rrf	___bmul@multiplier,f
  6943  0D5D  0875               	movf	___bmul@multiplier,w
  6944  0D5E  1D03               	btfss	3,2
  6945  0D5F  2D53               	goto	l3821
  6946  0D60  0874               	movf	___bmul@product,w
  6947  0D61  0008               	return
  6948  0D62                     __end_of___bmul:	
  6949                           
  6950                           	psect	text43
  6951  0F2A                     __ptext43:	
  6952 ;; *************** function _ScanNextIOPin *****************
  6953 ;; Defined at:
  6954 ;;		line 58 in file "IOCycle.c"
  6955 ;; Parameters:    Size  Location     Type
  6956 ;;		None
  6957 ;; Auto vars:     Size  Location     Type
  6958 ;;  loop            1    3[COMMON] unsigned char 
  6959 ;; Return value:  Size  Location     Type
  6960 ;;                  1    wreg      void 
  6961 ;; Registers used:
  6962 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6963 ;; Tracked objects:
  6964 ;;		On entry : 0/0
  6965 ;;		On exit  : 0/0
  6966 ;;		Unchanged: 0/0
  6967 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  6968 ;;      Params:         0       0       0       0       0       0       0
  6969 ;;      Locals:         1       0       0       0       0       0       0
  6970 ;;      Temps:          1       0       0       0       0       0       0
  6971 ;;      Totals:         2       0       0       0       0       0       0
  6972 ;;Total ram usage:        2 bytes
  6973 ;; Hardware stack levels used:    1
  6974 ;; Hardware stack levels required when called:    1
  6975 ;; This function calls:
  6976 ;;		Nothing
  6977 ;; This function is called by:
  6978 ;;		_DoIOCycle
  6979 ;; This function uses a non-reentrant model
  6980 ;;
  6981                           
  6982                           
  6983                           ;psect for function _ScanNextIOPin
  6984  0F2A                     _ScanNextIOPin:	
  6985                           
  6986                           ;IOCycle.c: 60: unsigned char loop;
  6987                           ;IOCycle.c: 62: Retry=0;
  6988                           
  6989                           ;incstack = 0
  6990                           ; Regs used in _ScanNextIOPin: [wreg+fsr1l+fsr1h+status,2+status,0]
  6991  0F2A  0020               	movlb	0	; select bank0
  6992  0F2B  01C4               	clrf	_Retry
  6993                           
  6994                           ;IOCycle.c: 63: CurrentIOPin++;
  6995  0F2C  3001               	movlw	1
  6996  0F2D  00F2               	movwf	??_ScanNextIOPin
  6997  0F2E  0872               	movf	??_ScanNextIOPin,w
  6998  0F2F  07CB               	addwf	_CurrentIOPin,f
  6999                           
  7000                           ;IOCycle.c: 65: if(CurrentIOPin >= 10)
  7001  0F30  300A               	movlw	10
  7002  0F31  024B               	subwf	_CurrentIOPin,w
  7003  0F32  1803               	btfsc	3,0
  7004                           
  7005                           ;IOCycle.c: 66: CurrentIOPin=0;
  7006  0F33  01CB               	clrf	_CurrentIOPin
  7007                           
  7008                           ;IOCycle.c: 68: CurrentIOSensor .Config= Setting.IOConfig[CurrentIOPin];
  7009  0F34  084B               	movf	_CurrentIOPin,w
  7010  0F35  3ED6               	addlw	(low (_Setting| 0))& (0+255)
  7011  0F36  0086               	movwf	6
  7012  0F37  0187               	clrf	7
  7013  0F38  0801               	movf	1,w
  7014  0F39  00F2               	movwf	??_ScanNextIOPin
  7015  0F3A  0872               	movf	??_ScanNextIOPin,w
  7016  0F3B  00CC               	movwf	_CurrentIOSensor
  7017                           
  7018                           ;IOCycle.c: 69: CurrentIOCycle= 0;
  7019  0F3C  01CA               	clrf	_CurrentIOCycle
  7020                           
  7021                           ;IOCycle.c: 70: CurrentIOStatus=0;
  7022  0F3D  01CD               	clrf	_CurrentIOStatus
  7023                           
  7024                           ;IOCycle.c: 71: Timerms=0;
  7025  0F3E  01B6               	clrf	_Timerms	;volatile
  7026  0F3F  01B7               	clrf	_Timerms+1	;volatile
  7027                           
  7028                           ;IOCycle.c: 72: TMR0IE=0;
  7029  0F40  128B               	bcf	11,5	;volatile
  7030                           
  7031                           ;IOCycle.c: 73: Timer0Overflow=0;
  7032  0F41  12EA               	bcf	_Timer0Overflow/(0+8),_Timer0Overflow& (0+7)
  7033                           
  7034                           ;IOCycle.c: 76: for(loop=0;loop<(3 * 2);loop++)
  7035  0F42  01F3               	clrf	ScanNextIOPin@loop
  7036  0F43                     L16:	
  7037  0F43  3006               	movlw	6
  7038  0F44  0273               	subwf	ScanNextIOPin@loop,w
  7039  0F45  1803               	btfsc	3,0
  7040  0F46  0008               	return
  7041                           
  7042                           ;IOCycle.c: 77: WorkingSensorData.BYTE[loop]=0;
  7043  0F47  0873               	movf	ScanNextIOPin@loop,w
  7044  0F48  3EB0               	addlw	(low (_WorkingSensorData| 0))& (0+255)
  7045  0F49  0086               	movwf	6
  7046  0F4A  0187               	clrf	7
  7047  0F4B  0181               	clrf	1
  7048  0F4C  3001               	movlw	1
  7049  0F4D  00F2               	movwf	??_ScanNextIOPin
  7050  0F4E  0872               	movf	??_ScanNextIOPin,w
  7051  0F4F  07F3               	addwf	ScanNextIOPin@loop,f
  7052  0F50  2F43               	goto	L16
  7053  0F51                     __end_of_ScanNextIOPin:	
  7054                           
  7055                           	psect	text44
  7056  0D05                     __ptext44:	
  7057 ;; *************** function _DealWithError *****************
  7058 ;; Defined at:
  7059 ;;		line 50 in file "IOCycle.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;		None
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7073 ;;      Params:         0       0       0       0       0       0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0
  7075 ;;      Temps:          0       0       0       0       0       0       0
  7076 ;;      Totals:         0       0       0       0       0       0       0
  7077 ;;Total ram usage:        0 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    1
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_DoIOCycle
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _DealWithError
  7089  0D05                     _DealWithError:	
  7090                           
  7091                           ;IOCycle.c: 52: TMR0IE=0;
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _DealWithError: [wreg]
  7095  0D05  128B               	bcf	11,5	;volatile
  7096                           
  7097                           ;IOCycle.c: 53: TMR0IF=0;
  7098  0D06  110B               	bcf	11,2	;volatile
  7099                           
  7100                           ;IOCycle.c: 54: WorkingSensorData.WORD[2]=0xFFFF;
  7101  0D07  30FF               	movlw	255
  7102  0D08  0021               	movlb	1	; select bank1
  7103  0D09  00B4               	movwf	(_WorkingSensorData^(0+128)+4)
  7104  0D0A  30FF               	movlw	255
  7105  0D0B  00B5               	movwf	(_WorkingSensorData^(0+128)+5)
  7106  0D0C  0008               	return
  7107  0D0D                     __end_of_DealWithError:	
  7108                           
  7109                           	psect	text45
  7110  06F7                     __ptext45:	
  7111 ;; *************** function _DecodeSerial *****************
  7112 ;; Defined at:
  7113 ;;		line 1133 in file "main.c"
  7114 ;; Parameters:    Size  Location     Type
  7115 ;;  msg             1    wreg     PTR unsigned char 
  7116 ;;		 -> ModbusBuffer(10), 
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;  msg             1    4[BANK0 ] PTR unsigned char 
  7119 ;;		 -> ModbusBuffer(10), 
  7120 ;;  CalcCRC         2    5[BANK0 ] unsigned short 
  7121 ;;  loop            2    0        int 
  7122 ;;  rcode           1    7[BANK0 ] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;                  1    wreg      unsigned char 
  7125 ;; Registers used:
  7126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7132 ;;      Params:         0       0       0       0       0       0       0
  7133 ;;      Locals:         0       4       0       0       0       0       0
  7134 ;;      Temps:          1       0       0       0       0       0       0
  7135 ;;      Totals:         1       4       0       0       0       0       0
  7136 ;;Total ram usage:        5 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:    2
  7139 ;; This function calls:
  7140 ;;		_CRC16
  7141 ;; This function is called by:
  7142 ;;		_main
  7143 ;; This function uses a non-reentrant model
  7144 ;;
  7145                           
  7146                           
  7147                           ;psect for function _DecodeSerial
  7148  06F7                     _DecodeSerial:	
  7149                           
  7150                           ;incstack = 0
  7151                           ; Regs used in _DecodeSerial: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7152  06F7  0086               	movwf	6	;# 
  7153  06F8  0187               	clrf	7	;# 
  7154  06F9  0016               	moviw fsr1++	;# 
  7155  06FA  00BA               	movwf	_ModbusSlave	;# 
  7156  06FB  0016               	moviw fsr1++	;# 
  7157  06FC  00BB               	movwf	_ModbusFunction	;# 
  7158  06FD  0016               	moviw fsr1++	;# 
  7159  06FE  00A7               	movwf	_ModbusAddress+1	;# 
  7160  06FF  0016               	moviw fsr1++	;# 
  7161  0700  00A6               	movwf	_ModbusAddress	;# 
  7162  0701  0016               	moviw fsr1++	;# 
  7163  0702  00A5               	movwf	_ModbusData+1	;# 
  7164  0703  0016               	moviw fsr1++	;# 
  7165  0704  00A4               	movwf	_ModbusData	;# 
  7166  0705  0016               	moviw fsr1++	;# 
  7167  0706  00A2               	movwf	_ModbusCRC	;# 
  7168  0707  0016               	moviw fsr1++	;# 
  7169  0708  00A3               	movwf	_ModbusCRC+1	;# 
  7170                           
  7171                           ;main.c: 1178: CalcCRC = CRC16(ModbusBuffer,6);
  7172  0709  3006               	movlw	6
  7173  070A  00F6               	movwf	??_DecodeSerial
  7174  070B  0876               	movf	??_DecodeSerial,w
  7175  070C  00F2               	movwf	CRC16@num
  7176  070D  30E1               	movlw	(low (_ModbusBuffer| 0))& (0+255)
  7177  070E  3185  25B8  3186   	fcall	_CRC16
  7178  0711  0873               	movf	?_CRC16+1,w
  7179  0712  0020               	movlb	0	; select bank0
  7180  0713  00D4               	movwf	DecodeSerial@CalcCRC+1
  7181  0714  0872               	movf	?_CRC16,w
  7182  0715  00D3               	movwf	DecodeSerial@CalcCRC
  7183                           
  7184                           ;main.c: 1180: if(CalcCRC != ModbusCRC) rcode=0;
  7185  0716  0823               	movf	_ModbusCRC+1,w	;volatile
  7186  0717  0654               	xorwf	DecodeSerial@CalcCRC+1,w
  7187  0718  1D03               	skipz
  7188  0719  2F1C               	goto	u4365
  7189  071A  0822               	movf	_ModbusCRC,w	;volatile
  7190  071B  0653               	xorwf	DecodeSerial@CalcCRC,w
  7191  071C                     u4365:	
  7192  071C  1903               	skipnz
  7193  071D  2F20               	goto	l4207
  7194  071E  01D5               	clrf	DecodeSerial@rcode
  7195  071F  2F2F               	goto	l555
  7196  0720                     l4207:	
  7197                           
  7198                           ;main.c: 1181: else if(ModbusSlave==Setting.SlaveAddress) rcode=1;
  7199  0720  0021               	movlb	1	; select bank1
  7200  0721  0860               	movf	(_Setting^(0+128)+10),w
  7201  0722  0020               	movlb	0	; select bank0
  7202  0723  063A               	xorwf	_ModbusSlave,w
  7203  0724  1D03               	skipz
  7204                           
  7205                           ;main.c: 1182: else if(ModbusSlave==0) rcode=1;
  7206  0725  083A               	movf	_ModbusSlave,w
  7207  0726  1D03               	btfss	3,2
  7208  0727  2F2B               	goto	l4215
  7209  0728  01D5               	clrf	DecodeSerial@rcode
  7210  0729  0AD5               	incf	DecodeSerial@rcode,f
  7211  072A  2F2F               	goto	l555
  7212  072B                     l4215:	
  7213                           
  7214                           ;main.c: 1183: else rcode=2;
  7215  072B  3002               	movlw	2
  7216  072C  00F6               	movwf	??_DecodeSerial
  7217  072D  0876               	movf	??_DecodeSerial,w
  7218  072E  00D5               	movwf	DecodeSerial@rcode
  7219  072F                     l555:	
  7220                           
  7221                           ;main.c: 1185: return rcode;
  7222  072F  0855               	movf	DecodeSerial@rcode,w
  7223  0730  0008               	return
  7224  0731                     __end_of_DecodeSerial:	
  7225                           
  7226                           	psect	text46
  7227  05B8                     __ptext46:	
  7228 ;; *************** function _CRC16 *****************
  7229 ;; Defined at:
  7230 ;;		line 94 in file "CRC16.c"
  7231 ;; Parameters:    Size  Location     Type
  7232 ;;  addr            1    wreg     PTR unsigned char 
  7233 ;;		 -> ModbusBuffer(10), ModbusPacketBuffer(32), 
  7234 ;;  num             1    2[COMMON] unsigned char 
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;  addr            1    0[BANK0 ] PTR unsigned char 
  7237 ;;		 -> ModbusBuffer(10), ModbusPacketBuffer(32), 
  7238 ;;  crc             2    2[BANK0 ] unsigned short 
  7239 ;;  i               1    1[BANK0 ] unsigned char 
  7240 ;; Return value:  Size  Location     Type
  7241 ;;                  2    2[COMMON] unsigned short 
  7242 ;; Registers used:
  7243 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7244 ;; Tracked objects:
  7245 ;;		On entry : 0/0
  7246 ;;		On exit  : 0/0
  7247 ;;		Unchanged: 0/0
  7248 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7249 ;;      Params:         2       0       0       0       0       0       0
  7250 ;;      Locals:         0       4       0       0       0       0       0
  7251 ;;      Temps:          2       0       0       0       0       0       0
  7252 ;;      Totals:         4       4       0       0       0       0       0
  7253 ;;Total ram usage:        8 bytes
  7254 ;; Hardware stack levels used:    1
  7255 ;; Hardware stack levels required when called:    1
  7256 ;; This function calls:
  7257 ;;		Nothing
  7258 ;; This function is called by:
  7259 ;;		_SendModbusPacket
  7260 ;;		_DecodeSerial
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264                           
  7265                           ;psect for function _CRC16
  7266  05B8                     _CRC16:	
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in _CRC16: [wreg+fsr1l+fsr1h+status,2+status,0]
  7270                           ;CRC16@addr stored from wreg
  7271  05B8  0020               	movlb	0	; select bank0
  7272  05B9  00CE               	movwf	CRC16@addr
  7273                           
  7274                           ;CRC16.c: 96: unsigned char i;
  7275                           ;CRC16.c: 98: unsigned short crc=0xffff;
  7276  05BA  30FF               	movlw	255
  7277  05BB  00D0               	movwf	CRC16@crc
  7278  05BC  30FF               	movlw	255
  7279  05BD  00D1               	movwf	CRC16@crc+1
  7280                           
  7281                           ;CRC16.c: 100: for (; num>0; num--)
  7282  05BE  0872               	movf	CRC16@num,w
  7283  05BF  1903               	btfsc	3,2
  7284  05C0  2DF6               	goto	l3617
  7285  05C1                     l3601:	
  7286                           
  7287                           ;CRC16.c: 101: {
  7288                           ;CRC16.c: 102: crc = crc ^ (*addr++);
  7289  05C1  084E               	movf	CRC16@addr,w
  7290  05C2  0086               	movwf	6
  7291  05C3  0187               	clrf	7
  7292  05C4  0850               	movf	CRC16@crc,w
  7293  05C5  0601               	xorwf	1,w
  7294  05C6  00D0               	movwf	CRC16@crc
  7295  05C7  0851               	movf	CRC16@crc+1,w
  7296  05C8  00D1               	movwf	CRC16@crc+1
  7297  05C9  3001               	movlw	1
  7298  05CA  00F4               	movwf	??_CRC16
  7299  05CB  0874               	movf	??_CRC16,w
  7300  05CC  07CE               	addwf	CRC16@addr,f
  7301                           
  7302                           ;CRC16.c: 103: for (i=8; i>0; i--)
  7303  05CD  3008               	movlw	8
  7304  05CE  00F4               	movwf	??_CRC16
  7305  05CF  0874               	movf	??_CRC16,w
  7306  05D0  00CF               	movwf	CRC16@i
  7307  05D1  084F               	movf	CRC16@i,w
  7308  05D2  1903               	btfsc	3,2
  7309  05D3  2DF1               	goto	l3615
  7310  05D4                     l5:	
  7311                           
  7312                           ;CRC16.c: 104: {
  7313                           ;CRC16.c: 105: if(crc & 0x1)
  7314  05D4  1C50               	btfss	CRC16@crc,0
  7315  05D5  2DE2               	goto	l3613
  7316                           
  7317                           ;CRC16.c: 106: crc = (crc >>1) ^ 0xA001;
  7318  05D6  0851               	movf	CRC16@crc+1,w
  7319  05D7  00F5               	movwf	??_CRC16+1
  7320  05D8  0850               	movf	CRC16@crc,w
  7321  05D9  00F4               	movwf	??_CRC16
  7322  05DA  36F5               	lsrf	??_CRC16+1,f
  7323  05DB  0CF4               	rrf	??_CRC16,f
  7324  05DC  3001               	movlw	1
  7325  05DD  0674               	xorwf	??_CRC16,w
  7326  05DE  00D0               	movwf	CRC16@crc
  7327  05DF  30A0               	movlw	160
  7328  05E0  0675               	xorwf	??_CRC16+1,w
  7329  05E1  2DEB               	goto	L17
  7330  05E2                     l3613:	
  7331                           
  7332                           ;CRC16.c: 107: else
  7333                           ;CRC16.c: 108: crc = crc >>1;
  7334  05E2  0851               	movf	CRC16@crc+1,w
  7335  05E3  00F5               	movwf	??_CRC16+1
  7336  05E4  0850               	movf	CRC16@crc,w
  7337  05E5  00F4               	movwf	??_CRC16
  7338  05E6  36F5               	lsrf	??_CRC16+1,f
  7339  05E7  0CF4               	rrf	??_CRC16,f
  7340  05E8  0874               	movf	??_CRC16,w
  7341  05E9  00D0               	movwf	CRC16@crc
  7342  05EA  0875               	movf	??_CRC16+1,w
  7343  05EB                     L17:	
  7344  05EB  00D1               	movwf	CRC16@crc+1
  7345  05EC  3001               	movlw	1
  7346  05ED  02CF               	subwf	CRC16@i,f
  7347  05EE  084F               	movf	CRC16@i,w
  7348  05EF  1D03               	btfss	3,2
  7349  05F0  2DD4               	goto	l5
  7350  05F1                     l3615:	
  7351  05F1  3001               	movlw	1
  7352  05F2  02F2               	subwf	CRC16@num,f
  7353  05F3  0872               	movf	CRC16@num,w
  7354  05F4  1D03               	btfss	3,2
  7355  05F5  2DC1               	goto	l3601
  7356  05F6                     l3617:	
  7357                           
  7358                           ;CRC16.c: 109: }
  7359                           ;CRC16.c: 110: }
  7360                           ;CRC16.c: 111: return(crc);
  7361  05F6  0851               	movf	CRC16@crc+1,w
  7362  05F7  00F3               	movwf	?_CRC16+1
  7363  05F8  0850               	movf	CRC16@crc,w
  7364  05F9  00F2               	movwf	?_CRC16
  7365  05FA  0008               	return
  7366  05FB                     __end_of_CRC16:	
  7367                           
  7368                           	psect	intentry
  7369  0004                     __pintentry:	
  7370 ;; *************** function _isr *****************
  7371 ;; Defined at:
  7372 ;;		line 638 in file "main.c"
  7373 ;; Parameters:    Size  Location     Type
  7374 ;;		None
  7375 ;; Auto vars:     Size  Location     Type
  7376 ;;		None
  7377 ;; Return value:  Size  Location     Type
  7378 ;;                  1    wreg      void 
  7379 ;; Registers used:
  7380 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7381 ;; Tracked objects:
  7382 ;;		On entry : 0/0
  7383 ;;		On exit  : 0/0
  7384 ;;		Unchanged: 0/0
  7385 ;; Data sizes:    COMMONh   BANK0   BANK1   BANK2  BANK3h  BANK3l   BANK4
  7386 ;;      Params:         0       0       0       0       0       0       0
  7387 ;;      Locals:         0       0       0       0       0       0       0
  7388 ;;      Temps:          2       0       0       0       0       0       0
  7389 ;;      Totals:         2       0       0       0       0       0       0
  7390 ;;Total ram usage:        2 bytes
  7391 ;; Hardware stack levels used:    1
  7392 ;; This function calls:
  7393 ;;		Nothing
  7394 ;; This function is called by:
  7395 ;;		Interrupt level 1
  7396 ;; This function uses a non-reentrant model
  7397 ;;
  7398                           
  7399  0004                     _isr:	
  7400                           
  7401                           ;incstack = 0
  7402  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7403                           
  7404                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0]
  7405  0005  3180               	pagesel	$
  7406  0006  0020               	movlb	0	; select bank0
  7407  0007  087F               	movf	127,w
  7408  0008  00F1               	movwf	??_isr+1
  7409                           
  7410                           ;main.c: 639: static volatile unsigned char _temp;
  7411                           ;main.c: 643: if(TMR1IE)
  7412  0009  0021               	movlb	1	; select bank1
  7413  000A  1C11               	btfss	17,0	;volatile
  7414  000B  2814               	goto	i1l3291
  7415                           
  7416                           ;main.c: 644: if(TMR1IF)
  7417  000C  0020               	movlb	0	; select bank0
  7418  000D  1C11               	btfss	17,0	;volatile
  7419  000E  2814               	goto	i1l3291
  7420                           
  7421                           ;main.c: 645: {
  7422                           ;main.c: 646: TimerHiCount++;
  7423  000F  3001               	movlw	1
  7424  0010  07B2               	addwf	_TimerHiCount,f	;volatile
  7425  0011  3000               	movlw	0
  7426  0012  3DB3               	addwfc	_TimerHiCount+1,f	;volatile
  7427                           
  7428                           ;main.c: 647: TMR1IF=0;
  7429  0013  1011               	bcf	17,0	;volatile
  7430  0014                     i1l3291:	
  7431                           
  7432                           ;main.c: 648: }
  7433                           ;main.c: 650: if(CCP1IE)
  7434  0014  0021               	movlb	1	; select bank1
  7435  0015  1D11               	btfss	17,2	;volatile
  7436  0016  2843               	goto	i1l3309
  7437                           
  7438                           ;main.c: 651: if(CCP1IF)
  7439  0017  0020               	movlb	0	; select bank0
  7440  0018  1D11               	btfss	17,2	;volatile
  7441  0019  2843               	goto	i1l3309
  7442                           
  7443                           ;main.c: 652: {
  7444                           ;main.c: 653: TimeCapture1Count++;
  7445  001A  3001               	movlw	1
  7446  001B  07B0               	addwf	_TimeCapture1Count,f	;volatile
  7447  001C  3000               	movlw	0
  7448  001D  3DB1               	addwfc	_TimeCapture1Count+1,f	;volatile
  7449                           
  7450                           ;main.c: 654: IOSensorData[0].BYTE[0]=TimerHiCount >> 8;
  7451  001E  0833               	movf	_TimerHiCount+1,w	;volatile
  7452  001F  00F0               	movwf	??_isr
  7453  0020  0870               	movf	??_isr,w
  7454  0021  0023               	movlb	3	; select bank3
  7455  0022  00A0               	movwf	32
  7456                           
  7457                           ;main.c: 655: IOSensorData[0].BYTE[1]=TimerHiCount & 0xff;
  7458  0023  0020               	movlb	0	; select bank0
  7459  0024  0832               	movf	_TimerHiCount,w	;volatile
  7460  0025  00F0               	movwf	??_isr
  7461  0026  0870               	movf	??_isr,w
  7462  0027  0023               	movlb	3	; select bank3
  7463  0028  00A1               	movwf	33
  7464                           
  7465                           ;main.c: 656: IOSensorData[0].BYTE[2]=CCPR1H;
  7466  0029  0025               	movlb	5	; select bank5
  7467  002A  0812               	movf	18,w	;volatile
  7468  002B  00F0               	movwf	??_isr
  7469  002C  0870               	movf	??_isr,w
  7470  002D  0023               	movlb	3	; select bank3
  7471  002E  00A2               	movwf	34
  7472                           
  7473                           ;main.c: 657: IOSensorData[0].BYTE[3]=CCPR1L;
  7474  002F  0025               	movlb	5	; select bank5
  7475  0030  0811               	movf	17,w	;volatile
  7476  0031  00F0               	movwf	??_isr
  7477  0032  0870               	movf	??_isr,w
  7478  0033  0023               	movlb	3	; select bank3
  7479  0034  00A3               	movwf	35
  7480                           
  7481                           ;main.c: 658: IOSensorData[0].BYTE[4]=TimeCapture1Count >> 8;
  7482  0035  0020               	movlb	0	; select bank0
  7483  0036  0831               	movf	_TimeCapture1Count+1,w	;volatile
  7484  0037  00F0               	movwf	??_isr
  7485  0038  0870               	movf	??_isr,w
  7486  0039  0023               	movlb	3	; select bank3
  7487  003A  00A4               	movwf	36
  7488                           
  7489                           ;main.c: 659: IOSensorData[0].BYTE[5]=TimeCapture1Count &0xff;
  7490  003B  0020               	movlb	0	; select bank0
  7491  003C  0830               	movf	_TimeCapture1Count,w	;volatile
  7492  003D  00F0               	movwf	??_isr
  7493  003E  0870               	movf	??_isr,w
  7494  003F  0023               	movlb	3	; select bank3
  7495  0040  00A5               	movwf	37
  7496                           
  7497                           ;main.c: 660: CCP1IF=0;
  7498  0041  0020               	movlb	0	; select bank0
  7499  0042  1111               	bcf	17,2	;volatile
  7500  0043                     i1l3309:	
  7501                           
  7502                           ;main.c: 661: }
  7503                           ;main.c: 663: if(CCP2IE)
  7504  0043  0021               	movlb	1	; select bank1
  7505  0044  1C12               	btfss	18,0	;volatile
  7506  0045  2872               	goto	i1l3327
  7507                           
  7508                           ;main.c: 664: if(CCP2IF)
  7509  0046  0020               	movlb	0	; select bank0
  7510  0047  1C12               	btfss	18,0	;volatile
  7511  0048  2872               	goto	i1l3327
  7512                           
  7513                           ;main.c: 665: {
  7514                           ;main.c: 666: TimeCapture2Count++;
  7515  0049  3001               	movlw	1
  7516  004A  07AE               	addwf	_TimeCapture2Count,f	;volatile
  7517  004B  3000               	movlw	0
  7518  004C  3DAF               	addwfc	_TimeCapture2Count+1,f	;volatile
  7519                           
  7520                           ;main.c: 667: IOSensorData[3].BYTE[0]=TimerHiCount >> 8;
  7521  004D  0833               	movf	_TimerHiCount+1,w	;volatile
  7522  004E  00F0               	movwf	??_isr
  7523  004F  0870               	movf	??_isr,w
  7524  0050  0023               	movlb	3	; select bank3
  7525  0051  00B2               	movwf	50
  7526                           
  7527                           ;main.c: 668: IOSensorData[3].BYTE[1]=TimerHiCount & 0xff;
  7528  0052  0020               	movlb	0	; select bank0
  7529  0053  0832               	movf	_TimerHiCount,w	;volatile
  7530  0054  00F0               	movwf	??_isr
  7531  0055  0870               	movf	??_isr,w
  7532  0056  0023               	movlb	3	; select bank3
  7533  0057  00B3               	movwf	51
  7534                           
  7535                           ;main.c: 669: IOSensorData[3].BYTE[2]=CCPR2H;
  7536  0058  0025               	movlb	5	; select bank5
  7537  0059  0819               	movf	25,w	;volatile
  7538  005A  00F0               	movwf	??_isr
  7539  005B  0870               	movf	??_isr,w
  7540  005C  0023               	movlb	3	; select bank3
  7541  005D  00B4               	movwf	52
  7542                           
  7543                           ;main.c: 670: IOSensorData[3].BYTE[3]=CCPR2L;
  7544  005E  0025               	movlb	5	; select bank5
  7545  005F  0818               	movf	24,w	;volatile
  7546  0060  00F0               	movwf	??_isr
  7547  0061  0870               	movf	??_isr,w
  7548  0062  0023               	movlb	3	; select bank3
  7549  0063  00B5               	movwf	53
  7550                           
  7551                           ;main.c: 671: IOSensorData[3].BYTE[4]=TimeCapture2Count >> 8;
  7552  0064  0020               	movlb	0	; select bank0
  7553  0065  082F               	movf	_TimeCapture2Count+1,w	;volatile
  7554  0066  00F0               	movwf	??_isr
  7555  0067  0870               	movf	??_isr,w
  7556  0068  0023               	movlb	3	; select bank3
  7557  0069  00B6               	movwf	54
  7558                           
  7559                           ;main.c: 672: IOSensorData[3].BYTE[5]=TimeCapture2Count &0xff;
  7560  006A  0020               	movlb	0	; select bank0
  7561  006B  082E               	movf	_TimeCapture2Count,w	;volatile
  7562  006C  00F0               	movwf	??_isr
  7563  006D  0870               	movf	??_isr,w
  7564  006E  0023               	movlb	3	; select bank3
  7565  006F  00B7               	movwf	55
  7566                           
  7567                           ;main.c: 673: CCP2IF=0;
  7568  0070  0020               	movlb	0	; select bank0
  7569  0071  1012               	bcf	18,0	;volatile
  7570  0072                     i1l3327:	
  7571                           
  7572                           ;main.c: 674: }
  7573                           ;main.c: 676: if(CCP3IE)
  7574  0072  0021               	movlb	1	; select bank1
  7575  0073  1E13               	btfss	19,4	;volatile
  7576  0074  28A1               	goto	i1l3345
  7577                           
  7578                           ;main.c: 677: if(CCP3IF)
  7579  0075  0020               	movlb	0	; select bank0
  7580  0076  1E13               	btfss	19,4	;volatile
  7581  0077  28A1               	goto	i1l3345
  7582                           
  7583                           ;main.c: 678: {
  7584                           ;main.c: 679: TimeCapture3Count++;
  7585  0078  3001               	movlw	1
  7586  0079  07AC               	addwf	_TimeCapture3Count,f	;volatile
  7587  007A  3000               	movlw	0
  7588  007B  3DAD               	addwfc	_TimeCapture3Count+1,f	;volatile
  7589                           
  7590                           ;main.c: 680: IOSensorData[8].BYTE[0]=TimerHiCount >> 8;
  7591  007C  0833               	movf	_TimerHiCount+1,w	;volatile
  7592  007D  00F0               	movwf	??_isr
  7593  007E  0870               	movf	??_isr,w
  7594  007F  0023               	movlb	3	; select bank3
  7595  0080  00D0               	movwf	80
  7596                           
  7597                           ;main.c: 681: IOSensorData[8].BYTE[1]=TimerHiCount & 0xff;
  7598  0081  0020               	movlb	0	; select bank0
  7599  0082  0832               	movf	_TimerHiCount,w	;volatile
  7600  0083  00F0               	movwf	??_isr
  7601  0084  0870               	movf	??_isr,w
  7602  0085  0023               	movlb	3	; select bank3
  7603  0086  00D1               	movwf	81
  7604                           
  7605                           ;main.c: 682: IOSensorData[8].BYTE[2]=CCPR3H;
  7606  0087  0026               	movlb	6	; select bank6
  7607  0088  0812               	movf	18,w	;volatile
  7608  0089  00F0               	movwf	??_isr
  7609  008A  0870               	movf	??_isr,w
  7610  008B  0023               	movlb	3	; select bank3
  7611  008C  00D2               	movwf	82
  7612                           
  7613                           ;main.c: 683: IOSensorData[8].BYTE[3]=CCPR3L;
  7614  008D  0026               	movlb	6	; select bank6
  7615  008E  0811               	movf	17,w	;volatile
  7616  008F  00F0               	movwf	??_isr
  7617  0090  0870               	movf	??_isr,w
  7618  0091  0023               	movlb	3	; select bank3
  7619  0092  00D3               	movwf	83
  7620                           
  7621                           ;main.c: 684: IOSensorData[8].BYTE[4]=TimeCapture3Count >> 8;
  7622  0093  0020               	movlb	0	; select bank0
  7623  0094  082D               	movf	_TimeCapture3Count+1,w	;volatile
  7624  0095  00F0               	movwf	??_isr
  7625  0096  0870               	movf	??_isr,w
  7626  0097  0023               	movlb	3	; select bank3
  7627  0098  00D4               	movwf	84
  7628                           
  7629                           ;main.c: 685: IOSensorData[8].BYTE[5]=TimeCapture3Count &0xff;
  7630  0099  0020               	movlb	0	; select bank0
  7631  009A  082C               	movf	_TimeCapture3Count,w	;volatile
  7632  009B  00F0               	movwf	??_isr
  7633  009C  0870               	movf	??_isr,w
  7634  009D  0023               	movlb	3	; select bank3
  7635  009E  00D5               	movwf	85
  7636                           
  7637                           ;main.c: 686: CCP3IF=0;
  7638  009F  0020               	movlb	0	; select bank0
  7639  00A0  1213               	bcf	19,4	;volatile
  7640  00A1                     i1l3345:	
  7641                           
  7642                           ;main.c: 687: }
  7643                           ;main.c: 688: if(CCP4IE)
  7644  00A1  0021               	movlb	1	; select bank1
  7645  00A2  1E93               	btfss	19,5	;volatile
  7646  00A3  28D0               	goto	i1l3363
  7647                           
  7648                           ;main.c: 689: if(CCP4IF)
  7649  00A4  0020               	movlb	0	; select bank0
  7650  00A5  1E93               	btfss	19,5	;volatile
  7651  00A6  28D0               	goto	i1l3363
  7652                           
  7653                           ;main.c: 690: {
  7654                           ;main.c: 691: TimeCapture4Count++;
  7655  00A7  3001               	movlw	1
  7656  00A8  07AA               	addwf	_TimeCapture4Count,f	;volatile
  7657  00A9  3000               	movlw	0
  7658  00AA  3DAB               	addwfc	_TimeCapture4Count+1,f	;volatile
  7659                           
  7660                           ;main.c: 692: IOSensorData[9].BYTE[0]=TimerHiCount >> 8;
  7661  00AB  0833               	movf	_TimerHiCount+1,w	;volatile
  7662  00AC  00F0               	movwf	??_isr
  7663  00AD  0870               	movf	??_isr,w
  7664  00AE  0023               	movlb	3	; select bank3
  7665  00AF  00D6               	movwf	86
  7666                           
  7667                           ;main.c: 693: IOSensorData[9].BYTE[1]=TimerHiCount & 0xff;
  7668  00B0  0020               	movlb	0	; select bank0
  7669  00B1  0832               	movf	_TimerHiCount,w	;volatile
  7670  00B2  00F0               	movwf	??_isr
  7671  00B3  0870               	movf	??_isr,w
  7672  00B4  0023               	movlb	3	; select bank3
  7673  00B5  00D7               	movwf	87
  7674                           
  7675                           ;main.c: 694: IOSensorData[9].BYTE[2]=CCPR4H;
  7676  00B6  0026               	movlb	6	; select bank6
  7677  00B7  0819               	movf	25,w	;volatile
  7678  00B8  00F0               	movwf	??_isr
  7679  00B9  0870               	movf	??_isr,w
  7680  00BA  0023               	movlb	3	; select bank3
  7681  00BB  00D8               	movwf	88
  7682                           
  7683                           ;main.c: 695: IOSensorData[9].BYTE[3]=CCPR4L;
  7684  00BC  0026               	movlb	6	; select bank6
  7685  00BD  0818               	movf	24,w	;volatile
  7686  00BE  00F0               	movwf	??_isr
  7687  00BF  0870               	movf	??_isr,w
  7688  00C0  0023               	movlb	3	; select bank3
  7689  00C1  00D9               	movwf	89
  7690                           
  7691                           ;main.c: 696: IOSensorData[9].BYTE[4]=TimeCapture4Count >> 8;
  7692  00C2  0020               	movlb	0	; select bank0
  7693  00C3  082B               	movf	_TimeCapture4Count+1,w	;volatile
  7694  00C4  00F0               	movwf	??_isr
  7695  00C5  0870               	movf	??_isr,w
  7696  00C6  0023               	movlb	3	; select bank3
  7697  00C7  00DA               	movwf	90
  7698                           
  7699                           ;main.c: 697: IOSensorData[9].BYTE[5]=TimeCapture4Count & 0xff;
  7700  00C8  0020               	movlb	0	; select bank0
  7701  00C9  082A               	movf	_TimeCapture4Count,w	;volatile
  7702  00CA  00F0               	movwf	??_isr
  7703  00CB  0870               	movf	??_isr,w
  7704  00CC  0023               	movlb	3	; select bank3
  7705  00CD  00DB               	movwf	91
  7706                           
  7707                           ;main.c: 699: CCP4IF=0;
  7708  00CE  0020               	movlb	0	; select bank0
  7709  00CF  1293               	bcf	19,5	;volatile
  7710  00D0                     i1l3363:	
  7711                           
  7712                           ;main.c: 700: }
  7713                           ;main.c: 703: if(TMR2IF){
  7714  00D0  0020               	movlb	0	; select bank0
  7715  00D1  1C91               	btfss	17,1	;volatile
  7716  00D2  2906               	goto	i1l482
  7717                           
  7718                           ;main.c: 704: TMR2IF=0;
  7719  00D3  1091               	bcf	17,1	;volatile
  7720                           
  7721                           ;main.c: 705: if(TimerSecFlag)
  7722  00D4  1E6A               	btfss	_TimerSecFlag/(0+8),_TimerSecFlag& (0+7)
  7723  00D5  28DC               	goto	i1l483
  7724                           
  7725                           ;main.c: 706: {
  7726                           ;main.c: 707: ResetCounterFlag=1;
  7727  00D6  15EA               	bsf	_ResetCounterFlag/(0+8),_ResetCounterFlag& (0+7)
  7728                           
  7729                           ;main.c: 709: IOCounterReset.Byte = IOCounterFlag.Byte;
  7730  00D7  0871               	movf	113,w	;volatile
  7731  00D8  00F0               	movwf	??_isr
  7732  00D9  0870               	movf	??_isr,w
  7733  00DA  00F2               	movwf	114	;volatile
  7734                           
  7735                           ;main.c: 711: TimerSecFlag=0;
  7736  00DB  126A               	bcf	_TimerSecFlag/(0+8),_TimerSecFlag& (0+7)
  7737  00DC                     i1l483:	
  7738                           
  7739                           ;main.c: 712: }
  7740                           ;main.c: 714: Timerms++;
  7741  00DC  3001               	movlw	1
  7742  00DD  07B6               	addwf	_Timerms,f	;volatile
  7743  00DE  3000               	movlw	0
  7744  00DF  3DB7               	addwfc	_Timerms+1,f	;volatile
  7745                           
  7746                           ;main.c: 715: PrimaryTimerms--;
  7747  00E0  3001               	movlw	1
  7748  00E1  02A8               	subwf	_PrimaryTimerms,f	;volatile
  7749  00E2  3000               	movlw	0
  7750  00E3  3BA9               	subwfb	_PrimaryTimerms+1,f	;volatile
  7751                           
  7752                           ;main.c: 716: if(PrimaryTimerms==0)
  7753  00E4  0828               	movf	_PrimaryTimerms,w	;volatile
  7754  00E5  0429               	iorwf	_PrimaryTimerms+1,w	;volatile
  7755  00E6  1D03               	btfss	3,2
  7756  00E7  2906               	goto	i1l482
  7757                           
  7758                           ;main.c: 717: {
  7759                           ;main.c: 718: PrimaryTimerms=100;
  7760  00E8  3064               	movlw	100
  7761  00E9  00A8               	movwf	_PrimaryTimerms	;volatile
  7762  00EA  3000               	movlw	0
  7763  00EB  00A9               	movwf	_PrimaryTimerms+1	;volatile
  7764                           
  7765                           ;main.c: 719: if(WaitForEndDeciSecond)
  7766  00EC  1D77               	btfss	_WaitForEndDeciSecond/(0+8),_WaitForEndDeciSecond& (0+7)
  7767  00ED  28F6               	goto	i1l485
  7768  00EE  0815               	movf	21,w	;# 
  7769  00EF  00C9               	movwf	__TMR0	;# 
  7770                           
  7771                           ;main.c: 727: CPSON=0;
  7772  00F0  0020               	movlb	0	; select bank0
  7773  00F1  139E               	bcf	30,7	;volatile
  7774                           
  7775                           ;main.c: 728: TMR0IE=0;
  7776  00F2  128B               	bcf	11,5	;volatile
  7777                           
  7778                           ;main.c: 729: WaitForEndDeciSecond=0;
  7779  00F3  1177               	bcf	_WaitForEndDeciSecond/(0+8),_WaitForEndDeciSecond& (0+7)
  7780                           
  7781                           ;main.c: 730: GotCapSenseFlag=1;
  7782  00F4  14F7               	bsf	_GotCapSenseFlag/(0+8),_GotCapSenseFlag& (0+7)
  7783                           
  7784                           ;main.c: 732: }
  7785  00F5  28FD               	goto	i1l3391
  7786  00F6                     i1l485:	
  7787                           
  7788                           ;main.c: 733: else if(WaitForStartDeciSecond)
  7789  00F6  1C77               	btfss	_WaitForStartDeciSecond/(0+8),_WaitForStartDeciSecond& (0+7)
  7790  00F7  28FD               	goto	i1l3391
  7791                           
  7792                           ;main.c: 734: {
  7793                           ;main.c: 735: WaitForStartDeciSecond=0;
  7794  00F8  1077               	bcf	_WaitForStartDeciSecond/(0+8),_WaitForStartDeciSecond& (0+7)
  7795                           
  7796                           ;main.c: 736: TMR0=0;
  7797  00F9  0195               	clrf	21	;volatile
  7798                           
  7799                           ;main.c: 737: TMR0IF=0;
  7800  00FA  110B               	bcf	11,2	;volatile
  7801                           
  7802                           ;main.c: 738: TMR0IE=1;
  7803  00FB  168B               	bsf	11,5	;volatile
  7804                           
  7805                           ;main.c: 739: WaitForEndDeciSecond=1;
  7806  00FC  1577               	bsf	_WaitForEndDeciSecond/(0+8),_WaitForEndDeciSecond& (0+7)
  7807  00FD                     i1l3391:	
  7808                           
  7809                           ;main.c: 741: }
  7810                           ;main.c: 743: TimerDeciSec--;
  7811  00FD  3001               	movlw	1
  7812  00FE  02C1               	subwf	_TimerDeciSec,f	;volatile
  7813                           
  7814                           ;main.c: 744: if(TimerDeciSec==0)
  7815  00FF  0841               	movf	_TimerDeciSec,w	;volatile
  7816  0100  1D03               	btfss	3,2
  7817  0101  2906               	goto	i1l482
  7818  0102  300A               	movlw	10	;# 
  7819  0103  00C1               	movwf	_TimerDeciSec	;# 
  7820                           
  7821                           ;main.c: 751: TimerSecFlag=1;
  7822  0104  0020               	movlb	0	; select bank0
  7823  0105  166A               	bsf	_TimerSecFlag/(0+8),_TimerSecFlag& (0+7)
  7824  0106                     i1l482:	
  7825                           
  7826                           ;main.c: 752: }
  7827                           ;main.c: 755: }
  7828                           ;main.c: 757: }
  7829                           ;main.c: 760: if(TXIE)
  7830  0106  0021               	movlb	1	; select bank1
  7831  0107  1E11               	btfss	17,4	;volatile
  7832  0108  2927               	goto	i1l489
  7833                           
  7834                           ;main.c: 761: if(TXIF)
  7835  0109  0020               	movlb	0	; select bank0
  7836  010A  1E11               	btfss	17,4	;volatile
  7837  010B  2927               	goto	i1l489
  7838                           
  7839                           ;main.c: 762: {
  7840                           ;main.c: 764: if(InFiFo != OutFiFo)
  7841  010C  0840               	movf	_InFiFo,w	;volatile
  7842  010D  0678               	xorwf	_OutFiFo,w	;volatile
  7843  010E  1903               	skipnz
  7844  010F  2920               	goto	i1l3407
  7845                           
  7846                           ;main.c: 765: {
  7847                           ;main.c: 766: TXREG= SerialBuffer[OutFiFo];
  7848  0110  0878               	movf	_OutFiFo,w
  7849  0111  3E40               	addlw	(low (_SerialBuffer| (0+256)))& (0+255)
  7850  0112  0086               	movwf	6
  7851  0113  3001               	movlw	1	; select bank2/3
  7852  0114  0087               	movwf	7
  7853  0115  0801               	movf	1,w
  7854  0116  0023               	movlb	3	; select bank3
  7855  0117  009A               	movwf	26	;volatile
  7856  0118  0020               	movlb	0	; select bank0 ;# 
  7857  0119  0AF8               	incf	_OutFiFo,f	;# 
  7858                           
  7859                           ;main.c: 772: if(OutFiFo >= 32)
  7860  011A  3020               	movlw	32
  7861  011B  0278               	subwf	_OutFiFo,w	;volatile
  7862  011C  1C03               	skipc
  7863  011D  2927               	goto	i1l489
  7864                           
  7865                           ;main.c: 773: OutFiFo=0;
  7866  011E  01F8               	clrf	_OutFiFo	;volatile
  7867                           
  7868                           ;main.c: 774: }
  7869  011F  2927               	goto	i1l489
  7870  0120                     i1l3407:	
  7871                           
  7872                           ;main.c: 775: else
  7873                           ;main.c: 776: if(OutFiFo == InFiFo)
  7874  0120  0878               	movf	_OutFiFo,w	;volatile
  7875  0121  0020               	movlb	0	; select bank0
  7876  0122  0640               	xorwf	_InFiFo,w	;volatile
  7877  0123  1D03               	skipz
  7878  0124  2927               	goto	i1l489
  7879                           
  7880                           ;main.c: 777: {
  7881                           ;main.c: 779: TXIE=0;
  7882  0125  0021               	movlb	1	; select bank1
  7883  0126  1211               	bcf	17,4	;volatile
  7884  0127                     i1l489:	
  7885                           
  7886                           ;main.c: 780: }
  7887                           ;main.c: 781: }
  7888                           ;main.c: 785: if(TMR0IE)
  7889  0127  1A8B               	btfsc	11,5	;volatile
  7890                           
  7891                           ;main.c: 786: if(TMR0IF)
  7892  0128  1D0B               	btfss	11,2	;volatile
  7893  0129  2936               	goto	i1l495
  7894                           
  7895                           ;main.c: 787: {
  7896                           ;main.c: 788: TMR0IF=0;
  7897  012A  110B               	bcf	11,2	;volatile
  7898                           
  7899                           ;main.c: 789: if(Timer0Overflow)
  7900  012B  0020               	movlb	0	; select bank0
  7901  012C  1EEA               	btfss	_Timer0Overflow/(0+8),_Timer0Overflow& (0+7)
  7902  012D  2933               	goto	i1l497
  7903  012E  0020               	banksel	__TMR0_MSB	;# 
  7904  012F  0AB4               	incf	__TMR0_MSB,f	;# 
  7905  0130  1D03               	skipz
  7906  0131  0AB5               	incf	__TMR0_MSB+1,f	;# 
  7907                           
  7908                           ;main.c: 798: }
  7909  0132  2936               	goto	i1l495
  7910  0133                     i1l497:	
  7911                           
  7912                           ;main.c: 799: else
  7913                           ;main.c: 800: {
  7914                           ;main.c: 802: TMR0IE=0;
  7915  0133  128B               	bcf	11,5	;volatile
  7916  0134  0020               	banksel	_CurrentIOCycle	;# 
  7917  0135  00CA               	movwf	_CurrentIOCycle	;# 
  7918  0136                     i1l495:	
  7919                           
  7920                           ;main.c: 809: }
  7921                           ;main.c: 810: }
  7922                           ;main.c: 812: if(RCIE)
  7923  0136  0021               	movlb	1	; select bank1
  7924  0137  1E91               	btfss	17,5	;volatile
  7925  0138  294C               	goto	i1l502
  7926                           
  7927                           ;main.c: 813: if(RCIF)
  7928  0139  0020               	movlb	0	; select bank0
  7929  013A  1E91               	btfss	17,5	;volatile
  7930  013B  294C               	goto	i1l502
  7931  013C  0020               	banksel	_RcvInFiFo	;# 
  7932  013D  083F               	movf	_RcvInFiFo,w	;# 
  7933  013E  0ABF               	incf	_RcvInFiFo,f	;# 
  7934  013F  3E20               	addlw	low _RcvSerialBuffer	;# 
  7935  0140  0086               	movwf	6	;# 
  7936  0141  3001               	movlw	high _RcvSerialBuffer	;# 
  7937  0142  0087               	movwf	7	;# 
  7938  0143  0023               	movlb	3	; select bank 3 ;# 
  7939  0144  0819               	movf	25,w	;# 
  7940  0145  0081               	movwf	1	;# 
  7941  0146  0020               	banksel	_RcvInFiFo	;# 
  7942                           
  7943                           ;main.c: 829: if(RcvInFiFo == 32)
  7944  0147  3020               	movlw	32
  7945  0148  0020               	movlb	0	; select bank0
  7946  0149  063F               	xorwf	_RcvInFiFo,w	;volatile
  7947  014A  1903               	btfsc	3,2
  7948                           
  7949                           ;main.c: 830: RcvInFiFo=0;
  7950  014B  01BF               	clrf	_RcvInFiFo	;volatile
  7951  014C                     i1l502:	
  7952  014C  0871               	movf	??_isr+1,w
  7953  014D  0020               	movlb	0	; select bank0
  7954  014E  00FF               	movwf	127
  7955  014F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7956  0150  0009               	retfie
  7957  0151                     __end_of_isr:	
  7958  007E                     btemp	set	126	;btemp
  7959  007E                     int$flags	set	126
  7960  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    42
    Data        0
    BSS         186
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMONh          11      7       9
    BANK0            80     28      75
    BANK1            80      0      75
    BANK2            80      0      64
    BANK3h            1      0       0
    BANK3l            4      0       0
    BANK4            48      0       0

Pointer List with Targets:

    DecodeSerial@msg	PTR unsigned char  size(1) Largest target is 10
		 -> ModbusBuffer(BANK1[10]), 

    main@pointer	PTR unsigned char  size(1) Largest target is 11
		 -> Setting(BANK1[11]), 

    SaveSetting@pointer	PTR unsigned char  size(1) Largest target is 11
		 -> Setting(BANK1[11]), 

    DoIOCycle@SensorPt	PTR struct . size(1) Largest target is 60
		 -> IOSensorData(BANK3l[60]), 

    CRC16@addr	PTR unsigned char  size(1) Largest target is 32
		 -> ModbusBuffer(BANK1[10]), ModbusPacketBuffer(BANK1[32]), 


Critical Paths under _main in COMMONh

    _main->_DecodeSerial
    _main->_DoIOCycle
    _main->_SetIOConfig
    _SendReadByteFrame->_SendModbusPacket
    _ReadCurrentRegister->_ReadAllCoils
    _SendReadFrame->_SendModbusPacket
    _SendBytesFrame->_SendModbusPacket
    _ReadVRef->_ReadA2D
    _ReadTSensor->_ReadA2D
    _ReadIO->_ReadIOPin
    _ReadIO->_SetAnalogConfig
    _ReadAllCoils->_GetInputPin
    _PresetSingleRegister->_SaveSetting
    _PresetSingleRegister->_SetIOConfig
    _SetIOConfig->_SetAnalogConfig
    _SetIOConfig->_SetIOChange
    _SetIOConfig->_SetInputConfig
    _SetIOConfig->_SetOutputConfig
    _SetIOConfig->___bmul
    _SaveSetting->_eeprom_write
    _SetSingleCoil->_WriteIO
    _SendPresetFrame->_SendModbusPacket
    _SendFrameError->_SendModbusPacket
    _SendModbusPacket->_CRC16
    _DoIOCycle->___bmul
    _DecodeSerial->_CRC16

Critical Paths under _isr in COMMONh

    None.

Critical Paths under _main in BANK0

    _ExecuteCommand->_ReadCurrentRegister
    _ReadInputStatus->_SendFrameError
    _SendReadByteFrame->_SendModbusPacket
    _ReadHoldingRegister->_SendFrameError
    _ReadHoldingRegister->_SendReadFrame
    _ReadCurrentRegister->_SendBytesFrame
    _SendReadFrame->_SendModbusPacket
    _SendBytesFrame->_SendFrameError
    _ReadVRef->_ReadA2D
    _ReadTSensor->_ReadA2D
    _ReadIO->_ReadA2D
    _PresetSingleRegister->_WriteAllCoils
    _ForceSingleCoil->_SendFrameError
    _SendPresetFrame->_SendModbusPacket
    _SendFrameError->_SendModbusPacket
    _SendModbusPacket->_CRC16
    _DecodeSerial->_CRC16

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3h

    None.

Critical Paths under _isr in BANK3h

    None.

Critical Paths under _main in BANK3l

    None.

Critical Paths under _isr in BANK3l

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   25885
                                             22 BANK0      6     6      0
                       _DecodeSerial
                          _DoIOCycle
                     _ExecuteCommand
                    _InitTimeCapture
                           _RcvClear
                         _RcvGetChar
                        _RcvIsDataIn
                       _ResetIOCycle
                        _SetIOConfig
                        _eeprom_read
 ---------------------------------------------------------------------------------
 (1) _eeprom_read                                          4     4      0      22
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (1) _RcvGetChar                                           2     2      0      23
                                              2 COMMONh    2     2      0
                        _RcvIsDataIn
 ---------------------------------------------------------------------------------
 (1) _RcvIsDataIn                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RcvClear                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitTimeCapture                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ExecuteCommand                                       0     0      0   20813
                    _ForceSingleCoil
               _PresetSingleRegister
                _ReadCurrentRegister
                _ReadHoldingRegister
                    _ReadInputStatus
                     _SendFrameError
 ---------------------------------------------------------------------------------
 (2) _ReadInputStatus                                      0     0      0    1984
                        _GetInputPin
                     _SendFrameError
                  _SendReadByteFrame
 ---------------------------------------------------------------------------------
 (3) _SendReadByteFrame                                    1     1      0     942
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (2) _ReadHoldingRegister                                  8     8      0    2320
                                             10 BANK0      8     8      0
                     _SendFrameError
                      _SendReadFrame
 ---------------------------------------------------------------------------------
 (2) _ReadCurrentRegister                                  6     6      0    5810
                                             16 BANK0      6     6      0
                   _MultipleRegister
                       _ReadAllCoils
                             _ReadIO
                        _ReadTSensor
                           _ReadVRef
                     _SendBytesFrame
                     _SendFrameError
                      _SendReadFrame
 ---------------------------------------------------------------------------------
 (3) _SendReadFrame                                        2     0      2    1122
                                              8 BANK0      2     0      2
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (3) _SendBytesFrame                                       6     6      0    2450
                                             10 BANK0      6     6      0
                   _InitModbusPacket
                     _SendFrameError
                   _SendModbusPacket
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _ReadVRef                                             2     0      2     102
                                              3 BANK0      2     0      2
                            _ReadA2D
 ---------------------------------------------------------------------------------
 (3) _ReadTSensor                                          2     0      2     102
                                              3 BANK0      2     0      2
                            _ReadA2D
 ---------------------------------------------------------------------------------
 (3) _ReadIO                                              10     8      2     689
                                              3 BANK0      6     4      2
                            _ReadA2D
                          _ReadIOPin
                    _SetAnalogConfig
 ---------------------------------------------------------------------------------
 (4) _ReadIOPin                                            4     4      0     113
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (4) _ReadA2D                                              6     4      2     102
                                              2 COMMONh    3     1      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ReadAllCoils                                         7     5      2     208
                                              5 COMMONh    2     0      2
                                              0 BANK0      5     5      0
                        _GetInputPin
 ---------------------------------------------------------------------------------
 (3) _GetInputPin                                          3     3      0      69
                                              2 COMMONh    3     3      0
 ---------------------------------------------------------------------------------
 (3) _MultipleRegister                                     2     2      0      22
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _PresetSingleRegister                                 3     3      0    7262
                                             12 BANK0      3     3      0
                        _SaveSetting
                     _SendFrameError
                    _SendPresetFrame
                        _SetIOConfig
                      _WriteAllCoils
 ---------------------------------------------------------------------------------
 (3) _WriteAllCoils                                        4     4      0    1627
                                              8 BANK0      4     4      0
                    _SendPresetFrame
                      _SetSingleCoil
 ---------------------------------------------------------------------------------
 (1) _SetIOConfig                                          4     4      0    3316
                                              6 COMMONh    1     1      0
                                              0 BANK0      2     2      0
                       _ResetIOCycle
                    _SetAnalogConfig
                        _SetIOChange
                     _SetInputConfig
                    _SetOutputConfig
                          _SetPullUp
               _SetTimeCaptureConfig
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _SetTimeCaptureConfig                                 3     1      2     428
                                              2 COMMONh    3     1      2
 ---------------------------------------------------------------------------------
 (2) _SetPullUp                                            3     2      1     574
                                              2 COMMONh    3     2      1
 ---------------------------------------------------------------------------------
 (2) _SetOutputConfig                                      4     4      0      99
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (2) _SetInputConfig                                       4     4      0     223
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (2) _SetIOChange                                          4     3      1     220
                                              2 COMMONh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _SetAnalogConfig                                      4     4      0     285
                                              2 COMMONh    4     4      0
 ---------------------------------------------------------------------------------
 (2) _ResetIOCycle                                         2     2      0      68
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (3) _SaveSetting                                          3     3      0     212
                                              6 COMMONh    1     1      0
                                              0 BANK0      2     2      0
                       _eeprom_write
 ---------------------------------------------------------------------------------
 (4) _eeprom_write                                         4     3      1     120
                                              2 COMMONh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _ForceSingleCoil                                      1     1      0    2464
                                             10 BANK0      1     1      0
                     _SendFrameError
                    _SendPresetFrame
                      _SetSingleCoil
 ---------------------------------------------------------------------------------
 (4) _SetSingleCoil                                        3     2      1     549
                                              0 BANK0      3     2      1
                            _WriteIO
 ---------------------------------------------------------------------------------
 (5) _WriteIO                                              5     4      1     276
                                              2 COMMONh    5     4      1
 ---------------------------------------------------------------------------------
 (4) _SendPresetFrame                                      0     0      0     942
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (2) _SendFrameError                                       2     2      0     973
                                              8 BANK0      2     2      0
                   _InitModbusPacket
                   _SendModbusPacket
 ---------------------------------------------------------------------------------
 (3) _SendModbusPacket                                     5     5      0     942
                                              6 COMMONh    1     1      0
                                              4 BANK0      4     4      0
                              _CRC16
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                3     3      0     161
                                              2 COMMONh    3     3      0
 ---------------------------------------------------------------------------------
 (3) _InitModbusPacket                                     1     1      0       0
                                              2 COMMONh    1     1      0
 ---------------------------------------------------------------------------------
 (1) _DoIOCycle                                            4     4      0     495
                                              6 COMMONh    1     1      0
                                              0 BANK0      2     2      0
                      _DealWithError
                      _ScanNextIOPin
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     331
                                              2 COMMONh    4     3      1
 ---------------------------------------------------------------------------------
 (2) _ScanNextIOPin                                        2     2      0      68
                                              2 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 (2) _DealWithError                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DecodeSerial                                         7     7      0     718
                                              6 COMMONh    1     1      0
                                              4 BANK0      4     4      0
                              _CRC16
 ---------------------------------------------------------------------------------
 (4) _CRC16                                                8     6      2     586
                                              2 COMMONh    4     2      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                  2     2      0       0
                                              0 COMMONh    2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DecodeSerial
     _CRC16
   _DoIOCycle
     _DealWithError
     _ScanNextIOPin
     ___bmul
   _ExecuteCommand
     _ForceSingleCoil
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendPresetFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SetSingleCoil
         _WriteIO
     _PresetSingleRegister
       _SaveSetting
         _eeprom_write
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendPresetFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SetIOConfig
         _ResetIOCycle
         _SetAnalogConfig
         _SetIOChange
         _SetInputConfig
         _SetOutputConfig
         _SetPullUp
         _SetTimeCaptureConfig
         ___bmul
       _WriteAllCoils
         _SendPresetFrame
           _InitModbusPacket
           _SendModbusPacket
             _CRC16
             _putch
         _SetSingleCoil
           _WriteIO
     _ReadCurrentRegister
       _MultipleRegister
       _ReadAllCoils
         _GetInputPin
       _ReadIO
         _ReadA2D
         _ReadIOPin
         _SetAnalogConfig
       _ReadTSensor
         _ReadA2D
       _ReadVRef
         _ReadA2D
       _SendBytesFrame
         _InitModbusPacket
         _SendFrameError
           _InitModbusPacket
           _SendModbusPacket
             _CRC16
             _putch
         _SendModbusPacket
           _CRC16
           _putch
         ___bmul
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendReadFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
     _ReadHoldingRegister
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendReadFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
     _ReadInputStatus
       _GetInputPin
       _SendFrameError
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
       _SendReadByteFrame
         _InitModbusPacket
         _SendModbusPacket
           _CRC16
           _putch
     _SendFrameError
       _InitModbusPacket
       _SendModbusPacket
         _CRC16
         _putch
   _InitTimeCapture
   _RcvClear
   _RcvGetChar
     _RcvIsDataIn
   _RcvIsDataIn
   _ResetIOCycle
   _SetIOConfig
     _ResetIOCycle
     _SetAnalogConfig
     _SetIOChange
     _SetInputConfig
     _SetOutputConfig
     _SetPullUp
     _SetTimeCaptureConfig
     ___bmul
   _eeprom_read

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             170      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMONh           B      0       1       1        9.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMONh              B      7       9       2       81.8%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      DF       4        0.0%
BITBANK0            50      0       1       5        1.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4B       8       93.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3h            1      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK3l            4      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3h               1      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK3l               4      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK4            30      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK4               30      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
DATA                 0      0      DF      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov 24 19:05:56 2017

            ??_SetAnalogConfig 0072                   ReadA2D@value 004F                              l5 05D4  
          SetInputConfig@_ntmp 0074                 ___bmul@product 0074               SetIOChange@_temp 0074  
                  __CFG_CP$OFF 0000                             l80 0774                             _RD 0CA8  
                           _WR 0CA9               SetIOChange@value 0072   __end_of_PresetSingleRegister 0434  
     __size_of_ReadInputStatus 0013                ReadIOPin@_tempb 0073                    __CFG_LVP$ON 0000  
            _SendReadByteFrame 0D41                            l112 0675                            l109 0662  
                          l411 06AA                            l422 0F26                            l417 0FC6  
                          l461 06D9                            l464 06E5                            l457 038E  
                          l617 0508                            l555 072F                            l815 0E9A  
                          l575 049E                            l683 01FF                            l684 020D  
                          l695 027D                            l793 0DED                            _GIE 005F  
                          _RB0 0068                            _PR2 001B                            _PR4 0416  
                 __CFG_CPD$OFF 0000                            _isr 0004                   __CFG_BORV$LO 0000  
           ?_SendReadByteFrame 0070                 _IOCounterReset 0072                            wreg 0009  
                 __CFG_FOSC$HS 0000            __end_of_GetInputPin 0E79                           INDF0 0000  
                         FSR0H 0005                           FSR1H 0007                           FSR0L 0004  
                         FSR1L 0006                           l4011 0F75                           l4003 0F59  
                         l4101 0512                           l4031 0F01                           l4023 0EEA  
                         l4121 03A3                           l4041 044A                           l4115 0E37  
                         l4107 0DA7                           l4125 03B6                           l4053 046B  
                         l4045 0458                           l4215 072B                           l4207 0720  
                         l4127 03B9                           l4055 0470                           l4063 04A0  
                         l4231 0610                           l3191 0E04                           l3601 05C1  
                         l4137 03CF                           l4049 0461                           l4225 0605  
                         l4163 0412                           l4139 03D3                           l2723 0E62  
                         l2555 0E97                           l4083 04D3                           l4067 04A7  
                         l4059 0494                           l4251 0638                           l4243 0628  
                         l4235 0618                           l3613 05E2                           l2493 066A  
                         l3701 06B7                           l4165 0417                           l2549 0E8C  
                         l4093 04F8                           l4085 04DD                           l4413 0283  
                         l4405 0277                           l4421 029A                           l3615 05F1  
                         l4191 078E                           l4167 041A                           l4247 0630  
                         l4239 0620                           l4407 027B                           l4271 018F  
                         l3617 05F6                           l4177 042D                           l4169 041D  
                         l4089 04EA                           l4097 050A                           l4195 079B  
                         l3627 0ECB                           l3651 0FE5                           l4179 0430  
                         l4419 0298                           l3821 0D53                           l4197 079E  
                         l3653 0FF7                           l3725 07C7                           l3717 0F19  
                         l3733 0524                           l3741 052E                           l4373 0234  
                         l3911 0377                           l4279 01A6                           l3825 0D59  
                         l3761 054C                           l3905 0369                           l3913 0380  
                         l2937 0D3F                           l3683 0F93                           l3747 0538  
                         l3755 0542                           l3851 02E6                           l4387 024A  
                         l3845 02DF                           l3941 057F                           l3775 0560  
                         l3919 0393                           l3863 02F8                           l3697 06A0  
                         l3769 0556                           l3881 0325                           l3873 0312  
                         l3857 02EF                           l3891 0340                           l3971 0755  
                         l3947 058A                           l3885 032E                           l3869 0301  
                         l3879 0320                           _ADIE 048E                           _ADIF 008E  
                         l3897 034F                           l3899 0357                           l3979 0764  
                         ?_isr 0070                           _ADON 04E8              ?_InitModbusPacket 0070  
                 __CFG_WDTE$ON 0000                           _BRGH 0CF2                           _CREN 0CEC  
                         u2100 0E77                           u4200 0E2D                           u4115 04BF  
                         u4230 03B4                           u2480 0D14                           u4075 0488  
                         u4190 0E2C                           _PEIE 005E                           u4365 071C  
          ??_SendReadByteFrame 0077                           u4617 0227                           u4627 0240  
                         _RCIE 048D                _SetOutputConfig 0FA4                           _RCIF 008D  
                         u4637 0606                           u4647 06D2                           u4657 06DE  
                         u3955 0F5A                           u3985 0EF5                           _SCKP 0CFC  
                         _TMR0 0015                           _TMR2 001A                           _TMR4 0415  
                         _SPEN 0CEF                           _CSum 0046                           _TXIE 048C  
                         _TXEN 0CF5                           _WREN 0CAA                           _TXIF 008C  
                         _SYNC 0CF4                           _WPUA 020C                           _WPUB 020D  
               ??_eeprom_write 0073                  ?_ReadAllCoils 0075                   __CFG_WRT$OFF 0000  
                __CFG_FCMEN$ON 0000             ??_InitModbusPacket 0072                           _main 0172  
                         fsr0h 0005                           fsr1h 0007                           indf0 0000  
                         fsr0l 0004                           indf1 0001                           fsr1l 0006  
                         btemp 007E                    main@pointer 0066                  __CFG_BOREN$ON 0000  
       __size_of_WriteAllCoils 0024    __end_ofSetIOConfig@ValidCCP 0820                           start 0151  
                __CFG_IESO$OFF 0000               _ResetCounterFlag 0353              ___bmul@multiplier 0075  
                __CFG_MCLRE$ON 0000                  ??_ReadTSensor 0075                __end_of_ReadA2D 06F7  
                        ??_isr 0070               ?_ForceSingleCoil 0070                  __CFG_PLLEN$ON 0000  
    __end_of_SendReadByteFrame 0D51            SendModbusPacket@CRC 0053         __size_of_ScanNextIOPin 0027  
                        _ABDEN 0CF8                          ?_main 0070                          _EEADR 0191  
                        _BRG16 0CFB                          _CRC16 05B8                          _CARRY 0018  
            ??_InitTimeCapture 0072                __end_of_WriteIO 067D                          _T1CON 0018  
                        _T2CON 001C                          _T4CON 0417                          _IOCBF 0396  
                        _IOCBN 0395                          _IOCBP 0394                          _CPSON 00F7  
                        _IOCIE 005B                          i1l502 014C                          i1l482 0106  
                        i1l483 00DC                          i1l485 00F6                          i1l495 0136  
                        i1l497 0133                          i1l489 0127                          _RCSTA 019D  
                ??_SetIOChange 0073                          _BadIO 0042                          _TMR1H 0017  
                        _TMR1L 0016                          _PORTA 000C                          _PORTB 000D  
                        _TRISA 008C                          _TRISB 008D                          _TXREG 019A  
                        _TXSTA 019E                  ??_SetIOConfig 0076                          __TMR0 0049  
             ??_SendFrameError 0056                          _Retry 0044                  ??_RcvIsDataIn 0072  
           _ModbusFramePointer 0039                          _putch 0EBC             __size_of_DoIOCycle 0038  
               ??_ReadAllCoils 004E               _SendModbusPacket 0FD0                     _ForceReset 0350  
                        status 0003                          wtemp0 007E          __size_of_DecodeSerial 003A  
                 ReadIOPin@Pin 0074                __initialization 0153               ??_SendBytesFrame 0058  
                 __end_of_main 029E       PresetSingleRegister@temp 005C               __end_of_ReadVRef 0D73  
                       CRC16@i 004F               __end_of_RcvClear 0CFF            __end_of_ReadTSensor 0D31  
                  _GetInputPin 0E5A                     _RcvGetChar 0E04                         ??_main 0064  
                ??_SaveSetting 0076                         ?_CRC16 0072                  _WriteAllCoils 0EE0  
                   _ModbusData 0024         __size_of_DealWithError 0008        __end_of_SetOutputConfig 0FD0  
            DecodeSerial@rcode 0055                     _RcvOutFiFo 003E              ??_ReadInputStatus 0077  
                 _DecodeSerial 06F7                         _ADCON0 009D                         _ADCON1 009E  
         SendModbusPacket@loop 0055                         _CCP1IE 048A                         _CCP1IF 008A  
                       _CCP2IE 0490                         _CCP2IF 0090                         _CCP3IE 049C  
                       _CCP3IF 009C                         _CCP4IE 049D                         _CCP4IF 009D  
                       _ADRESH 009C                         _ADRESL 009B                         _EEDATA 0193  
                       _CCPR1H 0292                         _CCPR2H 0299                         _CCPR3H 0312  
                       _CCPR1L 0291                         _CCPR4H 0319                         _CCPR2L 0298  
                       _CCPR3L 0311                         _CCPR4L 0318                         _EECON1 0195  
                       _EECON2 0196                 _ExecuteCommand 05FB                         _ANSELA 018C  
                       ?_putch 0070                         _ANSELB 018D            __end_of_SetIOChange 0FA4  
                       _CSMASK 0820                      CRC16@addr 004E                         i1l3309 0043  
                       i1l3407 0120                         i1l3327 0072                         i1l3345 00A1  
                       i1l3363 00D0                         i1l3291 0014                         i1l3391 00FD  
                       _IOMASK 080B            __end_of_SetIOConfig 0398                         _INTCON 000B  
                       _FVRCON 0117             __size_of_ReadIOPin 0020             _ModbusPacketBuffer 00B6  
                _ScanNextIOPin 0F2A                         _TMR0IE 005D                         _TMR1GE 00CF  
                       _TMR0IF 005A                         _TMR1IE 0488                         _TMR1IF 0088  
                       _TMR2IE 0489                         _TMR2IF 0089                         _TMR4IE 0499  
                       _TMR4IF 0099                         _SPBRGH 019C                         _TMR1ON 00C0  
                       _SPBRGL 019B                         _WDTCON 0097                 _Timer0Overflow 0355  
         _PresetSingleRegister 0398                      ??_ReadA2D 0074           _WaitForEndDeciSecond 03BA  
          __end_of_RcvIsDataIn 0D16                         _InFiFo 0040              ScanNextIOPin@loop 0073  
               __CFG_PWRTE$OFF 0000                         _VRange 0043                         _ReadIO 0731  
         __size_of_eeprom_read 0018                         ___bmul 0D51                 __CFG_STVREN$ON 0000  
                    ??_WriteIO 0073             __size_of_SetPullUp 0026     __size_of_SendReadByteFrame 0010  
            __end_of_DoIOCycle 07A1       __end_of_MultipleRegister 0D41           __end_of_eeprom_write 0EBC  
             ??_SetInputConfig 0072                 ?_WriteAllCoils 0070                __pbitbssCOMMONh 03B8  
              _GotCapSenseFlag 03B9         SendBytesFrame@_Address 005C         __end_of_ExecuteCommand 063C  
          __end_of_SaveSetting 0E5A                 SaveSetting@idx 004F            SetAnalogConfig@_tmp 0075  
               _CurrentIOCycle 004A                 ?_ScanNextIOPin 0070                _SetAnalogConfig 067D  
      __end_of__initialization 016E                 SetIOChange@Pin 0075          ?_PresetSingleRegister 0070  
              eeprom_read@addr 0075                  ReadIOPin@mask 0075                  __end_of_CRC16 05FB  
                 __pbssCOMMONh 0078                  _DealWithError 0D05       __size_of_SendPresetFrame 0017  
                ?_ResetIOCycle 0070            ___bmul@multiplicand 0072                   WriteIO@nmask 0075  
                 WriteIO@value 0072                    _ReadTSensor 0D22                  putch@char_out 0073  
                _ModbusAddress 0026         __size_of_SendReadFrame 0014                  __end_of_putch 0EE0  
         __end_of_ReadAllCoils 0F7A              __end_of_ReadIOPin 0E99                    ?_RcvGetChar 0070  
           SetSingleCoil@value 004E                        ??_CRC16 0074                    _SetIOChange 0F7A  
             ?_SetOutputConfig 0070                    _SetIOConfig 029E              eeprom_write@value 0072  
               SetIOConfig@Pin 004F                ?_ExecuteCommand 0070    __end_of_ReadCurrentRegister 051A  
                  _RcvIsDataIn 0D0D                        ??_putch 0072                     __pbssBANK0 0020  
                   __pbssBANK1 00A0                     __pbssBANK2 0120              __end_of_SetPullUp 0F2A  
                   WriteIO@Pin 0076                      ?_ReadVRef 0051                        BYTELOOP 05AC  
             _ModbusOnTransmit 0352                      ?_RcvClear 0070                 ?_DealWithError 0070  
                  _ModbusSlave 003A                 ??_ResetIOCycle 0072                        ?_ReadIO 0051  
 __size_of_ReadHoldingRegister 007B                _InitTimeCapture 07D2                     __pmaintext 0172  
__size_of_SetTimeCaptureConfig 0050                        ?___bmul 0072      __size_of_InitModbusPacket 000C  
                   __pintentry 0004                        _CCP1CON 0293                        _CCP2CON 029A  
                      _CCP3CON 0313                        _CCP4CON 031A                ??_WriteAllCoils 0056  
            WriteAllCoils@loop 0059       __end_of_SendModbusPacket 1000                        _APFCON0 011D  
                      _APFCON1 011E                        _CCPTMRS 029E                        _DHTFlag 0070  
                  _SaveSetting 0E3B                        _COUNTER 01E6         __size_of_SetSingleCoil 0012  
      __end_of_SetAnalogConfig 06BB             SetOutputConfig@Pin 0075                ??_ScanNextIOPin 0072  
                _SendReadFrame 0DAB         ??_PresetSingleRegister 005A                     ??_ReadVRef 0075  
                  _TimeCapture 00A0                     ??_RcvClear 0072                        _ReadA2D 06BB  
          __size_of_RcvGetChar 001A        SetTimeCaptureConfig@Pin 0074                __size_of_ReadIO 0038  
                      _OutFiFo 0078             __end_of_NOT_IOMASK 080B                        _Setting 00D6  
                      _Timerms 0036          __size_of_eeprom_write 0023                __size_of___bmul 0011  
              _RcvSerialBuffer 0120                        _WriteIO 063C              ??_SendPresetFrame 0077  
               RcvGetChar@temp 0073                _ReadInputStatus 0D98                   ?_GetInputPin 0070  
                      __ptext1 0DEC                        __ptext2 0E04                        __ptext3 0D0D  
                      __ptext4 0CF9                        __ptext5 07D2                        __ptext6 05FB  
                      __ptext7 0D98                        __ptext8 0D41                        __ptext9 0434  
                 __size_of_isr 014D       __size_of_ForceSingleCoil 001D                 ?_SendReadFrame 0056  
                      main@idx 0068                        clrloop0 0D00                 _PrimaryTimerms 0028  
         end_of_initialization 016E        __end_of_InitTimeCapture 0800                ??_DealWithError 0072  
            ReadAllCoils@stemp 0050                   _eeprom_write 0E99                  _SetSingleCoil 0D73  
               ReadIO@ioconfig 0055          __size_of_ReadAllCoils 0029              ?_MultipleRegister 0070  
       ReadCurrentRegister@IOn 0063                      _DoIOCycle 0769             ??_MultipleRegister 0072  
         __end_of_ResetIOCycle 0D98                _CurrentIOSensor 004C               ?_SetAnalogConfig 0070  
              _CurrentIOStatus 004D              DoIOCycle@SensorPt 0076             SetInputConfig@_tmp 0073  
                    ReadIO@Pin 0056                  _IOCounterFlag 0071                   _ReadAllCoils 0F51  
               __end_of_CSMASK 082A                 __end_of_IOMASK 0816                  ??_eeprom_read 0072  
      __size_of_SendFrameError 0016                 ?_SetSingleCoil 004E        __end_of_ReadInputStatus 0DAB  
            _TimeCapture1Count 0030              _TimeCapture2Count 002E              _TimeCapture3Count 002C  
            _TimeCapture4Count 002A               ResetIOCycle@loop 0073                 __end_of_ReadIO 0769  
                 ?_ReadTSensor 0051                __pcstackCOMMONh 0070                __pcstackCOMMONl 0079  
             _InitModbusPacket 0D16                 __end_of___bmul 0D62                      __TMR0_MSB 0034  
                 ??_RcvGetChar 0072               ??_ExecuteCommand 0077                  __pbitbssBANK0 0350  
      ReadHoldingRegister@Flag 005A                    _WorkingByte 0047        __size_of_SendBytesFrame 004E  
                   ?_DoIOCycle 0070                   ?_SetIOChange 0072                   _CurrentIOPin 004B  
      ReadHoldingRegister@temp 005B                      _ReadIOPin 0E79            _ReadHoldingRegister 0434  
          start_initialization 0153                      _ByteIndex 0045                   ?_SetIOConfig 0070  
              ??_SendReadFrame 0077                    __end_of_isr 0151            SetSingleCoil@thePin 0050  
                 ?_RcvIsDataIn 0070                      _RcvInFiFo 003F                      _ModbusCRC 0022  
               _ModbusFunction 003B              ??_ForceSingleCoil 0058               ?_InitTimeCapture 0079  
                     CRC16@crc 0050                       CRC16@num 0072                      _SetPullUp 0F04  
            __size_of_ReadVRef 0011             __end_of_RcvGetChar 0E1E           ?_ReadHoldingRegister 0070  
                     ??_ReadIO 0053              __size_of_RcvClear 0006                      _SerialSum 003D  
                     ??___bmul 0073            __end_of_eeprom_read 0E04                   SetPullUp@Pin 0074  
          DecodeSerial@CalcCRC 0053              ?_SendModbusPacket 0070             SetAnalogConfig@Pin 0074  
                 ?_SaveSetting 0070             ??_SendModbusPacket 0076           __size_of_GetInputPin 001F  
                   ?_ReadIOPin 0070                      ___latbits 0001   __end_of_SetTimeCaptureConfig 056A  
                __pcstackBANK0 004E                    WriteIO@mask 0074                   _ModbusBuffer 00E1  
      __size_of_SetInputConfig 0031            SetIOConfig@ValidCCP 0816               eeprom_write@addr 0075  
       SendReadByteFrame@value 0079            SendBytesFrame@NByte 005D       __size_of_SetOutputConfig 002C  
              ??_SetSingleCoil 004F   __size_of_ReadCurrentRegister 006B                       ?_ReadA2D 0072  
              _SendPresetFrame 0DD5          ??_ReadHoldingRegister 0058                     ?_SetPullUp 0072  
          SendBytesFrame@_temp 005B               ?_ReadInputStatus 0070                       ?_WriteIO 0072  
                 _RcvSerialSum 003C          __size_of_ResetIOCycle 0013             SendReadFrame@value 0056  
        __end_of_WriteAllCoils 0F04                 __size_of_CRC16 0043                    ??_DoIOCycle 004E  
           WriteAllCoils@stemp 0057                  ?_DecodeSerial 0070            SetIOConfig@ioconfig 004E  
               __size_of_putch 0024                       _ICOUNTER 01E0          __end_of_ScanNextIOPin 0F51  
       _WaitForStartDeciSecond 03B8  __size_of_PresetSingleRegister 009C                 _SendFrameError 0DBF  
                    clear_ram0 0CFF                    _eeprom_read 0DEC               ReadAllCoils@loop 0052  
                 _ResetIOCycle 0D85            SetOutputConfig@_tmp 0074       MultipleRegister@_Address 0073  
         __size_of_ReadTSensor 000F              SetInputConfig@Pin 0075                     _ADCON0bits 009D  
                   _ADCON1bits 009E                 _SendBytesFrame 056A              _WorkingSensorData 00B0  
                     _BitCount 0048                    ??_ReadIOPin 0072                      main@rcode 0067  
               ??_DecodeSerial 0076           __size_of_SetIOChange 002A  SetTimeCaptureConfig@detection 0072  
      __end_of_SendPresetFrame 0DEC           __size_of_SetIOConfig 00FA                   _SerialBuffer 0140  
     __end_of_InitModbusPacket 0D22         __end_of_SendFrameError 0DD5           __size_of_RcvIsDataIn 0009  
    __size_of_MultipleRegister 0010                       _ReadVRef 0D62                       _RcvClear 0CF9  
      SetOutputConfig@ioconfig 0073          __end_of_DealWithError 0D0D                DecodeSerial@msg 0052  
                  ??_SetPullUp 0073               __size_of_ReadA2D 003C              ??_SetOutputConfig 0072  
         _SetTimeCaptureConfig 051A              GetInputPin@thePin 0074               __size_of_WriteIO 0041  
       __end_of_SendBytesFrame 05B8                   _TimerDeciSec 0041                   _TimerHiCount 0032  
              _ForceSingleCoil 0E1E                   _TimerLoCount 0020             SendBytesFrame@loop 005A  
         __size_of_SaveSetting 001F      ReadHoldingRegister@ctemp1 005F      ReadHoldingRegister@ctemp2 005D  
    ReadHoldingRegister@ctemp3 005E             _EnableConfigChange 0351                   _TimerSecFlag 0354  
                 _IOSensorData 01A0                       __ptext10 04AF                       __ptext11 0DAB  
                     __ptext20 0D31                       __ptext12 056A                       __ptext21 0398  
                     __ptext13 0D62                       __ptext30 0D85                       __ptext22 0EE0  
                     __ptext14 0D22                       __ptext31 0E3B                       __ptext23 029E  
                     __ptext15 0731                       __ptext40 0D16                       __ptext32 0E99  
                     __ptext24 051A                       __ptext16 0E79                       __ptext41 0769  
                     __ptext33 0E1E                       __ptext25 0F04                       __ptext17 06BB  
                     __ptext42 0D51                       __ptext34 0D73                       __ptext26 0FA4  
                     __ptext18 0F51                       __ptext43 0F2A                       __ptext35 063C  
                     __ptext27 07A1                       __ptext19 0E5A                       __ptext44 0D05  
                     __ptext36 0DD5                       __ptext28 0F7A                       __ptext45 06F7  
                     __ptext37 0DBF                       __ptext29 067D                       __ptext46 05B8  
                     __ptext38 0FD0                       __ptext39 0EBC                 _SetInputConfig 07A1  
              ?_SendFrameError 0070             SaveSetting@pointer 004E                  __size_of_main 012C  
     __size_of_SetAnalogConfig 003E     SendModbusPacket@BufferSize 0052          ?_SetTimeCaptureConfig 0072  
                     int$flags 007E        SendFrameError@ErrorCode 0057                       main@loop 0069  
              ?_SendBytesFrame 0070            _ReadCurrentRegister 04AF                      putch@temp 0074  
                     isr@_temp 0038         __end_of_SetInputConfig 07D2                     _FVRCONbits 0117  
      SetAnalogConfig@ioconfig 0073          __end_of_SendReadFrame 0DBF               ?_SendPresetFrame 0070  
              SetPullUp@PullUp 0072                       intlevel1 0000      __size_of_SendModbusPacket 0030  
         ?_ReadCurrentRegister 0070              __CFG_CLKOUTEN$OFF 0000           __end_of_DecodeSerial 0731  
     __size_of_InitTimeCapture 002E        __end_of_ForceSingleCoil 0E3B                  ??_GetInputPin 0072  
              GetInputPin@_tmp 0073                  __pstringtext1 0800                  __pstringtext2 080B  
                __pstringtext3 0816                  __pstringtext4 0820                     _OPTION_REG 0095  
PresetSingleRegister@oldConfig 005B                     _NOT_IOMASK 0800                ?_SetInputConfig 0070  
  __end_of_ReadHoldingRegister 04AF        __size_of_ExecuteCommand 0041               _MultipleRegister 0D31  
        ??_ReadCurrentRegister 005E                  ?_eeprom_write 0072        ReadCurrentRegister@temp 0061  
                 ?_eeprom_read 0079          __end_of_SetSingleCoil 0D85         ??_SetTimeCaptureConfig 0074  
               ReadA2D@channel 004E  
